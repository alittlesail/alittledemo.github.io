
namespace DataServer;

// 注册反射信息
public struct GS2DATA_NRegStruct
{
    List<ALittle.StructInfo> rflt_list;
    Map<int, bool> table_map;
}

struct TableReadyInfo
{
    int total;
    Map<int, bool> ready;
}

// 用于保存哪些表是已经准备好了
private var TABLE_REGISTER_MAP = new Map<int, TableReadyInfo>();      // GS的route_num映射数量

[Msg]
public async static HandleQRegStruct(ALittle.IMsgCommon common, GS2DATA_NRegStruct msg)
{
    // 获取注册信息
    var connect_key = cast<ALittle.MsgSession>(common).GetID();
    var register_map = TABLE_REGISTER_MAP[connect_key];
    if (register_map == null)
    {
        register_map = new TableReadyInfo();
        TABLE_REGISTER_MAP[connect_key] = register_map;
    }
    
    // 注册消息
    for (var index, info in msg.rflt_list)
        ALittle.RegStruct(info.hash_code, info.name, info);
    
    // 计算表总数
    register_map.total = 0;
    for (var key, _ in msg.table_map)
        ++ register_map.total;
    
    // 建表
    register_map.ready = new Map<int, bool>();
    for (var index, info in msg.rflt_list)
    {
        if (msg.table_map[info.hash_code] != null && register_map.ready[info.hash_code] == null)
        {
            var error = A_MysqlSystem.CreateIfNotExitByReflect(info, info.rl_name);
            if (error != null) ALittle.Error(error);
            // 标记成功还是失败
            register_map.ready[info.hash_code] = error == null;
        }
    }
}

// 加载数据
public struct GS2DATA_QLoadStruct
{
    int account_id;
    int hash_code;
}

[Msg]
public await static HandleQLoadStruct(ALittle.IMsgCommon client, GS2DATA_QLoadStruct msg) : ALittle.ProtocolAnyStruct
{
    var connect_key = cast<ALittle.MsgSession>(client).GetID();
    var register_map = TABLE_REGISTER_MAP[connect_key];
    assert(register_map, "表结构尚未注册");
    
    // 查找反射
    var info = ALittle.FindStructById(msg.hash_code);
    assert(info, "反射信息查找失败");
    
    // 根据账号名和表明进行哈希
    var thread_id = carp.JSHash(msg.account_id.."_"..info.rl_name);
    
    // 查找主键
    var primary:string = info.option_map["primary"];
    assert(primary, "找不到主键:"..info.rl_name);
    
    // 如果对应的表还没有创建好，那么就等一下
    var wait_total = register_map.total;
    while (register_map.ready[info.hash_code] == null && wait_total > 0)
    {
        A_MysqlSystem.ExecuteEmpty();
        -- wait_total;
    }
    
    var error, data = A_MysqlSystem.SelectOneFromByKeyByReflect(info, primary, msg.account_id, thread_id);
    if (error != null) throw("数据加载失败:"..error);
    
    // 如果没有数据，那么就创建一条
    if (data == null)
    {
        var map = new Map<string, any>();
        map[primary] = msg.account_id;
        error = A_MysqlSystem.InsertIntoByReflect(info, map, null, thread_id);
        if (error != null) throw("数据加载失败:"..error);
        data = map;
    }
    
    var param = new ALittle.ProtocolAnyStruct();
    param.hash_code = info.hash_code;
    param.value = data;
    return param;
}

// 更新数据
public struct GS2DATA_NBackupStruct
{
    int account_id;
    ALittle.ProtocolAnyStruct data;
}

[Msg]
public async static HandleNBackupStruct(ALittle.IMsgCommon client, GS2DATA_NBackupStruct msg)
{
    var session = cast<ALittle.MsgSession>(client);
    if (session.route_type != ALittle.RouteType.RT_GAME) return;
    if (!g_LeaseManager.CheckLease(msg.account_id, session.route_num))
    {
        ALittle.Warn("CheckLease failed! account_id:"..msg.account_id..", route_num:"..session.route_num..", hash_code:"..msg.data.hash_code);
        return;
    }
 
    var register_map = TABLE_REGISTER_MAP[session.GetID()];
    assert(register_map, "表结构尚未注册");
       
    // 查找反射
    var info = ALittle.FindStructById(msg.data.hash_code);
    assert(info, "反射信息查找失败");
    
    // 根据账号名和表明进行哈希
    var thread_id = carp.JSHash(msg.account_id.."_"..info.rl_name);
    
    // 查找主键
    var primary:string = info.option_map["primary"];
    assert(primary, "找不到主键:"..info.rl_name);
    
    // 如果对应的表还没有创建好，那么就等一下
    var wait_total = register_map.total;
    while (register_map.ready[info.hash_code] == null && wait_total > 0)
    {
        A_MysqlSystem.ExecuteEmpty();
        -- wait_total;
    }
    
    var error = A_MysqlSystem.UpdateOneByReflect(info, msg.data.value, primary, msg.account_id, thread_id);
    if (error != null) throw("数据库操作失败:"..error);
}