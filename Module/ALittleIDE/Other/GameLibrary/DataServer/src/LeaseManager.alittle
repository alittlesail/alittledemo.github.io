
namespace DataServer;

// 租约信息
protected struct LeaseInfo
{
    int account_id;         // 账号ID
    bool confirm;           // 租约通知确定到达
    int timer;              // 定时器
    int gs_route_num;       // 所在的GS
}

// GS连接信息
protected struct LeaseGameServerInfo
{
    string client_ip;
    int client_port;
    int count;
    ALittle.MsgSession session;
}

protected var DATA_LEASE_INTERVAL = 30 * 1000;

public class LeaseManager
{
    private Map<int, LeaseInfo> _lease_map;             // 租约信息
    private int _lease_count;                           // 租约数量
    private Map<int, LeaseGameServerInfo> _info_map;    // 连接信息
    private ALittle.GatewayUpdateRoute _update_route;
    
    private bool _lease_start;
    
    public ctor()
    {
        this._lease_map = new Map<int, LeaseInfo>();
        this._lease_count = 0;
        this._info_map = new Map<int, LeaseGameServerInfo>();
        this._lease_start = true;
    }
    
    public fun Setup()
    {
        A_SessionSystem.AddEventListener(this, this.HandleAnySessionDisconnected);
        this._update_route = new ALittle.GatewayUpdateRoute(g_ConnectServerYunIp
                                                            , g_ConnectServerWanIp
                                                            , g_ConnectServerPort
                                                            , "", "", 0, this._lease_count);
        A_LoopSystem.AddTimer(DATA_LEASE_INTERVAL, bind(this.LeaseStart, this));
    }
    
    private fun LeaseStart()
    {
        this._lease_start = true;
    }
    
    public fun Shutdown()
    {
        for (var account_id, info in this._lease_map)
        {
            if (info.timer != null)
                A_LoopSystem.RemoveTimer(info.timer);
        }
        this._lease_map = new Map<int, LeaseInfo>();
        this._info_map = new Map<int, LeaseGameServerInfo>();
    }
    
    private fun HandleAnySessionDisconnected(ALittle.SessionDisconnectEvent event)
    {
        if (event.route_type != ALittle.RouteType.RT_GAME) return;
        
        // 清理连接信息
        this._info_map[event.route_num] = null;
    }
    
    private fun HandleGameServerInfo(ALittle.MsgSession session, GS2DATA_NGameServerInfo msg)
    {
        if (session.route_type != ALittle.RouteType.RT_GAME) return;

        var info = new LeaseGameServerInfo();
        info.session = session;
        info.client_ip = msg.client_ip;
        info.client_port = msg.client_port;
        
        // 统计分配数量
        info.count = 0;
        for (var account_id, lease_info in this._lease_map)
        {
            if (lease_info.gs_route_num == session.route_num)
                ++ info.count;
        }
        
        // 保存信息
        this._info_map[session.route_num] = info;
    }
    
    public fun GetGameServerInfo(int gs_route_num) : LeaseGameServerInfo
    {
        return this._info_map[gs_route_num];
    }
    
    // 选择负载最小的GS
    private fun SelectGameServer() : LeaseGameServerInfo
    {   
        var target_info:LeaseGameServerInfo = null;
        for (var route_num, info in this._info_map)
        {
            if (target_info == null || target_info.count > info.count)
                target_info = info;
        }
        
        return target_info;
    }
    
    public fun CheckLease(int account_id, int gs_route_num) : bool
    {
        var info = this._lease_map[account_id];
        if (info == null) return false;
        return info.gs_route_num == gs_route_num;
    }
    
    public fun GetLease(int account_id) : LeaseInfo
    {
        // 如果处于不服务时间，那么就返回null
        if (!this._lease_start) return null;
        
        // 如果有查找到，直接返回
        var info = this._lease_map[account_id];
        if (info != null) return info;    
            
        // 选择负载最小的GS
        var target = this.SelectGameServer();
        // 如果没有，那么就直接返回
        if (target == null) return null;                
        // 更新权重
        ++ target.count;
        
        info = new LeaseInfo();
        info.account_id = account_id;
        info.gs_route_num = target.session.route_num;
        // 启动定时器
        info.timer = A_LoopSystem.AddTimer(DATA_LEASE_INTERVAL, bind(this.HandleLeaseTimeout, this, info.gs_route_num, account_id));
        this._lease_map[account_id] = info;
        ++ this._lease_count;
        
        // 分配租约
        // 这里不论分配成功还是失败，都认为是成功
        var param = new ALittle.DATA2GS_NNewLease();
        param.account_id = account_id;
        target.session.SendMsg(param);
        
        // 上报服务器相关信息
        this._update_route.UpdateRouteWeight(this._lease_count);
        
        return info;
    }
    
    // 续约
    public fun HandleLeaseRenew(ALittle.MsgSession session, GS2DATA_QRenewLease msg) : string
    {
        var info = this._lease_map[msg.account_id];
        if (info == null)
        {
            info = new LeaseInfo();
            info.account_id = msg.account_id;
            info.gs_route_num = session.route_num;
            info.confirm = true;
            this._lease_map[msg.account_id] = info;
            // 添加定时器
            info.timer = A_LoopSystem.AddTimer(DATA_LEASE_INTERVAL, bind(this.HandleLeaseTimeout, this, info.gs_route_num, info.account_id));
            return null;
        }
        
        // 如果已经分配出去了，那么就续约失败
        if (info.gs_route_num != session.route_num) return "续约失败";
        info.confirm = true;
        
        // 启动定时器
        if (info.timer != null) A_LoopSystem.RemoveTimer(info.timer);
        info.timer = A_LoopSystem.AddTimer(DATA_LEASE_INTERVAL, bind(this.HandleLeaseTimeout, this, info.gs_route_num, info.account_id));
        
        return null;
    }
    
    // 放弃租约
    public fun HandleReleaseLease(ALittle.MsgSession session, GS2DATA_NReleaseLease msg)
    {
        var info = this._lease_map[msg.account_id];
        if (info == null) return;
        
        // 检查分配的是否正确
        if (info.gs_route_num != session.route_num) return;
        
        // 删除定时器
        if (info.timer != null) A_LoopSystem.RemoveTimer(info.timer);
        
        // 减少权重
        var gs_info = this._info_map[session.route_num];
        if (gs_info != null) -- gs_info.count;
        
        // 删除信息
        this._lease_map[msg.account_id] = null;
    }
    
    // 租约超时
    private fun HandleLeaseTimeout(int route_num, int account_id)
    {
        // 减少权重
        var info = this._info_map[route_num];
        if (info != null) -- info.count;
        
        // 删除信息
        this._lease_map[account_id] = null;
    }
}

protected var g_LeaseManager = new LeaseManager();

public struct GS2DATA_NGameServerInfo
{
    string client_ip;
    int client_port;
}

[Msg]
public static HandleNGameServerInfo(ALittle.IMsgCommon client, GS2DATA_NGameServerInfo msg)
{
    g_LeaseManager.HandleGameServerInfo(cast<ALittle.MsgSession>(client), msg);
}

public struct GS2DATA_QRenewLease
{
    int account_id;
}

public struct DATA2GS_ARenewLease
{
}
[Msg]
public await static HandleQLeaseRenew(ALittle.IMsgCommon client, GS2DATA_QRenewLease msg) : DATA2GS_ARenewLease
{
    var error = g_LeaseManager.HandleLeaseRenew(cast<ALittle.MsgSession>(client), msg);
    assert(error == null, error);
    return new DATA2GS_ARenewLease();
}

public struct GS2DATA_NReleaseLease
{
    int account_id;
}
[Msg]
public static HandleNLeaseRelease(ALittle.IMsgCommon client, GS2DATA_NReleaseLease msg)
{
    g_LeaseManager.HandleReleaseLease(cast<ALittle.MsgSession>(client), msg);
}

