
register namespace VersionServer;

public struct D_VersionInfo
{
    string version_id;           // 版本ID
    string account_id;	        // 账号ID
    string module_name;			// 模块名
    string platform;            // 终端平台
    string big_version;          // 大版本
    string version_number;       // 安装包版本号
    string install_version;      // 安装包版本
    string plugin_list;         // 插件列表
    int install_size;                 // 安装包文件大小
    int status;                       // 状态(0还未上传，1上传成功，2版本作废)
    int small_version_time;        // 小版本时间
    int small_version_index;          // 小版本时间序列
    int create_time;                  // 创建时间
    int create_index;                 // 创建时间序列
    int update_time;                  // 更新时间
    int update_index;                 // 更新时间序列
}

public struct QUpdateVersion
{
    string account_name;            // 模块所属账号
    string module_name;             // 模块名
    string platform;                // 平台
    string big_version;             // 大版本号
    string install_version;         // 安装包版本号
    int small_version_time;         // 小版本号
    int small_version_index;        // 小版本号时间序列
}

public struct AUpdateVersion
{
    bool result;                    // 是否需要更新
    D_VersionInfo version_info;     // 版本信息
    List<string> log_list;          // 版本更新内容
}

[Http]
public await static HandleHttpQUpdateVersion(ALittle.IHttpReceiver client, QUpdateVersion msg) : AUpdateVersion {}


public struct QDownloadVersionFile
{
    string platform;                // 终端平台
    string version_id;              // 版本号ID
    int start_size;                 // 开始下载的大小
    string file_path;               // 文件路径
}

[HttpDownload]
public await static HandleHttpQDownloadVersionFile(ALittle.IHttpReceiver client, QDownloadVersionFile msg) : string, int {}