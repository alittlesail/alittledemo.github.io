
namespace ALittle;

private var __cos = Math_Cos;
private var __sin = Math_Sin;

public class ImageEdit : DisplayLayout
{
    private TextEdit _show_edit;
    
    private double _logic_left;
    private double _logic_right;
    private double _logic_top;
    private double _logic_bottom;
    
    private DisplayObject _show_up;
    private DisplayObject _show_over;
    private DisplayObject _show_down;
    private DisplayObject _show_disabled;

    public ctor(ControlSystem ctrl_sys)
    {
        //创建TextEdit控件
        this._show_edit = new TextEdit(this._ctrl_sys);
        this._show_edit.x_type = UIEnumTypes.POS_ALIGN_STARTING;
        this._show_edit.y_type = UIEnumTypes.POS_ALIGN_STARTING;
        this._show_edit.width_type = UIEnumTypes.SIZE_MARGIN;
        this._show_edit.width_value = 0;
        this._show_edit.height_type = UIEnumTypes.SIZE_MARGIN;
        this._show_edit.height_value = 0;
        this.AddChild(this._show_edit, 5);
    
        //存放逻辑数据
        this._logic_left = 0;
        this._logic_right = 0;
        this._logic_top = 0;
        this._logic_bottom = 0;
    
        //底图初始化
        // this._show_up = null;
        // this._show_over = null;
        // this._show_down = null;
        // this._show_disabled = null;
    
        // 侦听事件
        this._show_edit.AddEventListener(this, this.HandleFocusIn);
        this._show_edit.AddEventListener(this, this.HandleFocusOut);
        this._show_edit.AddEventListener(this, this.HandleMoveIn);
        this._show_edit.AddEventListener(this, this.HandleMoveOut);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformLButtonDown);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformTextInput);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformKeyDown);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformDragBegin);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformDrag);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformDragEnd);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformMButtonWheel);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformChangd);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformEnterKey);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformTabKey);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformRButtonDown);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformRButtonUp);
        this._show_edit.AddEventListener(this, this.HandleImageEditTransformLongButtonDown);
    }
    
    ////////-属性设置////////////////////////////////////////////////////////////////////////
    public set disabled(bool value)
    {
        DisplayObject.disabled(this, value);
        if (value)
            this.ShowDisabled();
        else
            this.ShowUp();
    }
    
    // 控件焦点
    public get is_focus() : bool
    {
        return A_UISystem.focus == this._show_edit;
    }
    // 控件焦点
    public set focus(bool value)
    {
        if (value)
            A_UISystem.focus = this._show_edit;
        else
        {
            if (A_UISystem.focus == this._show_edit)
                A_UISystem.focus = null;
        }
    }
    
    public get is_input() : bool
    {
        return true;
    }

    public get show_edit() : TextEdit
    {
        return this._show_edit;
    }
    
    // 获取光标偏移位置X
    public get cursor_x() : double
    {
        return this._show_edit.cursor_x;
    }
    
    // 获取光标偏移位置Y
    public get cursor_y() : double
    {
        return this._show_edit.cursor_y;
    }
    
    // 设置是否可编辑
    public set editable(bool value)
    {
        this._show_edit.editable = value;
    }
    
    // 获取是否可编辑
    public get editable() : bool
    {
        return this._show_edit.editable;
    }
    
    // 设置字体，以及字体大小
    public set font_path(string value)
    {
        this._show_edit.font_path = value;
    }
    public set font_size(int value)
    {
        this._show_edit.font_size = value;
    }
    
    public get font_path() : string
    {
        return this._show_edit.font_path;
    }
    public get font_size() : int
    {
        return this._show_edit.font_size;
    }
    
    public get regex() : string
    {
        return this._show_edit.regex;
    }
    
    public set regex(string value)
    {
        if (value == null) value = "";
        this._show_edit.regex = value;
    }
    
    public get limit_len() : int
    {
        return this._show_edit.limit_len;
    }
    
    public set limit_len(int value)
    {
        if (value == null) value = 0;
        this._show_edit.limit_len = value;
    }
    
    // 设置文本
    public set text(any value)
    {
        this._show_edit.text = value;
    }
    // 获取文本
    public get text() : string
    {
        return this._show_edit.text;
    }
    
    // 设置粗体
    public set bold(bool value)
    {
        this._show_edit.bold = value;
    }
    public get bold() : bool
    {
        return this._show_edit.bold;
    }
    
    // 设置斜体
    public set italic(bool value)
    {
        this._show_edit.italic = value;
    }
    public get italic() : bool
    {
        return this._show_edit.italic;
    }
    
    // 设置下划线
    public set underline(bool value)
    {
        this._show_edit.underline = value;
    }
    public get underline() : bool
    {
        return this._show_edit.underline;
    }
    
    // 设置删除线
    public set deleteline(bool value)
    {
        this._show_edit.deleteline = value;
    }
    public get deleteline() : bool
    {
        return this._show_edit.deleteline;
    }

    // 光标颜色
    public set cursor_red(double value)
    {
        this._show_edit.cursor_red = value;
    }
    public get cursor_red() : double
    {
        return this._show_edit.cursor_red;
    }
    public set cursor_green(double value)
    {
        this._show_edit.cursor_green = value;
    }
    public get cursor_green() : double
    {
        return this._show_edit.cursor_green;
    }
    public set cursor_blue(double value)
    {
        this._show_edit.cursor_blue = value;
    }
    public get cursor_blue() : double
    {
        return this._show_edit.cursor_blue;
    }
    
    public set red(double value)
    {
        this._show_edit.red = value;
    }
    public get red() : double
    {
        return this._show_edit.red;
    }
    public set green(double value)
    {
        this._show_edit.green = value;
    }
    public get green() : double
    {
        return this._show_edit.green;
    }
    public set blue(double value)
    {
        this._show_edit.blue = value;
    }
    public get blue() : double
    {
        return this._show_edit.blue;
    }
    
    public set ims_padding(int value)
    {
        this._show_edit.ims_padding = value;
    }
    
    public get ims_padding() : int
    {
        return this._show_edit.ims_padding;
    }
    ////////-事件处理////////////////////////////////////////////////////////////////////////
    
    // 处理焦点事件
    protected fun HandleFocusIn(UIFocusInEvent event)
    {
        event.target = this;
        this.DispatchEvent(event);
        this.ShowDown();
    }
    protected fun HandleFocusOut(UIFocusOutEvent event)
    {
        event.target = this;
        this.DispatchEvent(event);
        this.ShowUp();
    }
    
    // 处理发送事件
    protected fun HandleImageEditTransformLButtonDown(UILButtonDownEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformTextInput(UITextInputEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformKeyDown(UIKeyDownEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformDragBegin(UIButtonDragBeginEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformDrag(UIButtonDragEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformDragEnd(UIButtonDragEndEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformMButtonWheel(UIMButtonWheelEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformChangd(UIChangedEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformEnterKey(UIEnterKeyEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformTabKey(UITabKeyEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformRButtonDown(UIRButtonDownEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformRButtonUp(UIRButtonUpEvent event) { event.target = this; this.DispatchEvent(event); }
    protected fun HandleImageEditTransformLongButtonDown(UILongButtonDownEvent event) { event.target = this; this.DispatchEvent(event); }
    
    // 鼠标移入
    protected fun HandleMoveIn(UIMoveInEvent event)
    {
        event.target = this;
        this.DispatchEvent(event);
        if (A_UISystem.focus != this._show_edit)
            this.ShowOver();
    }
    
    // 鼠标移出
    protected fun HandleMoveOut(UIMoveOutEvent event)
    {
        event.target = this;
        this.DispatchEvent(event);
        if (A_UISystem.focus != this._show_edit)
            this.ShowUp();
    }
    ////////////////////////////////////////////////////////////////////////////////-
    protected fun ShowUp()
    {
        if (this._abs_disabled || this._disabled)
            return;
    
        if (this._show_up != null)
            this._show_up.alpha = 1;
        if (this._show_over != null)
            this._show_over.alpha = 0;
        if (this._show_down != null)
            this._show_down.alpha = 0;
        if (this._show_disabled != null)
            this._show_disabled.alpha = 0;
    }

    protected fun ShowDown()
    {
        if (this._abs_disabled || this._disabled)
            return;
    
        if (this._show_up != null)
            this._show_up.alpha = 0;
        if (this._show_over != null)
            this._show_over.alpha = 0;
        if (this._show_down != null)
            this._show_down.alpha = 1;
        if (this._show_disabled != null)
            this._show_disabled.alpha = 0;
    }

    protected fun ShowOver()
    {
        if (this._abs_disabled || this._disabled)
            return;
    
        if (this._show_up != null)
            this._show_up.alpha = 0;
        if (this._show_over != null)
            this._show_over.alpha = 1;
        if (this._show_down != null)
            this._show_down.alpha = 0;
        if (this._show_disabled != null)
            this._show_disabled.alpha = 0;
    }

    protected fun ShowDisabled()
    {
        if (this._show_up != null)
            this._show_up.alpha = 0;
        if (this._show_over != null)
            this._show_over.alpha = 0;
        if (this._show_down != null)
            this._show_down.alpha = 0;
        if (this._show_disabled != null)
            this._show_disabled.alpha = 1;
    }
    
    ////////////////////////////////////////////////////////////////////////////////-
    
    public set show_up(DisplayObject value)
    {
        this.RemoveChild(this._show_up);
        this._show_up = value;
        if (this._show_up != null)
        {
            this._show_up.width_type = UIEnumTypes.SIZE_MARGIN;
            this._show_up.height_type = UIEnumTypes.SIZE_MARGIN;
            this._show_up.width_value = 0;
            this._show_up.height_value = 0;
            this.AddChild(this._show_up, 1);
        }
        this.ShowUp();
    }
    public get show_up() : DisplayObject
    {
        return this._show_up;
    }
    
    public set show_down(DisplayObject value)
    {
        this.RemoveChild(this._show_down);
        this._show_down = value;
        if (this._show_down != null)
        {
            this._show_down.width_type = UIEnumTypes.SIZE_MARGIN;
            this._show_down.height_type = UIEnumTypes.SIZE_MARGIN;
            this._show_down.width_value = 0;
            this._show_down.height_value = 0;
            this.AddChild(this._show_down, 1);
        }
    
        this.ShowUp();
    }
    public get show_down() : DisplayObject
    {
        return this._show_down;
    }
    
    public set show_over(DisplayObject value)
    {
        this.RemoveChild(this._show_over);
        this._show_over = value;
        if (this._show_over != null)
        {
            this._show_over.width_type = UIEnumTypes.SIZE_MARGIN;
            this._show_over.height_type = UIEnumTypes.SIZE_MARGIN;
            this._show_over.width_value = 0;
            this._show_over.height_value = 0;
            this.AddChild(this._show_over, 1);
        }
    
        this.ShowUp();
    }
    public get show_over() : DisplayObject
    {
        return this._show_over;
    }
    
    public set show_disabled(DisplayObject value)
    {
        this.RemoveChild(this._show_disabled);
        this._show_disabled = value;
        if (this._show_disabled != null)
        {
            this._show_disabled.width_type = UIEnumTypes.SIZE_MARGIN;
            this._show_disabled.height_type = UIEnumTypes.SIZE_MARGIN;
            this._show_disabled.width_value = 0;
            this._show_disabled.height_value = 0;
            this.AddChild(this._show_disabled, 1);
        }
    
        this.ShowUp();
    }
    public get show_disabled() : DisplayObject
    {
        return this._show_disabled;
    }
    
    ////////////////////////////////////////////////////////////////////////////////-
    
    public set margin_left(double value)
    {
        this._logic_left = value;
        this.Layout();
    }
    public get margin_left() : double
    {
        return this._logic_left;
    }
    
    public set margin_right(double value)
    {
        this._logic_right = value;
        this.Layout();
    }
    public get margin_right() : double
    {
        return this._logic_right;
    }
    
    public set margin_top(double value)
    {
        this._logic_top = value;
        this.Layout();
    }
    public get margin_top() : double
    {
        return this._logic_top;
    }
    
    public set margin_bottom(double value)
    {
        this._logic_bottom = value;
        this.Layout();
    }
    public get margin_bottom() : double
    {
        return this._logic_bottom;
    }
    // 更新输入框布局
    public fun Layout()
    {
        this.SetChildIndex(this._show_edit, 5);
        this._show_edit.x_value = this._logic_left;
        this._show_edit.y_value = this._logic_top;
        this._show_edit.width_value = this._logic_left + this._logic_right;
        this._show_edit.height_value = this._logic_top + this._logic_bottom;
    }
    
    // 检查坐标(x, y)是否在控件范围内，返回被点中的控件
    public fun PickUp(double x, double y) : DisplayObject, double, double
    {
        // 检查是否被禁用，是否可见
        if (this._ignore || this._abs_disabled || this._abs_visible == false)
            return null, null, null;
    
        // 计算出相对于控件的点
        var xx = x - this._x;
        var yy = y - this._y;
    
        // 处理旋转
        if (this._angle != 0)
        {
            // 逆旋转
            var rad = 3.1415926 * -this._angle / 180.0;
            var cos = __cos(rad);
            var sin = __sin(rad);
            var xxx = xx * cos + yy * -sin;
            var yyy = xx * sin + yy * cos;
    
            xx = xxx;
            yy = yyy;
        }
    
        // 处理缩放
        if (this._scale_x > 0) xx /= this._scale_x;
        if (this._scale_y > 0) yy /= this._scale_y;
    
        // 移动到原来的位置
        var rel_x = xx + this._center_x;
        var rel_y = yy + this._center_y;
    
        if (this._scale_x <= 0 || this._scale_y <= 0)
        {
            if (this._modal)
                return this, rel_x, rel_y;
            return null, rel_x, rel_y;
        }
    
        // 检查是否在当前矩形范围
        if (this._pickup_rect && (rel_x < 0 || rel_y < 0 || rel_x >= this._width || rel_y >= this._height))
        {
            if (this._modal)
                return this, rel_x, rel_y;
            return null, null, null;
        }
    
        // 检查是否拾取子控件
        if (this._pickup_child)
        {
            var v_focus, v_x, v_y = this._show_edit.PickUp(rel_x, rel_y);
            return this._show_edit, v_x, v_y;
        }
    
        if (this._modal || (this._pickup_rect && this._pickup_child == false) || this._pickup_this)
            return this, rel_x, rel_y;

        return null, null, null;
    }
    
    //////////////////////////////////////////////////////////////////////-
    
    // 设置光标到开始位置
    public fun SetCursorToHome()
    {
        this._show_edit.SetCursorToHome();
    }
    
    // 设置光标到结尾位置
    public fun SetCursorToEnd()
    {
        this._show_edit.SetCursorToEnd();
    }
    
    // 复制选中
    public fun SelectAll()
    {
        this._show_edit.SelectAll();
    }
    
    // 复制选中
    public fun CopyText()
    {
        this._show_edit.CopyText();
    }
    
    // 粘帖
    public fun PasteText()
    {
        this._show_edit.PasteText();
    }
    
    // 剪切
    public fun CutText()
    {
        this._show_edit.CutText();
    }
    
    // 插入文本
    public fun InsertText(string value)
    {
        this._show_edit.InsertText(value);
    }
}