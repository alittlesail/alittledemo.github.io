
namespace ALittle;

private var __tostring = String_ToString;
private var __byte = String_Byte;
private var __type = String_Type;

public class Text : DisplayObject
{
    private string _text;
    private bool _bold;
    private bool _italic;
    private bool _underline;
    private bool _deleteline;
    private string _font_path;
    private int _font_size;
    private int _flip;

    public ctor(ControlSystem ctrl_sys)
    {
        this._text = "";
        this._bold = false;            // 是否显示粗体
        this._italic = false;        // 是否显示斜体
        this._underline = false;        // 是否显示下划线
        this._deleteline = false;    // 是否显示删除线
        // this._font_path = null;
        // this._font_size = null;

        this._flip = 0;
    
        // 创建text对象
        [Language(Lua)]
        this._show = new lua.__CPPAPIText();
        [Language(JavaScript)]
        this._show = new JavaScript.JText();
        
        [Language(Lua)]
        A_LoadTextureManager.RegisterRedrawControl(this);
    }
    
    // 重新绘制
    public fun Redraw()
    {
        this._show.NeedDraw();
    }
    
    // 设置字体，以及字体大小
    public set font_path(string value)
    {
        this._font_path = value;
        if (this._font_path == null || this._font_size == null)
            return;
        this._ctrl_sys.SetFont(this, this._font_path, this._font_size);
        this.RejuseSize();
    }
    public set font_size(int value)
    {
        this._font_size = value;
        if (this._font_path == null || this._font_size == null)
            return;
        this._ctrl_sys.SetFont(this, this._font_path, this._font_size);
        this.RejuseSize();
    }
    
    public get font_path() : string
    {
        return this._font_path;
    }
    public get font_size() : int
    {
        return this._font_size;
    }
    
    // 设置文本
    public set text(any value)
    {
        if (value == null)
            return;

        value = __tostring(value);
        // 判定如果文本与当前一致，则直接返回不做处理
        if (this._text == value)
            return;

        this._text = value;
        this._show.SetText(value);
        this.RejuseSize();
    }
    // 获取文本
    public get text() : string
    {
        return this._text;
    }
    
    // 设置粗体
    public set bold(bool value)
    {
        if (this._bold == value)
            return;
        this._bold = value;
        this._show.SetBold(value);
        this.RejuseSize();
    }
    public get bold() : bool
    {
        return this._bold;
    }
    
    // 设置斜体
    public set italic(bool value)
    {
        if (this._italic == value)
            return;
        this._italic = value;
        this._show.SetItalic(value);
        this.RejuseSize();
    }
    public get italic() : bool
    {
        return this._italic;
    }
    
    // 设置下划线
    public set underline(bool value)
    {
        if (this._underline == value)
            return;
        this._underline = value;
        this._show.SetUnderline(value);
        this.RejuseSize();
    }
    public get underline() : bool
    {
        return this._underline;
    }
    
    // 设置删除线
    public set deleteline(bool value)
    {
        if (this._deleteline == value)
            return;
        this._deleteline = value;
        this._show.SetDeleteline(value);
        this.RejuseSize();
    }
    public get deleteline() : bool
    {
        return this._deleteline;
    }
    
    public fun RejuseSize()
    {
        if (this._font_path == null || this._font_size == null)
            return;
        // 获取show的正式宽度和高度
        this.width = this._show.GetRealWidth();
        this.height = this._show.GetRealHeight();
        this.UpdateLayout();
    }
    
    // 调整图像调整到实际大小
    public set rejust_size(bool value)
    {
        if (value != true)
            return;
        this.RejuseSize();
    }
    
    // 设置普通属性
    protected fun DeserializeSetter(DisplayInfo info)
    {
        // 缓存基本属性
        var base_attr = info.__base_attr;
        if (base_attr == null)
        {
            base_attr = new Map<string, any>();
            for (var key, value in cast<Map<string, any>>(info))
            {
                if (__byte(key, 1) != 95 && (__type(value) != "table" || cast<DisplayInfo>(value).__class == null) && key != "file_path")
                    base_attr[key] = value;
            }
            info.__base_attr = base_attr;
        }

        // 设置基本属性
        for (var key, value in base_attr)
            cast<Map<string,any>>(this)[key] = value;

        if (info.font_path != null)
            cast<Map<string,any>>(this)["font_path"] = info.font_path;
    }
    
    // 获取字体高度
    public get font_height() : int
    {
        return this._show.GetFontHeight();
    }
    
    public get flip() : int
    {
        return this._flip;
    }
    
    public set flip(int value)
    {
        this._flip = value;
        this._show.SetFlip(value);
    }
}