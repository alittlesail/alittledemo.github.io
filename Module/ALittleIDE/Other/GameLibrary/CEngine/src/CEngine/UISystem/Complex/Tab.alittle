
namespace ALittle;

public struct UITabCloseEvent : UIEvent {}

public class Tab : Grid3
{
    private string _radiobutton_style;
    private string _closebutton_style;
    private string _text_style;
    private string _selected_closebutton_style;
    private string _selected_text_style;
    
    private double _button_inner_gap;

    
    private Map<DisplayObject, string> _child_id_map;
    private Map<TextRadioButton, bool> _group;
    
    private DisplayView _view;
    private Linear _linear;
        
    private double _view_start;
    private double _view_margin;
    
    private DisplayObject _head_background;
    private int _tab_index;
    
    private double _child_width_margin;
    
    private Functor<(DisplayObject):bool> _close_callback;
    private Functor<(DisplayObject, int):bool> _drag_callback;
    
    private Functor<(DisplayObject)> _close_post_callback;
    private Functor<(DisplayObject)> _drag_post_callback;
    
    private EffectImage _tab_image;

    public ctor(ControlSystem ctrl_sys)
    {
        // this._radiobutton_style = null;    // 单选按钮类型
        // this._closebutton_style = null;    // 关闭按钮类型
        // this._text_style = null;    // 文本类型
        // this._selected_closebutton_style = null;    // 关闭按钮类型
        // this._selected_text_style = null;    // 文本类型
    
        this._button_inner_gap = 8;    // 按钮文本，关闭按钮，tab按钮边缘，它们之间的间隔
    
        // 控件映射ID
        this._child_id_map = CreateKeyWeakMap();
        // 单选按钮组名
        this._group = CreateKeyWeakMap();

        this.type = UIEnumTypes.TYPE_V;
    
        this._view = new DisplayView(this._ctrl_sys);
        this._view.height_type = UIEnumTypes.SIZE_MARGIN;
        this._view.width_type = UIEnumTypes.SIZE_MARGIN;
        this._linear = new Linear(this._ctrl_sys);
        this._linear.type = UIEnumTypes.TYPE_H;
        this._linear.height_type = UIEnumTypes.SIZE_MARGIN;
        this._linear.y_type = UIEnumTypes.POS_ALIGN_ENDING;
        this._view.AddChild(this._linear);
    
        this._view_start = 0;
        this._view_margin = 0;

        // this._head_background = null;

        var show_up = new DisplayLayout(this._ctrl_sys);
        show_up.AddChild(this._view);
        this.show_up = show_up;
        this.show_center = new DisplayLayout(this._ctrl_sys);
    
        this._pickup_rect = true;
        this._pickup_child = true;
    
        this._tab_index = 0;
        this._child_width_margin = 0;
        
        // this._close_callback = null;
        // this._drag_callback = null;

        // this._close_post_callback = null;
        // this._drag_post_callback = null;
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////-
    public fun RefreshView()
    {
        if (this._radiobutton_style == null
                || this._text_style == null
                || this._closebutton_style == null
                || this._selected_text_style == null
                || this._selected_closebutton_style == null)
            return;

        var child_list = this._linear.childs;
        for (var k, v in child_list)
        {
            var childs = v.childs;
            childs[1].RemoveEventListener(this, this.HandleRadioButtonChanged);
            childs[1].RemoveEventListener(this, this.HandleRadioButtonDrag);
            childs[1].RemoveEventListener(this, this.HandleRadioButtonDragBegin);
            childs[1].RemoveEventListener(this, this.HandleRadioButtonDragEnd);
            childs[1].RemoveEventListener(this, this.HandleRadioButtonMClick);
            childs[1].RemoveEventListener(this, this.HandleRadioButtonRButtonDown);
            childs[1].RemoveEventListener(this, this.HandleRadioButtonKeyDown);
            childs[3].RemoveEventListener(this, this.HandleCloseButtonClick);
            childs[5].RemoveEventListener(this, this.HandleCloseButtonClick);
            childs[1].group = null;
        }
        this._linear.RemoveAllChild();

        var show_center = this.show_center;
        child_list = show_center.childs;
        for (var k, v in child_list)
        {
            var radiobutton = this._ctrl_sys.CreateControl{DisplayObject}(this._radiobutton_style);
            var text = this._ctrl_sys.CreateControl{DisplayObject}(this._text_style);
            var closebutton = this._ctrl_sys.CreateControl{DisplayObject}(this._closebutton_style);
            var selected_text = this._ctrl_sys.CreateControl{DisplayObject}(this._selected_text_style);
            var selected_closebutton = this._ctrl_sys.CreateControl{DisplayObject}(this._selected_closebutton_style);
            if (radiobutton != null && text != null && closebutton != null && selected_text != null && selected_closebutton != null)
            {
                var simplelayout = new DisplayLayout(this._ctrl_sys);
                
                radiobutton.selected = (this._tab_index == k);
                radiobutton.AddEventListener(this, this.HandleRadioButtonChanged);
                radiobutton.AddEventListener(this, this.HandleRadioButtonDrag);
                radiobutton.AddEventListener(this, this.HandleRadioButtonDragBegin);
                radiobutton.AddEventListener(this, this.HandleRadioButtonDragEnd);
                radiobutton.AddEventListener(this, this.HandleRadioButtonMClick);
                radiobutton.AddEventListener(this, this.HandleRadioButtonRButtonDown);
                radiobutton.AddEventListener(this, this.HandleRadioButtonKeyDown);
                radiobutton.group = this._group;
                radiobutton.width_type = UIEnumTypes.SIZE_MARGIN;
                radiobutton.height_type = UIEnumTypes.SIZE_MARGIN;
                v.visible = radiobutton.selected;

                text.text = this._child_id_map[v];
                text.disabled = true;
                text.y_type = UIEnumTypes.POS_ALIGN_CENTER;
                text.y_value = 2;
                text.x = this._button_inner_gap;
                text.visible = !radiobutton.selected;

                selected_text.text = this._child_id_map[v];
                selected_text.disabled = true;
                selected_text.y_type = UIEnumTypes.POS_ALIGN_CENTER;
                selected_text.y_value = 2;
                selected_text.x = this._button_inner_gap;
                selected_text.visible = radiobutton.selected;

                closebutton.AddEventListener(this, this.HandleCloseButtonClick);
                closebutton.y_type = UIEnumTypes.POS_ALIGN_CENTER;
                closebutton.y_value = 2;
                closebutton.x = text.x + text.width + this._button_inner_gap;
                closebutton.visible = !radiobutton.selected;
                
                selected_closebutton.AddEventListener(this, this.HandleCloseButtonClick);
                selected_closebutton.y_type = UIEnumTypes.POS_ALIGN_CENTER;
                selected_closebutton.y_value = 2;
                selected_closebutton.x = selected_text.x + selected_text.width + this._button_inner_gap;
                selected_closebutton.visible = radiobutton.selected;

                simplelayout.width = this._button_inner_gap * 3 + text.width + closebutton.width;
                this._linear.AddChild(simplelayout);
                simplelayout.AddChild(radiobutton);
                simplelayout.AddChild(text);
                simplelayout.AddChild(closebutton);
                simplelayout.AddChild(selected_text);
                simplelayout.AddChild(selected_closebutton);
            }
        }
    }
    
    //////////////////////////////////////////////////////////////////////////////////////////////-
    public set radiobutton_style(string value)
    {
        if (this._radiobutton_style == value)
            return;
        this._radiobutton_style = value;
        this.RefreshView();
    }

    public get radiobutton_style() : string
    {
        return this._radiobutton_style;
    }

    public set closebutton_style(string value)
    {
        if (this._closebutton_style == value)
            return;
        this._closebutton_style = value;
        this.RefreshView();
    }

    public get closebutton_style() : string
    {
        return this._closebutton_style;
    }

    public set selected_closebutton_style(string value)
    {
        if (this._selected_closebutton_style == value)
            return;
            
        this._selected_closebutton_style = value;
        this.RefreshView();
    }

    public get selected_closebutton_style() : string
    {
        return this._selected_closebutton_style;
    }

    public set text_style(string value)
    {
        if (this._text_style == value)
            return;
            
        this._text_style = value;
        this.RefreshView();
    }

    public get text_style() :string
    {
        return this._text_style;
    }

    public set selected_text_style(string value)
    {
        if (this._selected_text_style == value)
            return;
            
        this._selected_text_style = value;
        this.RefreshView();
    }

    public get selected_text_style():string
    {
        return this._selected_text_style;
    }

    public set show_head_background(DisplayObject value)
    {
        if (this._head_background != null)
            this._view.RemoveChild(this._head_background);
        this._head_background = value;
        if (this._head_background != null)
        {
            this._head_background.width_type = UIEnumTypes.SIZE_MARGIN;
            this._head_background.width_value = 0;
            this._head_background.height_type = UIEnumTypes.SIZE_MARGIN;
            this._head_background.height_value = 0;
            this._view.AddChild(this._head_background, 1);
        }
    }

    public get show_head_background() : DisplayObject
    {
        return this._head_background;
    }

    public set button_gap(double value)
    {
        this._linear.gap = value;
    }

    public get button_gap() : double
    {
        return this._linear.gap;
    }

    public set button_start(double value)
    {
        this._view.x = value;
    }
    public get button_start() : double
    {
        return this._view.x;
    }

    public set button_margin(double value)
    {
        this._linear.height_value = value;
    }
    public get button_margin() : double
    {
        return this._linear.height_value;
    }

    public set child_width_margin(double value)
    {
        this._child_width_margin = value;
        var show_center = this.show_center;
        var childs = show_center.childs;
        for (var k, v in childs)
            v.width_value = this._child_width_margin;
    }
    public get child_width_margin() : double
    {
        return this._child_width_margin;
    }

    public set head_size(double value)
    {
        this.up_size = value;
    }
    public get head_size() : double
    {
        return this.up_size;
    }

    public set close_callback(Functor<(DisplayObject):bool> value)
    {
        this._close_callback = value;
    }
    public get close_callback() : Functor<(DisplayObject):bool>
    {
        return this._close_callback;
    }

    public set close_post_callback(Functor<(DisplayObject)> value)
    {
        this._close_post_callback = value;
    }
    public get close_post_callback() : Functor<(DisplayObject)>
    {
        return this._close_post_callback;
    }

    public set drag_callback(Functor<(DisplayObject, int):bool> value)
    {
        this._drag_callback = value;
    }
    public get drag_callback() : Functor<(DisplayObject, int):bool>
    {
        return this._drag_callback;
    }

    public set drag_post_callback(Functor<(DisplayObject)> value)
    {
        this._drag_post_callback = value;
    }
    public get drag_post_callback() : Functor<(DisplayObject)>
    {
        return this._drag_post_callback;
    }

    public get view_margin() : double
    {
        return this._view.width_value;
    }
    public set view_margin(double value)
    {
        this._view.width_value = value;
    }
    public get view() : DisplayView
    {
        return this._view;
    }
    public get view_linear() : Linear
    {
        return this._linear;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////-
    // 获取子控件的索引
    public fun GetChildIndex(DisplayObject child) : int
    {
        return cast<DisplayGroup>(this.show_center).GetChildIndex(child);
    }
    // 设置子控件的索引
    public fun SetChildIndex(DisplayObject child, int index) : bool
    {
        // 获取当前索引
        var show_center = cast<DisplayGroup>(this.show_center);
        var cur_index = show_center.GetChildIndex(child);
        if (index > show_center.child_count)
            index = show_center.child_count;
        if (cur_index == index)
            return true;

        var linear = this._linear;
        var linear_childs = linear.childs;
        
        var tab_child = this.tab;

        var button_child = linear_childs[cur_index];
        if (button_child != null)
            linear.SetChildIndex(button_child, index);

        var show_center_childs = show_center.childs;
        var body_child = show_center_childs[cur_index];
        show_center.SetChildIndex(body_child, index);

        this._tab_index = show_center.GetChildIndex(tab_child);
        return true;
    }
    // 根据索引获取子控件
    public fun GetChildByIndex(int index) : DisplayObject
    {
        return cast<DisplayGroup>(this.show_center).GetChildByIndex(index);
    }
    // 获取子控件的索引
    public fun GetChildIndex(DisplayObject child) : int
    {
        return cast<DisplayGroup>(this.show_center).GetChildIndex(child);
    }
    // 获取子控件
    public get childs() : List<DisplayObject>
    {
        var show_center = this.show_center;
        return show_center.childs;
    }
    // 获取子控件数量
    public get child_count() : int
    {
        var show_center = this.show_center;
        return show_center.child_count;
    }
    public fun AddChild(DisplayObject child, [Nullable] int index) : bool
    {
        if (child == null || child == this)
            return false;
            
        // 判定child的父控件是否是自己，如果不是则返回false
        if (child._show_parent == this.show_center || child._logic_parent == this)
            return true;
            
        // 判定child是否有父控件，如果有则父控件移除child
        if (child._logic_parent != null)
            child._logic_parent.RemoveChild(child);
        elseif (child._show_parent != null)
            child._show_parent.RemoveChild(child);
            
        // 添加到容器中，讲逻辑父控件设置为自己
        var show_center = this.show_center;
        show_center.AddChild(child, index);
        child._logic_parent = this;

        child.x = 0;
        child.y = 0;
        child.width_type = UIEnumTypes.SIZE_MARGIN;
        child.width_value = this._child_width_margin;
        child.height_type = UIEnumTypes.SIZE_MARGIN;
        child.height_value = 0;
        child.x_type = UIEnumTypes.POS_ALIGN_ENDING;

        this._child_id_map[child] = child.description;
        if (this._child_id_map[child] == null)
            this._child_id_map[child] = "";

        // 创建按钮
        if (this._radiobutton_style == null
                || this._text_style == null
                || this._closebutton_style == null
                || this._selected_text_style == null
                || this._selected_closebutton_style == null)
            return true;

        var radiobutton = this._ctrl_sys.CreateControl{DisplayObject}(this._radiobutton_style);
        var text = this._ctrl_sys.CreateControl{DisplayObject}(this._text_style);
        var closebutton = this._ctrl_sys.CreateControl{DisplayObject}(this._closebutton_style);
        var selected_text = this._ctrl_sys.CreateControl{DisplayObject}(this._selected_text_style);
        var selected_closebutton = this._ctrl_sys.CreateControl{DisplayObject}(this._selected_closebutton_style);
        if (radiobutton != null && text != null && closebutton != null && selected_text != null && selected_closebutton != null)
        {
            var simplelayout = new DisplayLayout(this._ctrl_sys);
            
            radiobutton.AddEventListener(this, this.HandleRadioButtonChanged);
            radiobutton.AddEventListener(this, this.HandleRadioButtonDrag);
            radiobutton.AddEventListener(this, this.HandleRadioButtonDragBegin);
            radiobutton.AddEventListener(this, this.HandleRadioButtonDragEnd);
            radiobutton.AddEventListener(this, this.HandleRadioButtonMClick);
            radiobutton.AddEventListener(this, this.HandleRadioButtonRButtonDown);
            radiobutton.AddEventListener(this, this.HandleRadioButtonKeyDown);

            radiobutton.group = this._group;
            radiobutton.width_type = UIEnumTypes.SIZE_MARGIN;
            radiobutton.width_value = 0;
            radiobutton.height_type = UIEnumTypes.SIZE_MARGIN;
            radiobutton.height_value = 0;
            child.visible = radiobutton.selected;

            text.text = this._child_id_map[child];
            text.disabled = true;
            text.y_type = UIEnumTypes.POS_ALIGN_CENTER;
            text.y_value = 2;
            text.x = this._button_inner_gap;
            text.visible = !radiobutton.selected;

            selected_text.text = this._child_id_map[child];
            selected_text.disabled = true;
            selected_text.y_type = UIEnumTypes.POS_ALIGN_CENTER;
            selected_text.y_value = 2;
            selected_text.x = this._button_inner_gap;
            selected_text.visible = radiobutton.selected;

            closebutton.AddEventListener(this, this.HandleCloseButtonClick);
            closebutton.y_type = UIEnumTypes.POS_ALIGN_CENTER;
            closebutton.y_value = 2;
            closebutton.x = text.x + text.width + this._button_inner_gap;
            closebutton.visible = !radiobutton.selected;

            selected_closebutton.AddEventListener(this, this.HandleCloseButtonClick);
            selected_closebutton.y_type = UIEnumTypes.POS_ALIGN_CENTER;
            selected_closebutton.y_value = 2;
            selected_closebutton.x = selected_text.x + selected_text.width + this._button_inner_gap;
            selected_closebutton.visible = radiobutton.selected;

            simplelayout.width = this._button_inner_gap * 3 + text.width + closebutton.width;
            this._linear.AddChild(simplelayout, index);
            simplelayout.AddChild(radiobutton);
            simplelayout.AddChild(text);
            simplelayout.AddChild(closebutton);
            simplelayout.AddChild(selected_text);
            simplelayout.AddChild(selected_closebutton);
        }

        if (this._tab_index <= 0)
            this.tab_index = 1;
        elseif (index != null && this._tab_index >= index)
            this._tab_index = this._tab_index + 1;

        return true;
    }

    public fun RemoveChild(DisplayObject child) : bool
    {
        if (child == null)
            return false;

        // 判定child的父控件是否是自己，如果不是则返回false
        if (child._show_parent != this.show_center && child._logic_parent != this)
            return false;

        var show_center = cast<DisplayGroup>(this.show_center);
        var index = show_center.GetChildIndex(child);
        if (index == 0)
            return false;

        // 移除标签页
        show_center.RemoveChild(child);

        // 设置标签页为可见
        child.visible = true;
        // 移除映射
        this._child_id_map[child] = null;
        // 获取标签按钮控件
        var simplelayout = this._linear.GetChildByIndex(index);
        if (simplelayout != null)
        {
            var layout_childs = simplelayout.childs;
            layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonChanged);
            layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonDrag);
            layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonDragBegin);
            layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonDragEnd);
            layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonMClick);
            layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonRButtonDown);
            layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonKeyDown);
            layout_childs[3].RemoveEventListener(this, this.HandleCloseButtonClick);
            layout_childs[5].RemoveEventListener(this, this.HandleCloseButtonClick);
            layout_childs[1].group = null;

            this._linear.RemoveChild(simplelayout);
        }

        var new_index = 0;
        if (this._tab_index == index)
            new_index = index;
        elseif (this._tab_index > index)
            new_index = this._tab_index - 1;
        else
            new_index = this._tab_index;

        if (new_index > show_center.child_count)
            new_index = show_center.child_count;
        elseif (new_index < 0)
            new_index = 0;

        this.tab_index = new_index;
        return true;
    }

    public fun SpliceChild(int index, [Nullable] int count) : int
    {
        var remain_count = this._child_count - index + 1;
        if (count == null) count = remain_count;
        if (count <= 0) return 0;
        if (count > remain_count) count = remain_count;

        var show_center = cast<DisplayGroup>(this.show_center);

        var endv = index + count;
        for (var i = index; i < endv; 1)
        {
            var child = show_center.GetChildByIndex(i);
            if (child == null) break;
            
            // 设置标签页为可见
            child.visible = true;
            // 移除映射
            this._child_id_map[child] = null;
            // 获取标签按钮控件
            var simplelayout = this._linear.GetChildByIndex(index);
            if (simplelayout != null)
            {
                var layout_childs = simplelayout.childs;
                layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonChanged);
                layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonDrag);
                layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonDragBegin);
                layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonDragEnd);
                layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonMClick);
                layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonRButtonDown);
                layout_childs[1].RemoveEventListener(this, this.HandleRadioButtonKeyDown);
                layout_childs[3].RemoveEventListener(this, this.HandleCloseButtonClick);
                layout_childs[5].RemoveEventListener(this, this.HandleCloseButtonClick);
                layout_childs[1].group = null;
            }
        }

        this._linear.SpliceChild(index, count);
        var result = show_center.SpliceChild(index, count);

        var new_index = 0;
        if (this._tab_index >= index && this._tab_index < endv)
            new_index = index;
        elseif (this._tab_index >= endv)
            new_index = this._tab_index - result;
        else
            new_index = this._tab_index;

        if (new_index > show_center.child_count)
            new_index = show_center.child_count;
        elseif (new_index < 0)
            new_index = 0;

        this.tab_index = new_index;
        return result;
    }

    // 检查是否存在某个子控件
    public fun HasChild(DisplayObject child) : bool
    {
        var show_center = cast<DisplayGroup>(this.show_center);
        return show_center.HasChild(child);
    }
    // 移除所有子控件
    public fun RemoveAllChild()
    {
        this._linear.RemoveAllChild();
        var show_center = this.show_center;
        var childs = show_center.childs;
        for (var k, v in childs)
            v.visible = true;
        show_center.RemoveAllChild();
        this._child_id_map = new Map<DisplayObject, string>();
        this._tab_index = 0;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////-

    protected fun HandleRadioButtonChanged(UIChangedEvent event)
    {
        var button = event.target;
        if (button.selected)
        {
            var show_center = this.show_center;
            // 隐藏所有
            var childs = show_center.childs;
            for (var k, v in childs)
                v.visible = false;

            // 显示被选中的
            var simplelayout = button.parent;
            var index = this._linear.GetChildIndex(simplelayout);
            var show_center_childs = show_center.childs;
            show_center_childs[index].visible = true;

            var layout_childs = simplelayout.childs;
            layout_childs[3].visible = false;
            layout_childs[2].visible = false;
            if (layout_childs[5].disabled == false)
                layout_childs[5].visible = true;

            layout_childs[4].visible = true;

            this._tab_index = index;
            //改变时，向外发送SELECT_CHANGE
            this.DispatchEvent(new UISelectChangedEvent());
        }
        else
        {
            var simplelayout = button.parent;
            var layout_childs = simplelayout.childs;
            if (layout_childs[3].disabled == false)
                layout_childs[3].visible = true;

            layout_childs[2].visible = true;
            layout_childs[5].visible = false;
            layout_childs[4].visible = false;
        }
    }

    protected fun HandleCloseButtonClick(UIClickEvent event)
    {
        var simplelayout = event.target._show_parent;
        var index = this._linear.GetChildIndex(simplelayout);

        var show_center = this.show_center;
        var show_center_childs = show_center.childs;
        var child = show_center_childs[index];
        if (this._close_callback != null && this._close_callback(child) == false)
            return;
        this.RemoveChild(child);
        this.DispatchEvent(new UITabCloseEvent());
        if (this._close_post_callback != null)
            this._close_post_callback(child);
    }
    protected fun HandleRadioButtonDragBegin(UIButtonDragBeginEvent event)
    {
        var simplelayout = event.target._show_parent;
        var control_x:double;
        var control_y:double;
        control_x, control_y = simplelayout.LocalToGlobal();
        // 创建渲染图片
        this._tab_image = new EffectImage(this._ctrl_sys);
        this._tab_image.Action(simplelayout);
        // 添加到Tip层
        A_LayerManager.AddToTip(this._tab_image);
        this._tab_image.x = control_x;
        this._tab_image.y = control_y;
        this._tab_image.alpha = 0.9;
    }
    protected fun HandleRadioButtonDrag(UIButtonDragEvent event)
    {
        if (this._tab_image == null)
            return;

        this._tab_image.x = this._tab_image.x + event.delta_x;
        this._tab_image.y = this._tab_image.y + event.delta_y;
    }
    protected fun HandleRadioButtonDragEnd(UIButtonDragEndEvent event)
    {
        var target_index = this._linear.child_count;

        if (this._scale_x > 0)
        {
            var linear_x:double;
            var linear_y:double;
            linear_x, linear_y = this._linear.LocalToGlobal();
            var delta_x = (event.abs_x - linear_x) / this._scale_x;
            // 找到位置插入
            var child_list = this._linear.childs;
            for (var k, v in child_list)
            {
                if (delta_x < v.x + v.width / 2)
                {
                    target_index = k;
                    break;
                }
            }
        }
        // 设置标签位置
        var simplelayout = event.target._show_parent;
        var index = this._linear.GetChildIndex(simplelayout);

        var show_center = this.show_center;
        var show_center_childs = show_center.childs;
        var child = show_center_childs[index];
        if (this._drag_callback != null && this._drag_callback(child, target_index) == false)
            return;

        this._linear.SetChildIndex(simplelayout, target_index);
        show_center.SetChildIndex(child, target_index);

        if (this._drag_post_callback != null)
            this._drag_post_callback(child);

        if (this._tab_image != null)
        {
            // 从Tip层移除
            A_LayerManager.RemoveFromTip(this._tab_image);
            this._tab_image.Clear();
            this._tab_image = null;
        }
    }

    protected fun HandleRadioButtonMClick(UIMClickEvent event)
    {
        // 设置标签位置
        var simplelayout = event.target._show_parent;
        var layout_childs = simplelayout.childs;
        if (layout_childs[3].disabled && layout_childs[5].disabled)
            return;

        var index = this._linear.GetChildIndex(simplelayout);

        var show_center = this.show_center;
        var show_center_childs = show_center.childs;
        var child = show_center_childs[index];
        if (this._close_callback != null && this._close_callback(child) == false)
            return;

        this.RemoveChild(child);
        this.DispatchEvent(new UITabCloseEvent());
        if (this._close_post_callback != null)
            this._close_post_callback(child);
    }

    protected fun HandleRadioButtonRButtonDown(UIRButtonDownEvent event)
    {
        var simplelayout = event.target._show_parent;
        var index = this._linear.GetChildIndex(simplelayout);

        var show_center = this.show_center;
        var show_center_childs = show_center.childs;
        var child = show_center_childs[index];
        var e = new UIRButtonDownEvent();
        e.target = child;
        this.DispatchEvent(e);
    }

    protected fun HandleRadioButtonKeyDown(UIKeyDownEvent event)
    {
        var simplelayout = event.target._show_parent;
        var index = this._linear.GetChildIndex(simplelayout);

        var show_center = this.show_center;
        var show_center_childs = show_center.childs;
        var child = show_center_childs[index];

        var e = new UIKeyDownEvent();
        e.target = child;
        e.mod = event.mod;
        e.sym = event.sym;
        e.scancode = event.scancode;
        this.DispatchEvent(e);
		event.handled = e.handled;
    }
    //////////////////////////////////////////////////////////////////////////////////////////////-
    public fun SetChildText(DisplayObject child, string text)
    {
        if (this._radiobutton_style == null)
            return;

        var show_center = cast<DisplayGroup>(this.show_center);
        var index = show_center.GetChildIndex(child);
        if (index == 0)
            return;

        var simplelayout = this._linear.GetChildByIndex(index);
        if (simplelayout != null)
        {
            var childs = simplelayout.childs;
            var text_control = childs[2];
            var closebutton = childs[3];
            var selected_text_control = childs[4];
            var selected_closebutton = childs[5];
            text_control.text = text;
            selected_text_control.text = text;
            closebutton.x = text_control.x + text_control.width + this._button_inner_gap;
            selected_closebutton.x = selected_text_control.x + selected_text_control.width + this._button_inner_gap;
            simplelayout.width = this._button_inner_gap * 3 + text_control.width + closebutton.width;
            this._child_id_map[child] = text;
            this._linear.Layout(1);
        }
    }
    public fun GetChildText(DisplayObject child) : string
    {
        return this._child_id_map[child];
    }

    public fun HasChildText(string text) : bool
    {
        for (var k, v in this._child_id_map)
        {
            if (v == text)
                return true;
        }
        return false;
    }

    public fun GetChildByText(string text) : DisplayObject
    {
        for (var k, v in this._child_id_map)
        {
            if (v == text)
                return k;
        }
        return null;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////-
    public set tab(DisplayObject child)
    {
        var show_center = cast<DisplayGroup>(this.show_center);
        var index = show_center.GetChildIndex(child);
        if (index == 0)
            return;

        this.tab_index = index;
    }
    public get tab() : DisplayObject
    {
        var show_center = this.show_center;
        var show_center_childs = show_center.childs;
        return show_center_childs[this._tab_index];
    }
    public set tab_index(int index)
    {
        var show_center = this.show_center;
        var show_center_childs = show_center.childs;
        if (this._tab_index != 0)
        {
            var cur_child = show_center_childs[this._tab_index];
            if (cur_child != null)
                cur_child.visible = false;

            var simplelayout = this._linear.GetChildByIndex(this._tab_index);
            if (simplelayout != null)
            {
                var childs = simplelayout.childs;
                childs[1].selected = false;
                childs[2].visible = true;
                if (childs[3].disabled == false)
                    childs[3].visible = true;

                childs[4].visible = false;
                childs[5].visible = false;
            }
            this._tab_index = 0;
        }
        this._tab_index = index;
        if (this._tab_index != 0)
        {
            var child = show_center_childs[this._tab_index];
            if (child == null)
                return;

            child.visible = true;
            var simplelayout = this._linear.GetChildByIndex(this._tab_index);
            if (simplelayout != null)
            {
                var childs = simplelayout.childs;
                childs[1].selected = true;
                childs[2].visible = false;
                childs[3].visible = false;
                childs[4].visible = true;
                if (childs[5].disabled == false)
                    childs[5].visible = true;
            }
        }
        if (this._tab_index < 1 || this._tab_index > show_center.child_count)
            this._tab_index = 0;
    }
    public get tab_index() : int
    {
        return this._tab_index;
    }

    //////////////////////////////////////////////////////////////////////////////////////////////-
    public fun DisableCloseButton(DisplayObject child)
    {
        var show_center = cast<DisplayGroup>(this.show_center);
        var index = show_center.GetChildIndex(child);
        if (index == 0)
            return;

        var linear_childs = this._linear.childs;
        var simplelayout = linear_childs[index];
        if (simplelayout == null)
            return;
        var layout_childs = simplelayout.childs;
        layout_childs[3].visible = false;
        layout_childs[3].disabled = true;
        layout_childs[2].x_type = UIEnumTypes.POS_ALIGN_CENTER;
        layout_childs[2].x_value = 0;

        layout_childs[5].visible = false;
        layout_childs[5].disabled = true;
        layout_childs[4].x_type = UIEnumTypes.POS_ALIGN_CENTER;
        layout_childs[4].x_value = 0;
    }

    public fun DisableAllCloseButton()
    {
        var show_center = this.show_center;
        var count = show_center.child_count;

        var linear_childs = this._linear.childs;
        for (var index = 1; index <= count; 1)
        {
            var simplelayout = linear_childs[index];
            if (simplelayout == null)
                return;

            var layout_childs = simplelayout.childs;
            layout_childs[3].visible = false;
            layout_childs[3].disabled = true;
            layout_childs[2].x_type = UIEnumTypes.POS_ALIGN_CENTER;
            layout_childs[2].x_value = 0;
    
            layout_childs[5].visible = false;
            layout_childs[5].disabled = true;
            layout_childs[4].x_type = UIEnumTypes.POS_ALIGN_CENTER;
            layout_childs[4].x_value = 0;
        }
    }
    
    public fun EnableCloseButton(DisplayObject child)
    {
        var show_center = cast<DisplayGroup>(this.show_center);
        var index = show_center.GetChildIndex(child);
        if (index == 0)
            return;

        var linear_childs = this._linear.childs;
        var simplelayout = linear_childs[index];
        if (simplelayout == null)
            return;

        var layout_childs = simplelayout.childs;
    
        layout_childs[3].visible = !layout_childs[1].selected;
        layout_childs[3].disabled = false;
        layout_childs[2].x_type = UIEnumTypes.POS_ABS;
        layout_childs[2].x = this._button_inner_gap;
    
        layout_childs[5].visible = layout_childs[1].selected;
        layout_childs[5].disabled = false;
        layout_childs[4].x_type = UIEnumTypes.POS_ABS;
        layout_childs[4].x = this._button_inner_gap;
    }
    //////////////////////////////////////////////////////////////////////////
    
    public fun GetChildHead(DisplayObject child) : DisplayObject
    {
        var show_center = cast<DisplayGroup>(this.show_center);
        var index = show_center.GetChildIndex(child);
        if (index == 0)
            return null;

        var linear_childs = this._linear.childs;
        return linear_childs[index];
    }
}