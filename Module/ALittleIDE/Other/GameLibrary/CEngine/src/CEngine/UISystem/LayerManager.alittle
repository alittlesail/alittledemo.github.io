
//[[
//	层管理器
//		UI系统的层，层的顺序是固定不变的
//	UI系统一般有4个层。原始事件自顶向底投递，直到有控件处理为止
//	1.TIP层，当鼠标移到某些控件上，这些控件旁边会跳出一些控件显示一些说明，这些控件放在TIP层
//		比如游戏中当鼠标移动到装备ICON上是，鼠标旁边会出现一个文本框，里面显示装备的等级，攻击力，防御力等文本信息，或者一些图片。这样的文本框会在TIP层
//		特点：不会处理消息事件
//	2.右键菜单层，当鼠标点击右键的时候，会跳出一个右键菜单（跟windows桌面的右键菜单一样）
//		特点：处理消息事件，同一时刻只能出现一个右键菜单。当一个出现的时候，其他所有的都要隐藏起来
//	3.模态层，模态控件出现的时候，你只能操作模态控件，其他控件都操作不了。只有模态控件隐藏起来后才可以操作其他控件
//		特点：独占窗口，模态控件可以叠加，只有全部隐藏起来后才可以操作其他控件
//	4.普通层，大部分控件都在普通层
//		特点：普通层下面又可以有很多普通层，构成一个树形结构
//]]

namespace ALittle;

public class LayerManager
{
    private List<DisplayLayout> _normal_groups;
    private int                 _normal_group_count;
    private DisplayLayout       _modal_layer;
    private DisplayLayout       _right_layer;
    private DisplayObject       _right_show;
    private DisplayLayout       _tip_layer;

    public ctor()
    {
        // 普通层
        this._normal_groups = new List<DisplayLayout>();
        this._normal_group_count = 0;
    
        // 模态层
        this._modal_layer = new DisplayLayout(null);
        [Language(Lua)]
        __CPPAPI_DisplaySystem.AddSpecialChild(this._modal_layer.native_show);
        [Language(JavaScript)]
        A_JDisplaySystem.AddSpecialChild(this._modal_layer.native_show);
    
        // 右键菜单层
        this._right_layer = new DisplayLayout(null);
        // 右键菜单层当前显示的对话框
        this._right_show = null;
        [Language(Lua)]
        __CPPAPI_DisplaySystem.AddSpecialChild(this._right_layer.native_show);
        [Language(JavaScript)]
        A_JDisplaySystem.AddSpecialChild(this._right_layer.native_show);
    
        // TIP层
        this._tip_layer = new DisplayLayout(null);
        this._tip_layer.disabled = true;    // 这个层不处理任何事件
        [Language(Lua)]
        __CPPAPI_DisplaySystem.AddSpecialChild(this._tip_layer.native_show);
        [Language(JavaScript)]
        A_JDisplaySystem.AddSpecialChild(this._tip_layer.native_show);
    }
    
    public fun Shutdown()
    {
        [Language(Lua)]
        __CPPAPI_DisplaySystem.RemoveAllChild();
        [Language(JavaScript)]
        A_JDisplaySystem.RemoveAllChild();
    }
    
    public get group_count() : int
    {
        return this._normal_group_count;
    }
    
    // 添加一个层，添加在最上面
    public fun AddChild(DisplayLayout child, [Nullable] int index)
    {
        if (child == null)
            return;
        if (index == null || index > this._normal_group_count || this._normal_group_count < 1)
        {
            ++ this._normal_group_count;
            this._normal_groups[this._normal_group_count] = child;
            [Language(Lua)]
            __CPPAPI_DisplaySystem.AddChild(child.native_show);
            [Language(JavaScript)]
            A_JDisplaySystem.AddChild(child.native_show);
        }
        else
        {
            if (index < 1) index = 1;
            var back_child = this._normal_groups[index];
            [Language(Lua)]
            __CPPAPI_DisplaySystem.AddChildBefore(back_child.native_show, child.native_show);
            [Language(JavaScript)]
            A_JDisplaySystem.AddChildBefore(back_child.native_show, child.native_show);
            List_Insert(this._normal_groups, index, child);
            ++ this._normal_group_count;
        }
        // 设置层的宽高，层的大小总是跟窗口的大小一样
        child.width = A_UISystem.view_width;
        child.height = A_UISystem.view_height;
    }
    // 移除一个层
    public fun RemoveChild(DisplayObject child)
    {
        if (child == null)
            return;

        var has_layer = false;
        for (var index, value in this._normal_groups)
        {
            if (value == child)
            {
                List_Remove(this._normal_groups, index);
                has_layer = true;
                break;
            }
        }
    
        if (has_layer == false)
            return;
    
        [Language(Lua)]
        __CPPAPI_DisplaySystem.RemoveChild(child.native_show);
        [Language(JavaScript)]
        A_JDisplaySystem.RemoveChild(child.native_show);
        
        // 层个数减一
        -- this._normal_group_count;
    }
    
    // 处理窗口大小变化
    public fun HandleViewResized(int width, int height)
    {
        // 所有层的大小跟窗口的大小保持一致
        for (var group_index, group in this._normal_groups)
        {
            group.width = width;
            group.height = height;
        }
        this._modal_layer.width = width;
        this._modal_layer.height = height;
    
        this._right_layer.width = width;
        this._right_layer.height = height;
    
        this._tip_layer.width = width;
        this._tip_layer.height = height;
    
        this.HideCurrentFromRight();
    }
    
    public fun AddToModal(DisplayObject dialog, [Nullable] int index)
    {
        if (dialog == null)
            return;
        dialog.x_type = UIEnumTypes.POS_ALIGN_CENTER;
        dialog.x_value = 0;
        dialog.y_type = UIEnumTypes.POS_ALIGN_CENTER;
        dialog.y_value = 0;
        dialog.modal = true;
        dialog.visible = false;
        this._modal_layer.AddChild(dialog, index);
    }

    public fun RemoveFromModal(DisplayObject dialog)
    {
        if (dialog == null)
            return;

        dialog.modal = false;
        dialog.visible = true;
        this._modal_layer.RemoveChild(dialog);
    }
    
    // 显示一个右键菜单
    public fun ShowFromRight(DisplayObject dialog, [Nullable] bool focus)
    {
        // 是否获取焦点
        if (focus == null)
            focus = true;
        // 如果已经是当前显示，那么直接返回什么都不做
        if (this._right_show == dialog)
            return;
        // 向当前显示的对话框发送隐藏事件
        if (this._right_show != null)
        {
            this._right_show.DispatchEvent(new UIHideEvent());
            this._right_layer.RemoveChild(this._right_show);
            this._right_show = null;
        }
        // 保存当前对话框
        this._right_show = dialog;
        if (this._right_show != null)
        {
            this._right_layer.AddChild(this._right_show);
            // 设置当前对话框为焦点
            if (focus)
                this._right_show.focus = true;
            // 向新的显示对话框发送显示事件
            dialog.DispatchEvent(new UIShowEvent());
            dialog.visible = true;
        }
    }
    
    // 隐藏指定右键菜单
    public fun HideFromRight(DisplayObject dialog)
    {
        if (this._right_show != dialog)
            return;
        if (this._right_show == null)
            return;
        this._right_show.DispatchEvent(new UIHideEvent());
        this._right_layer.RemoveChild(this._right_show);
        this._right_show.focus = false;
        this._right_show = null;
    }
    
    // 隐藏当前右键菜单
    public fun HideCurrentFromRight() : bool
    {
        if (this._right_show == null)
            return false;

        this.HideFromRight(this._right_show);
        return true;
    }
    
    // 是否为当前右键菜单
    public fun IsCurrentRight(DisplayObject dialog) : bool
    {
        return this._right_show == dialog;
    }
    
    public fun AddToTip(DisplayObject dialog)
    {
        this._tip_layer.AddChild(dialog);
    }
    public fun RemoveFromTip(DisplayObject dialog)
    {
        this._tip_layer.RemoveChild(dialog);
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////
    // 处理鼠标拾取
    protected fun PickUp(double x, double y) : DisplayObject, DisplayLayout, double, double
    {
        // 相对于移动焦点控件的相对坐标
        var mfc_rel_x:double;
        var mfc_rel_y:double;
        // 移动焦点控件
        var mfc:DisplayObject;
        // 移动焦点对话框
        var mfd:DisplayLayout;

        // 不对tip层做处理
    
        // 对右键菜单层做处理
        mfc, mfc_rel_x, mfc_rel_y = this._right_layer.PickUp(x, y);
        if (mfc != null) return mfc, null, mfc_rel_x, mfc_rel_y;
    
        // 对模态层做处理
        mfc, mfc_rel_x, mfc_rel_y = this._modal_layer.PickUp(x, y);
        if (mfc != null) return mfc, null, mfc_rel_x, mfc_rel_y;
    
        // 遍历所有组
        var normal_groups = this._normal_groups;
        for (var group_index = this._normal_group_count; group_index > 0; -1)
        {
            // 获得一组的层
            var normal_layers = normal_groups[group_index];
            // 获得层列表
            var layer_list = normal_layers.childs;
            // 遍历所有层，从尾巴开始遍历
            for (var layer_index = normal_layers.child_count; layer_index > 0; -1)
            {
                var layer = layer_list[layer_index];
                mfc, mfd, mfc_rel_x, mfc_rel_y = this.LayerPickup(cast<DisplayLayout>(layer), x, y);
                if (mfc != null) return mfc, mfd, mfc_rel_x, mfc_rel_y;
            }
        }
        
        return null, null, null, null;
    }

    protected fun LayerPickup(DisplayLayout layer, double x, double y) : DisplayObject, DisplayLayout, double, double
    {
        // 相对于移动焦点控件的相对坐标
        var mfc_rel_x:double;
        var mfc_rel_y:double;
        // 移动焦点控件
        var mfc:DisplayObject;
        // 移动焦点对话框
        var mfd:DisplayLayout;

        // 遍历层下面的对话框
        if (layer.visible && layer.disabled == false && layer.childs != null)
        {
            // 计算相对于层的x，y坐标
            var rel_x = x - layer.x;
            var rel_y = y - layer.y;
            // 遍历层下面的所有对话框
            var child_list = layer.childs;
            for (var index = layer.child_count; index > 0; -1)
            {
                var dialog = child_list[index];
                // 检测鼠标移动焦点
                mfc, mfc_rel_x, mfc_rel_y = dialog.PickUp(rel_x, rel_y);
                // 如果有移动焦点控件，则跳出小循环
                if (mfc != null)
                {
                    mfd = cast<DisplayLayout>(dialog);
                    break;
                }
            }
        }

        return mfc, mfd, mfc_rel_x, mfc_rel_y;
    }

    protected fun HandleLRButtonDown(double x, double y)
    {
        if (this._right_show == null) return;

        var left, top = this._right_show.LocalToGlobal();

        var right = this._right_show.width * this._right_show.scale_x + left;
        var bottom = this._right_show.height * this._right_show.scale_y + top;
        if (x >= left && x < right && y >= top && y < bottom)
            return;
        var link_control:DisplayObject = this._right_show.__right_data;
        if (link_control != null)
        {
            var abs_x, abs_y = link_control.LocalToGlobal();
            if (x >= abs_x
                && x < abs_x + link_control.width * link_control.scale_x
                && y >= abs_y
                && y < abs_y + link_control.height * link_control.scale_y)
                return;
        }
        this._right_show.DispatchEvent(new UIHideEvent());
        this._right_show.visible = false;
        this._right_show = null;
    }
}

public var A_LayerManager = new LayerManager();