
//[[
//	一旦调用了Play函数，那么就会一直在LoopSystem里面进行循环调用。
//	如果确认不需要播放动画了，一定要调用Stop，避免浪费CPU
//
//	如果当前控件被垃圾回收器回收，也是会从LoopSystem消失
//]]

namespace ALittle;

public class FramePlay : DisplayLayout
{
    private int     _interval;
    private int     _play_child_index;
    private int     _play_loop_count;
    private int     _play_loop_index;
    private LoopFunction    _play_loop;
    private double  _base_y;
    private bool    _auto_play;
    
    public ctor(ControlSystem ctrl_sys)
    {
        this._interval = 0;        // 播放间隔
        this._play_child_index = 0;    // 当前播放的图片
        this._play_loop_count = 1;    // 播放次数 0或者小于0表示无限播放
        this._play_loop_index = 0;    // 记录当前播放第几次
        // this._play_loop = null;    // 循环函数
        // this._base_y = null;
        this._auto_play = false;
    }
    
    public set base_y(double value)
    {
        this._base_y = value;
    }
    
    public get base_y() : double
    {
        if (this._base_y != null) return this._base_y;
        return this.height;
    }
    
    public set auto_play(bool value)
    {
        this._auto_play = value;
        if (value) this.Play();
    }
    
    public get auto_play() : bool
    {
        return this._auto_play;
    }
    
    // 添加子控件
    public fun AddChild(DisplayObject child, [Nullable] int index) : bool
    {
        if (DisplayLayout.AddChild(this, child, index) == false)
            return false;
        child.visible = false;
        return true;
    }
    
    public set interval(int value)
    {
        if (this._interval == value)
            return;
        this._interval = value;
        if (this._play_loop != null)
            this.Play();
    }
    
    public get interval() : int
    {
        return this._interval;
    }
    
    public set play_loop_count(int value)
    {
        if (this._play_loop_count == value)
            return;
        this._play_loop_count = value;
        if (this._play_loop != null)
            this.Play();
    }
    
    public get play_loop_count() : int
    {
        return this._play_loop_count;
    }

    public fun IsPlaying() : bool { return this._play_loop != null; }
    
    public fun Play()
    {
        if (this._play_loop != null)
        {
            A_WeakLoopSystem.RemoveUpdater(this._play_loop);
            this._play_loop = null;
        }
        // 播放位置为1
        this._play_child_index = 0;
        // 当前播放次数重置
        this._play_loop_index = 0;
        // 隐藏所有图片
        this.HideAllChild();
        // 更新循环
        this._play_loop = new LoopFunction(bind(this.PlayUpdateLoop, this), -1, this._interval, 0);
        A_WeakLoopSystem.AddUpdater(this._play_loop);
    }
    
    public fun Stop()
    {
        if (this._play_loop != null)
        {
            A_WeakLoopSystem.RemoveUpdater(this._play_loop);
            this._play_loop = null;
        }
    }
    
    public fun HideAllChild()
    {
        for (var index, child in this._childs)
        {
            child.visible = false;
            if (reflect(child) == FramePlay)
                cast<FramePlay>(child).HideAllChild();
        }
    }
    
    public fun ShowAllChild()
    {
        for (var index, child in this._childs)
        {
            child.visible = true;
            if (reflect(child) == FramePlay)
                cast<FramePlay>(child).ShowAllChild();
        }
    }

    protected fun PlayUpdateLoop()
    {
        this.PlayUpdate();
    }
    
    public fun PlayUpdate() : bool
    {
        // 判断结束条件
        if (this._child_count == 0 || (this._play_loop_count > 0 && this._play_loop_index > this._play_loop_count))
        {
            if (this._play_loop != null)
            {
                this._play_loop.SetCompleted();
                this._play_loop = null;
            }
            return false;
        }
    
        // 隐藏当前的图片
        if (this._play_child_index > 0)
        {
            // 如果当前是FramePlay
            var child = this._childs[this._play_child_index];
            if (reflect(child) == FramePlay)
            {
                if (cast<FramePlay>(child).PlayUpdate())
                    return true;
            }
    
            // 隐藏
            child = this._childs[this._play_child_index];
            if (child != null)
                child.visible = false;
        }
    
        // 索引向前加1
        ++ this._play_child_index;
        if (this._play_child_index > this._child_count)
        {
            this._play_child_index = 1;
            // 判断是否结束
            if (this._play_loop_count > 0)
            {
                ++ this._play_loop_index;
                if (this._play_loop_index >= this._play_loop_count)
                {
                    if (this._play_loop != null)
                    {
                        this._play_loop.SetCompleted();
                        this._play_loop = null;
                    }
                    return false;
                }
            }
        }
    
        // 显示下一张图片
        this._childs[this._play_child_index].visible = true;
    
        // 如果当前是FramePlay
        var child = this._childs[this._play_child_index];
        if (reflect(child) == FramePlay)
        {
            cast<FramePlay>(child)._play_loop_index = 0;
            cast<FramePlay>(child)._play_child_index = 0;
            if (cast<FramePlay>(child).PlayUpdate())
                return true;
        }
        return true;
    }
}