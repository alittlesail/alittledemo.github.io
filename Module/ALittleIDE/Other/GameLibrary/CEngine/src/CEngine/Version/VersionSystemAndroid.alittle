
[Language(Lua)]
namespace ALittle;

public class VersionSystemAndroid : VersionSystem
{
    public ctor(string account_name, string module_name)
    {
        this._install_name = "Install.apk";
    }
    
    // 如果APK里面的版本文件比外面的新，那么就把外面的覆盖掉，然后返回true
    public static RefreshVersion()
    {
        // 遍历所有模块
        if (File_GetFileAttr(File_BaseFilePath() .. "Module") == null) return;

        var folder_list = carp.GetFolderNameListInFolder(File_BaseFilePath() .. "Module");
        for (var index, file in folder_list)
        {
            // 模块路径
            var module_path = "Module/" .. file;
            // 如果是第一次安装的，那么可能就没有这个模块路径
            File_MakeDir(File_BaseFilePath() .. module_path);
            // 检查外面是否有CurVersion.db文件
            // 如果没有说明就不用对比了，外面也没有对应的应用文件
            if (File_GetFileAttr(File_BaseFilePath() .. module_path .. "/CurVersion.db") != null)
            {
                var change = false;
                // 把APK里面的CurVersion.db文件复制出来，不然Sqlite3打不开
                var succeed = File_CopyFileFromAsset(module_path .. "/CurVersion.db", File_BaseFilePath() .. module_path .. "/CurVersionInstall.db");
                if (succeed)
                {
                    // 如果失败了，说明当前模块是通过直接下载的，安装包内部没有
                    // 然后对比一下，两个db文件之间的版本信息
                    var sqlite_out = lua.sqlite3.open(File_BaseFilePath() .. module_path .. "/CurVersion.db");
                    if (sqlite_out != null)
                    {
                        var sqlite_in = lua.sqlite3.open(File_BaseFilePath() .. module_path .. "/CurVersionInstall.db");
                        if (sqlite_in != null)
                        {
                            // 取出两个update和index最大的那么进行对比
                            var sql = "SELECT c_update_time,c_update_index FROM SmallVersion ORDER BY c_update_time DESC,c_update_index DESC LIMIT 1";
                            // 取里面的
                            var stmt_in = sqlite_in.prepare(sql);
                            var update_time_in:SmallVersionInfo = null;
                            for (var row in stmt_in.nrows{SmallVersionInfo}())
                                update_time_in = row;
                            stmt_in.reset();

                            // 取外面的
                            var stmt_out = sqlite_out.prepare(sql);
                            var update_time_out:SmallVersionInfo = null;
                            for (var row in stmt_out.nrows{SmallVersionInfo}())
                                update_time_out = row;
                            stmt_out.reset();

                            // 对比里面和外面
                            var comp = VersionSystem.UpdateTimeIndexComp(update_time_in, update_time_out);
                            if (comp > 0)
                            {
                                // 从sqlite_in文件里面获取比update_time_out大的所有信息
                                var stmt = sqlite_in.prepare("SELECT * FROM SmallVersion WHERE c_update_time>? OR (c_update_time=? AND c_update_index>?)");
                                stmt.bind_values(update_time_out.c_update_time, update_time_out.c_update_time, update_time_out.c_update_index);
                                for (var row in stmt.nrows{SmallVersionInfo}())
                                {
                                    // 把对应的文件删掉
                                    Log("安装包的版本比热更新版本高，删掉热更新文件:", File_BaseFilePath() .. module_path .. "/" .. row.c_file_path);
                                    File_DeleteFile(File_BaseFilePath() .. module_path .. "/" .. row.c_file_path); // 删掉文件
                                    change = true;
                                }
                                stmt.reset();
                            }

                            // 取里面的大版本信息
                            sql = "SELECT * FROM BigVersion";
                            // 取里面的
                            stmt_in = sqlite_in.prepare(sql);
                            var big_version_in:BigVersionInfo = null;
                            for (var row in stmt_in.nrows{BigVersionInfo}())
                                big_version_in = row;
                            stmt_in.reset();

                            // 取外面的
                            stmt_out = sqlite_out.prepare(sql);
                            var big_version_out:BigVersionInfo = null;
                            for (var row in stmt_out.nrows{BigVersionInfo}())
                                big_version_out = row;
                            stmt_out.reset();

                            // 如果版本安装包版本不一致，那么就要标记为有变化
                            if (big_version_in != null && big_version_out != null && big_version_in.c_db_version > big_version_out.c_db_version)
                                change = true;

                            // 如果数据库版本不一致，那么就需要重新对比文件
                            if (big_version_in != null && big_version_out != null && big_version_in.c_db_version != big_version_out.c_db_version)
                            {
                                change = true;
                                // 处理
                                stmt_out = sqlite_out.prepare("SELECT * FROM SmallVersion WHERE c_is_delete=0");
                                stmt_in = sqlite_in.prepare("SELECT * FROM SmallVersion WHERE c_is_delete=0 AND c_file_path=?");
                                for (var row in stmt_out.nrows{SmallVersionInfo}())
                                {
                                    stmt_in.bind_values(row.c_file_path);
                                    var has = false;
                                    for (var _ in stmt_in.nrows{SmallVersionInfo}())
                                    {
                                        has = true;
                                        break;
                                    }
                                    stmt_in.reset();
                                    if (has == false)
                                    {
                                        Log("删掉残留文件:", File_BaseFilePath() .. module_path .. "/" .. row.c_file_path);
                                        File_DeleteFile(File_BaseFilePath() .. module_path .. "/" .. row.c_file_path); // 删掉文件
                                    }
                                }
                                stmt_out.reset();
                            }
                            sqlite_in.close();
                        }
                        sqlite_out.close();
                    }
                }

                if (change == true)
                {
                    // 把原来的CurVersion.db删掉，然后把CurVersionInstall名字改为把原来的CurVersion
                    File_DeleteFile(File_BaseFilePath() .. module_path .. "/CurVersion.db"); // 删掉文件
                    File_RenameFile(File_BaseFilePath() .. module_path .. "/CurVersionInstall.db", File_BaseFilePath() .. module_path .. "/CurVersion.db");
                }
                else
                {
                    File_DeleteFile(File_BaseFilePath() .. module_path .. "/CurVersionInstall.db"); // 删掉文件
                }
            }
        }
    }

    public static InstallImpl(string install_name)
    {
        System_InstallProgram(install_name);
        System_ForceExit();
    }
    
    public fun Install([Nullable] string install_name)
    {
        // 执行安装包安装
        if (install_name == null)
            install_name = File_BaseFilePath() .. this._update_path .. this._install_name;

        // 修改安装包的执行权限
        lua.os.execute("chmod 777 " .. File_BaseFilePath() .. "Update");
        lua.os.execute("chmod 777 " .. File_BaseFilePath() .. "Update/" .. this._module_name);
        lua.os.execute("chmod 777 " .. File_BaseFilePath() .. "Update/" .. this._module_name .. "/" .. this._install_name);

        // 执行
        var updater = new LoopFunction(bind(VersionSystemAndroid.InstallImpl, install_name), 1, 0, 1);
        updater.Start();
    }
}