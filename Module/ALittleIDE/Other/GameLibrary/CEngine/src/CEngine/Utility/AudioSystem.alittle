
namespace ALittle;

struct ChunkInfo
{
    string file_path;
    Functor<(string, int)> callback;
    int channel;
    double volume;
    bool mute;
}

class AudioSystem
{
    private Map<int, ChunkInfo> _chunk_map;
    private bool                _app_background;
    private bool                _all_chunk_mute;
    
    public ctor()
    {
        this._chunk_map = new Map<int, ChunkInfo>();
    
        this._app_background = false;
        this._all_chunk_mute = false;

        A_OtherSystem.AddEventListener(this, this.HandleDidEnterBackground);
        A_OtherSystem.AddEventListener(this, this.HandleDidEnterForeground);
    }
    
    //////////////////////////////////-监听APP前后台切换//////////////////////////////////-
    public fun HandleDidEnterBackground(AppDidEnterBackground event)
    {
        this._app_background = true;
        this.UpdateAllChunkVolume();
    }
    
    public fun HandleDidEnterForeground(AppDidEnterForeground event)
    {
        this._app_background = false;
        this.UpdateAllChunkVolume();
    }
    
    public fun UpdateChunkVolume(ChunkInfo info)
    {
        var real_volume = info.volume;
        if (info.mute || this._app_background || this._all_chunk_mute)
            real_volume = 0;
        __CPPAPI_AudioSystem.SetChunkVolume(info.channel, real_volume);
    }
    
    public fun UpdateAllChunkVolume()
    {
        for (var k, v in this._chunk_map)
            this.UpdateChunkVolume(v);
    }
    
    public fun SetAllChunkMute(bool mute)
    {
        if (this._all_chunk_mute == mute)
            return;
        this._all_chunk_mute = mute;
        this.UpdateAllChunkVolume();
    }
    
    public fun GetAllChunkMute() : bool
    {
        return this._all_chunk_mute;
    }
    
    //////////////////////////////////////-Mixer部分//////////////////////////////////////-
    public fun AddChunkCache(string file_path)
    {
        __CPPAPI_AudioSystem.AddChunkCache(file_path);
    }
    
    public fun RemoveChunkCache(string file_path)
    {
        __CPPAPI_AudioSystem.RemoveChunkCache(file_path);
    }
    
    public fun StartChunk(string file_path, [Nullable] int loop, [Nullable] Functor<(string, int)> callback) : int
    {
        if (loop == null) loop = 1;

        var channel = __CPPAPI_AudioSystem.StartChunk(file_path, loop);
        if (channel < 0)
            return -1;
    
        var info = new ChunkInfo();
        info.file_path = file_path;
        info.callback = callback;
        info.channel = channel;
        info.volume = __CPPAPI_AudioSystem.GetChunkVolume(channel);
        info.mute = false;
        this._chunk_map[channel] = info;
        this.UpdateChunkVolume(info);
        return channel;
    }
    
    public fun StopChunk(int channel)
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return;
    
        this._chunk_map[channel] = null;
        __CPPAPI_AudioSystem.StopChunk(channel);
    }
    
    public fun SetChunkMute(int channel, bool mute)
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return;
        if (info.mute == mute)
            return;
        info.mute = mute;
        this.UpdateChunkVolume(info);
    }
    
    public fun GetChunkMute(int channel) : bool
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return false;
        return info.mute;
    }
    
    // 设置音量
    // volume  取值 0-1
    public fun SetChunkVolume(int channel, double volume)
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return;
        info.volume = volume;
        this.UpdateChunkVolume(info);
    }
    
    // 获取音量
    public fun GetChunkVolume(int channel) : double
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return 0;
        return info.volume;
    }
    
    public fun HandleAudioChunkStoppedEvent(int channel)
    {
        var info = this._chunk_map[channel];
        if (info == null)
            return;
        this._chunk_map[channel] = null;
    
        if (info.callback == null)
            return;
        info.callback(info.file_path, info.channel);
    }
}

public var A_AudioSystem = new AudioSystem();