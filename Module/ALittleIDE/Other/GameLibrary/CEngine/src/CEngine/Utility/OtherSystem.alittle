
namespace ALittle;

public struct AppWillEnterBackground : Event { }
public struct AppDidEnterBackground : Event { }
public struct AppWillEnterForeground : Event { }
public struct AppDidEnterForeground : Event { }
public struct AppLowMemory : Event { }

public enum NetworkType
{
    // Windows 版本只有NONE, WIFI 两种区别
    NONE = "OtherSystem_NotifyNetwork_none";
    WIFI = "OtherSystem_NotifyNetwork_wifi";
    LINE = "OtherSystem_NotifyNetwork_line";    
}

public struct NetChangeEvent : Event
{
    int net_type;
}

public struct NewIntentEvent : Event
{
    string url;
}

public struct NotifyJsonRPCEvent : Event
{
    string method;
    any param;
}

public struct ALittleJsonRPCInfo
{
    string method;
    any param;
}

class OtherSystem : EventDispatcher
{
    private bool                _network_started;
    
    private UIEventDispatcher   _system_select_directory;
    private UIEventDispatcher   _system_select_file;
    private UIEventDispatcher   _system_save_file;

    private Functor<(bool)>     _third_share_callback;
    private Functor<(bool)>     _third_login_callback;
    private bool                _third_login_ing;
    
    public ctor()
    {
        this._network_started = false;
    
        this._system_select_directory = null;
        this._system_select_file = null;
        this._system_save_file = null;
    
        this._third_share_callback = null;
        this._third_login_callback = null;
        this._third_login_ing = false;
    }
    
    public fun HandleWillEnterBackground()
    {
        this.DispatchEvent(new AppWillEnterBackground());
    }
    public fun HandleDidEnterBackground()
    {
        this.DispatchEvent(new AppDidEnterBackground());
    }
    public fun HandleWillEnterForeground()
    {
        this.DispatchEvent(new AppWillEnterForeground());
    }
    public fun HandleDidEnterForeground()
    {
        this.DispatchEvent(new AppDidEnterForeground());
    }
    public fun HandleLowMemory()
    {
        this.DispatchEvent(new AppLowMemory());
    }
    public fun HandleNewIntent(string url)
    {
        var event = new NewIntentEvent();
        event.url = url;
        this.DispatchEvent(event);
    }
    
    // 重载侦听函数
    // 对于侦听特殊服务的，侦听事件之后再启动
    public fun AddEventListener<T:Event>(any object, Functor<(any, T)> callback) : bool
    {
        [Language(Lua)]
        {
            var rflt = reflect<T>;
            var net_rflt = reflect<NetChangeEvent>;
            if (rflt.hash_code == net_rflt.hash_code)
            {
                if (this._network_started == false)
                {
                    lua.__CPPAPI_StartNetworkListener();
                    this._network_started = true;
                }
            }   
        }
        return EventDispatcher.AddEventListener(this, object, callback);
    }
    
    public fun HandleNetworkChanged(int net_type)
    {
        var event = new NetChangeEvent();
        event.net_type = net_type;
        this.DispatchEvent(event);
    }
    public fun GetNetworkType() : string
    {
        [Language(Lua)]
        return lua.__CPPAPI_GetNetworkType();
        [Language(JavaScript)]
        return NetworkType.LINE;
    }
    
    public fun HandleALittleJsonRPC(string json)
    {
        var error, content:ALittleJsonRPCInfo = tcall(String_JsonDecode, json);
        if (error != null)
        {
            Log("OtherSystem:HandleALittleJsonRPC:", error, json);
            return;
        }
        if (content.method == null) return;
        if (content.param == null) return;

        var event = new NotifyJsonRPCEvent();
        event.target = this;
        event.method = content.method;
        event.param = content.param;
        this.DispatchEvent(event);
    }
    
    // 系统选择文件夹
    public fun SystemSelectDirectory(DisplayObject target, [Nullable] string init_dir)
    {
        [Language(Lua)]
        this._system_select_directory = target;
        [Language(Lua)]
        lua.__CPPAPI_SystemSelectDirectory(init_dir);
        
        [Language(JavaScript)]
        Error("not support SystemSelectDirectory");
    }
    
    // 处理系统文件选择结果
    public fun HandleSystemSelectDirectory(string path)
    {
        if (this._system_select_directory == null) return;
        // 这样写为了处理SYSTEM_SELECT_DIRECTORY事件的时候，还可以调用A_OtherSystem:SystemSelectDirectory()
        var tmp = this._system_select_directory;
        this._system_select_directory = null;
        var event = new UISystemSelectDirectoryEvent();
        event.target = cast<DisplayObject>(tmp);
        event.path = path;
        tmp.DispatchEvent(event);
    }
    
    // 系统选择文件
    public fun SystemSelectFile(DisplayObject target, [Nullable] string init_dir)
    {
        [Language(Lua)]
        this._system_select_file = target;
        [Language(Lua)]
        lua.__CPPAPI_SystemSelectFile(init_dir);
        
        [Language(JavaScript)]
        Error("not support SystemSelectFile");
    }
    
    // 处理系统文件选择结果
    public fun HandleSystemSelectFile(string path)
    {
        if (this._system_select_file == null) return;
        // 这样写为了处理SYSTEM_SELECT_FILE事件的时候，还可以调用A_OtherSystem:SystemSelectFile()
        var tmp = this._system_select_file;
        this._system_select_file = null;
        var event = new UISystemSelectFileEvent();
        event.target = cast<DisplayObject>(tmp);
        event.path = path;
        tmp.DispatchEvent(event);
    }
    
    // 系统保存文件
    public fun SystemSaveFile(UIEventDispatcher target, string file_name, string path)
    {
        [Language(Lua)]
        this._system_save_file = target;
        [Language(Lua)]
        lua.__CPPAPI_SystemSaveFile(file_name, path);
        
        [Language(JavaScript)]
        Error("not support SystemSelectFile");
    }
    
    // 处理系统文件保存结果
    public fun HandleSystemSaveFile(string path)
    {
        if (this._system_save_file == null) return;
        // 这样写为了处理SYSTEM_SAVE_FILE事件的时候，还可以调用A_OtherSystem:SystemSaveFile()
        var tmp = this._system_save_file;
        this._system_save_file = null;
        var event = new UISystemSaveFileEvent();
        event.target = cast<DisplayObject>(tmp);
        event.path = path;
        tmp.DispatchEvent(event);
    }
}

public var A_OtherSystem = new OtherSystem();