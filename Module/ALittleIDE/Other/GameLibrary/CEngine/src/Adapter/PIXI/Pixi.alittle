
register namespace PIXI;

public struct ApplicationData
{
    int width;
    int height;
    int backgroundColor;
    bool forceCanvas;
}

public class utils
{
    public static isWebGLSupported() : bool {}
}

[Native]
public class Application
{
    public ctor(ApplicationData data) { }
    public get view() : javascript.DomElement {}
    public fun render() {}
    public get renderer() : Renderer {}
    public get stage() : Container {}
    public get ticker() : Ticker {}
}

[Native]
public class Renderer
{
    public get mask() : MaskSystem {}
}

[Native]
public class MaskSystem
{
    public get enableScissor() : bool {}
    public set enableScissor(bool v) {}
}

[Native]
public class Point
{
    public ctor(double x, double y) {}
    public get x() : double {}
    public set x(double v) {}
    
    public get y() : double {}
    public set y(double v) {}
}

[Native]
public class DisplayObject
{
    public get x() : double {}
    public set x(double v) {}
    public get y() : double {}
    public set y(double v) {}
    
    public get width() : double {}
    public set width(double v) {}
    public get height() : double {}
    public set height(double v) {}
    
    public get scale() : Point {}
    public set scale(Point v) {}
    public get pivot() : Point {}
    public set pivot(Point v) {}
    public get rotation() : double {}
    public set rotation(double v) {}
    public get angle() : double {}
    public set angle(double v) {}
    
    public get visible() : bool {}
    public set visible(bool v) {}
    
    public get alpha() : double {}
    public set alpha(double v) {}

    public set mask(PIXI.Graphics v) {}

    public get parent() : Container {}

    public fun getLocalBounds() : Rectangle {}
}

[Native]
public class Container : DisplayObject
{
    public fun addChild(DisplayObject value) {}
    public fun addChildAt(DisplayObject value, int index) {}
    public fun getChildAt(DisplayObject value) : int {}
    public fun removeChild(DisplayObject value) {}
    public fun removeChildAt(DisplayObject value, int index) {}
    public fun removeChildren(int begin, [Nullable] int end) {}
    public get children() : List<DisplayObject> {}
}

[Native]
public class Graphics : Container
{
    public fun clear() {}
    public fun beginFill([Nullable] int color, [Nullable] double alpha) {}
    public fun drawRect(double x, double y, double width, double height) {}
    public fun endFill() {}
}

[Native]
public class Sprite : Container
{
    public get texture() : Texture {}
    public set texture(Texture texture) {}
}

[Native]
public class SimpleMesh : Mesh
{
    public ctor(Texture texture, List<double> vertices, List<double> uvs, List<int> indices) { }
    public get vertices() : List<double> {}
    public set vertices(List<double> v) {}
}

[Native]
public class TilingSprite : Sprite
{
    
}

[Native]
public class Buffer
{
    public get data() : List<double> {}
}

[Native]
public class MeshMaterial
{
    
}

[Native]
public class Mesh : Container
{
    public get texture() : Texture {}
    public set texture(Texture texture) {}

    public get uvBuffer() : Buffer {}
    public get verticesBuffer() : Buffer {}

    public get material() : MeshMaterial {}
    public set material(MeshMaterial v) {}
}

[Native]
public class SimplePlane : Mesh
{
}

[Native]
public class NineSlicePlane : SimplePlane
{
    public ctor(Texture texutre, double leftWidth, double topHeight, double rightWidth, double bottomHeight) {}
    public get leftWidth() : double {}
    public set leftWidth(double v) {}
    public get topHeight() : double {}
    public set topHeight(double v) {}
    public get rightWidth() : double {}
    public set rightWidth(double v) {}
    public get bottomHeight() : double {}
    public set bottomHeight(double v) {}
}

[Native]
public class Text : Sprite
{
    public get text() : string {}
    public set text(string v) {}
    
    public get style() : TextStyle {}
    public set style(TextStyle value) {}
}

[Native]
public class TextStyle
{
    public fun clone() : TextStyle {}
    public get fontFamily() : string {}
    public set fontFamily(string value) {}
    public get fontSize() : int {}
    public set fontSize(int value) {}
    public get fill() : int {}
    public set fill(int value) {}
    public get wordWrap() : bool {}
    public set wordWrap(bool v) {}
    public get breakWords() : bool {}
    public set breakWords(bool v) {}
    public get wordWrapWidth() : double {}
    public set wordWrapWidth(double v) {}
    public get align() : string {}
    public set align(string v) {}
    public get fontWeight() : string {}
    public set fontWeight(string v) {}
    public get fontStyle() : string {}
    public set fontStyle(string v) {}
}

[Native]
public class TextMetrics
{
    public static measureText(string text, TextStyle stype) : TextMetrics {}
    
    public get text() : string {}
    public get width() : int {}
    public get height() : int {}
    public get maxLineWidth() : int {}
    public get lineWidths() : List<double> {}
}

[Native]
public class BaseTexture
{
    
}

[Native]
public class Texture
{
    public ctor([Nullable] BaseTexture baseTexture, [Nullable]Rectangle frame, [Nullable] Rectangle orig, [Nullable] Rectangle trim, [Nullable] double rotate, [Nullable] Point anchor) {}
    
    public set baseTexture(BaseTexture v) {}
    public get baseTexture() : BaseTexture {}
    public set frame(Rectangle v) {}
    public get frame() : Rectangle {}
    public set orig(Rectangle v) {}
    public get orig() : Rectangle {}
    public set trim(Rectangle v) {}
    public get trim() : Rectangle {}
    public set rotate(double v) {}
    public get rotate() : double {}
}

[Native]
public class LoaderResource
{
    public get texture() : Texture {}
}

[Native]
public class LoaderCallback
{
    public fun add(Functor<()> func) {}
}

[Native]
public class Loader
{
    public fun add(string name, string url) : Loader {}
    public fun load(Functor<(Loader, Map<string, LoaderResource>)> func) {}
    public get onProgress() : LoaderCallback {}
    public get onError() : LoaderCallback {}
    public get onLoad() : LoaderCallback {}
    public get onComplete() : LoaderCallback {}
}

[Native]
public class Ticker
{
    public fun add(Functor<(double)> func) {}
}

[Native]
public class Rectangle
{
    public ctor(double x, double y, double width, double height) {}
    public get width() : double {}
    public get height() : double {}
    public get x() : double {}
    public get y() : double {}
}

public struct TextInputStyleInput
{
    string fontSize;
    string padding;
    string width;
    string color;
    string position;
    string background;
    string border;
    string outline;
    string transformOrigin;
    string lineHeight;
    bool multiline;
}

public struct TextInputStyle
{
    TextInputStyleInput input;
}

[Native]
public class TextInput : Container
{
    public ctor(TextInputStyle style) {}

    public get placeholder() : string {}
    public set placeholder(string v) {}
    public fun setInputStyle(string key, any value) {}
    public get text() : string {}
    public set text(string v) {}
    public get disabled() : bool {}
    public set disabled(bool v) {}
    public fun focus() {}
    public fun blur() {}

    public get htmlInput() : javascript.DomElement {}
    public get substituteText() : bool {}
    public set substituteText(bool v) {}
} 