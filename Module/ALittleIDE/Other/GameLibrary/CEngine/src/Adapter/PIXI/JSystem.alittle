
[Language(JavaScript)]
namespace JavaScript;

public static JSystem_GetDeviceID() : string
{
    // 先从cookie获取，如果没有就随机生成一个
    var id:string = null;
    var json:Map<string, any> = null;
    if (document.cookie != null && document.cookie != "")
    {
        var error:string = null;
        error, json = tcall(ALittle.String_JsonDecode, document.cookie);
        if (error != null) json = null;
    }
    if (json != null)
        id = json["device_id"];
    if (id == null)
    {
        var rand = ALittle.Math_RandomInt(0, 10000);
        var time = ALittle.Time_GetCurTime();
        if (json == null) json = new Map<string, any>();
        id = "device_id_"..rand.."_"..time;
        json["device_id"] = id;
        document.cookie = ALittle.String_JsonEncode(json);
    }
    return id;
}

public var A_PixiApp:PIXI.Application;

private static JSystem_FingerDown(javascript.DomElementOnTouchEvent event)
{
    var func = cast<Map<string, Functor<(double, double, int, int)>>>(window)["__ALITTLEAPI_FingerDown"];
    if (func == null) return;
    
    func((event.pageX - event.srcElement.offsetLeft) / A_PixiApp.stage.scale.x, (event.pageY - event.srcElement.offsetTop) / A_PixiApp.stage.scale.y, 1, 1);
}

private static JSystem_FingerUp(javascript.DomElementOnTouchEvent event)
{
    var func = cast<Map<string, Functor<(double, double, int, int)>>>(window)["__ALITTLEAPI_FingerUp"];
    if (func == null) return;
    
    func((event.pageX - event.srcElement.offsetLeft) / A_PixiApp.stage.scale.x, (event.pageY - event.srcElement.offsetTop) / A_PixiApp.stage.scale.y, 1, 1);
}

private static JSystem_FingerMoved(javascript.DomElementOnTouchEvent event)
{
    var func = cast<Map<string, Functor<(double, double, int, int)>>>(window)["__ALITTLEAPI_FingerMoved"];
    if (func == null) return;
    
    func((event.pageX - event.srcElement.offsetLeft) / A_PixiApp.stage.scale.x, (event.pageY - event.srcElement.offsetTop) / A_PixiApp.stage.scale.y, 1, 1);
}

private static JSystem_MouseMoved(javascript.DomElementOnMouseEvent event)
{
    var func = cast<Map<string, Functor<(double, double)>>>(window)["__ALITTLEAPI_MouseMoved"];
    if (func == null) return;
    
    func((event.pageX - event.srcElement.offsetLeft) / A_PixiApp.stage.scale.x, (event.pageY - event.srcElement.offsetTop) / A_PixiApp.stage.scale.y);
}

private static JSystem_MouseDown(javascript.DomElementOnMouseEvent event)
{
    var func:Functor<(double, double, int)>;
    if (event.which == 1)
        func = cast<Map<string, Functor<(double, double, int)>>>(window)["__ALITTLEAPI_LButtonDown"];
    elseif (event.which == 2)
        func = cast<Map<string, Functor<(double, double, int)>>>(window)["__ALITTLEAPI_MButtonDown"];
    elseif (event.which == 3)
        func = cast<Map<string, Functor<(double, double, int)>>>(window)["__ALITTLEAPI_RButtonDown"];
    if (func == null) return;
    
    func((event.pageX - event.srcElement.offsetLeft) / A_PixiApp.stage.scale.x, (event.pageY - event.srcElement.offsetTop) / A_PixiApp.stage.scale.y, 1);
}

private static JSystem_MouseUp(javascript.DomElementOnMouseEvent event)
{
    var func:Functor<(double, double)>;
    if (event.which == 1)
        func = cast<Map<string, Functor<(double, double)>>>(window)["__ALITTLEAPI_LButtonUp"];
    elseif (event.which == 2)
        func = cast<Map<string, Functor<(double, double)>>>(window)["__ALITTLEAPI_MButtonUp"];
    elseif (event.which == 3)
        func = cast<Map<string, Functor<(double, double)>>>(window)["__ALITTLEAPI_RButtonUp"];
    if (func == null) return;
    func((event.pageX - event.srcElement.offsetLeft) / A_PixiApp.stage.scale.x, (event.pageY - event.srcElement.offsetTop) / A_PixiApp.stage.scale.y);
}

private static JSystem_MouseWheel(javascript.DomElementOnMouseWheelEvent event)
{
    var func = cast<Map<string, Functor<(double, double)>>>(window)["__ALITTLEAPI_MouseWheel"];
    if (func == null) return;
    
    var x = event.wheelDelta;
    if (x == null) x = event.detail;
    var y = event.wheelDelta;
    if (y == null) y = event.detail;
    func(x, y);
}

private static JSystem_MouseOut(javascript.DomElementOnMouseEvent event)
{
    var func = cast<Map<string, Functor<()>>>(window)["__ALITTLEAPI_WindowLeave"];
    if (func == null) return;
    
	if (event.pageX - event.srcElement.offsetLeft > 0
        && event.pageY - event.srcElement.offsetTop > 0) return;
    
    func();
}

private static JSystem_KeyDown(javascript.DomElementOnKeyEvent event)
{
    var func = cast<Map<string, Functor<(int, int, int)>>>(window)["__ALITTLEAPI_KeyDown"];
    if (func == null) return;
    func(0, event.keyCode, 0);
}

private static JSystem_KeyUp(javascript.DomElementOnKeyEvent event)
{
    var func = cast<Map<string, Functor<(int, int, int)>>>(window)["__ALITTLEAPI_KeyUp"];
    if (func == null) return;
    func(0, event.keyCode, 0);
}

public static JSystem_CreateView(string title, int width, int height, int flag, double scale) : bool
{
    if (A_PixiApp != null) return true;
    
    var data = new PIXI.ApplicationData();
    data.width = ALittle.Math_Floor(width * scale);
    data.height = ALittle.Math_Floor(height * scale);
    data.forceCanvas = !PIXI.utils.isWebGLSupported();
    A_PixiApp = new PIXI.Application(data);
    document.body.appendChild(A_PixiApp.view);
    document.title = title;
    A_PixiApp.stage.scale.x = scale;
    A_PixiApp.stage.scale.y = scale;
    
	// 监听鼠标基本事件
	if (ALittle.System_IsPhone())
	{
		A_PixiApp.view.ontouchstart = JSystem_FingerDown;
		A_PixiApp.view.ontouchmove = JSystem_FingerMoved;
		A_PixiApp.view.ontouchend = JSystem_FingerUp;
	}
	else
	{
		A_PixiApp.view.onmousedown = JSystem_MouseDown;
		A_PixiApp.view.onmousemove = JSystem_MouseMoved;
		A_PixiApp.view.onmouseup = JSystem_MouseUp;
		A_PixiApp.view.onmousewheel = JSystem_MouseWheel;
		A_PixiApp.view.onmouseout = JSystem_MouseOut;
		A_PixiApp.view.onkeydown = JSystem_KeyDown;
		A_PixiApp.view.onkeyup = JSystem_KeyUp;
	}
    
    A_JDisplaySystem.AddToStage(A_PixiApp.stage);
    
    var func = cast<Map<string, Functor<(int, int)>>>(window)["__ALITTLEAPI_ViewResized"];
    if (func != null) func(width, height);
    
    A_PixiApp.ticker.add(JSystem_MainLoop);
    return true;
}

public static JSystem_SetViewTitle(string title) : bool
{
    document.title = title;
    return true;
}

public static JSystem_Render() : bool
{
    if (A_PixiApp == null) return false;
    A_PixiApp.render();
    return true;
}

public static JSystem_GetStage() : PIXI.Container
{
    if (A_PixiApp == null) return null;
    return A_PixiApp.stage;
}

private var LOOP_LAST_TIME = 0;
public static JSystem_MainLoop(double delta)
{
    if (LOOP_LAST_TIME == 0)
    {
        LOOP_LAST_TIME = javascript.Date.now();
        return;
    }
    
    var cur_time = javascript.Date.now();
    var delta_time = cur_time - LOOP_LAST_TIME;
    LOOP_LAST_TIME = cur_time;
    A_LoopSystem.Update(delta_time);
}