namespace OPSServer;

public struct OPSPermission
{
    string name;
    string value;
}

public struct PermissionConfig
{
    Map<string, List<OPSPermission>> permission;
}

struct MysqlConfig
{
    string db_ip;
    int db_port;
    string user_name;
    string user_pwd;
}

struct ServerConfig
{
    int route_type;
    int route_num;
    Map<string, MysqlConfig> mysql;
    Map<string, string> database;
}

public class OPSManager
{
    private Map<string, any> _ops_client;
    private string _ops_client_md5;
    private ServerConfig _ops_server;
    private PermissionConfig _permission;
    private string _ops_path;

    public ctor()
    {
        
    }

    public fun Setup()
    {
        this._ops_path = g_ConfigSystem.GetString("ops_path", "");
        this._ops_path = ALittle.File_PathEndWithSplit(this._ops_path);
        this.ReloadClientConfig();
        this.ReloadServerConfig();
    }

    public fun Shutdown()
    {

    }

    public fun ReloadClientConfig()
    {
        // 读取配置
        var loader = new ALittle.NormalFileLoader();
        var client_file = loader.Load(this._ops_path.."Client.cfg");
        if (client_file == null)
        {
            ALittle.Error("文件加载失败:"..this._ops_path.."Client.cfg");
            return;
        }
        
        var error, content = tcall(lua.json.decode, client_file);
        if (error != null)
        {
            ALittle.Error("文件解析失败:"..this._ops_path.."Client.cfg");
            return;
        }
        this._permission = content;

        this._ops_client_md5 = ALittle.String_FileMD5(this._ops_path.."Client.cfg");
        this._ops_client = content;
        ALittle.Log(this._ops_path.."Client.cfg reload succeed!");
    }

    public get ClientCfg() : Map<string, any> { return this._ops_client; }

    public fun ReloadServerConfig()
    {
        // 读取配置
        var loader = new ALittle.NormalFileLoader();
        var server_file = loader.Load(this._ops_path.."Server.cfg");
        if (server_file == null)
        {
            ALittle.Error("文件加载失败:"..this._ops_path.."Server.cfg");
            return;
        }

        var error, content = tcall(lua.json.decode, server_file);
        if (error != null)
        {
            ALittle.Error("文件解析失败:"..this._ops_path.."Server.cfg");
            return;
        }

        this._ops_server = content;
        ALittle.Log(this._ops_path.."Server.cfg reload succeed!");
    }

    public get ServerCfg() : ServerConfig { return this._ops_server; }

    public fun FillOPSPermission(PermissionConfig cfg)
    {
        for (var key, value in this._permission.permission)
        {
            cfg.permission[key] = ALittle.String_CopyTable(value);
        }
    }
}

protected var g_OPSManager = new OPSManager();

@Cmd "重新加载客户端配置"
public static reloadClientCfg()
{
    g_OPSManager.ReloadClientConfig();
}

@Cmd "重新加载服务器配置"
public static reloadServerCfg()
{
    g_OPSManager.ReloadServerConfig();
}

// 如果operation等于这个值，说明对应的参数是作为table_name的后缀
// 后缀格式为 table_name + "YYYY_MM_DD"
var OPERATION_TABLE_DAY = "TABLE_DAY";
// 如果operation等于这个值，说明对应的参数是根据account_id来查找数据库
// 根据account_id计算得出是那个DP数据库，然后作为table_name的后缀
var OPERATION_ACCOUNT_ID = "ACCOUNT_ID";

public struct QOPSInvoke
{
    string __account_id;
    string __session_id;
    string __method_id;
}

public struct AOPSInvoke
{

}

@Http
public await static HandleQOPSInvoke(ALittle.IHttpReceiver client, QOPSInvoke msg) : AOPSInvoke
{
    var account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);


}