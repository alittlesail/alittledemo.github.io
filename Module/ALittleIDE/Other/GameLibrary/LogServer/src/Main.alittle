
namespace LogServer;

protected var g_ConfigSystem:ALittle.IJsonConfig;

// 模块入口函数
public async static __Module_Setup(string sengine_path, string module_path, string config_path)
{
    lua.math.randomseed(lua.os.time(null));
    g_ConfigSystem = ALittle.CreateJsonConfig(config_path, true);
    var wan_ip = g_ConfigSystem.GetConfig("wan_ip", "127.0.0.1");
    var yun_ip = g_ConfigSystem.GetConfig("yun_ip", "");
    var port_offset = g_ConfigSystem.GetConfig("port_offset", 0);
    
    __CPPAPI_ServerSchedule.StartMysqlQuery(1, g_ConfigSystem.GetString("main_conn_ip", null),
                                g_ConfigSystem.GetString("main_conn_username", null),
                                g_ConfigSystem.GetString("main_conn_password", null),
                                g_ConfigSystem.GetInt("main_conn_port", null),
                                g_ConfigSystem.GetString("main_conn_dbname", null));
    
    __CPPAPI_ServerSchedule.StartRouteSystem(ALittle.RouteType.RT_LOG, ALittle.RouteNum.RN_DEFAULT);
    __CPPAPI_ServerSchedule.CreateConnectServer(yun_ip, wan_ip, ALittle.RoutePort.RT_LOG_CONNECT + port_offset);
}

// 模块结束函数
public static __Module_Shutdown()
{
}

private var g_CurDate:string = "";

[Msg]
public await static HandleLogEventInfo(ALittle.IMsgCommon client, LogEventInfo msg) : EmptyResult
{
    msg.log_time = lua.os.time(null);
    var cur_date = lua.os.date("%Y_%m_%d", msg.create_time);
    var info = reflect<LogEventInfo>;
    var table_name = info.rl_name.."_"..cur_date;
    if (g_CurDate != cur_date)
    {
        var error = A_MysqlSystem.CreateIfNotExit{LogEventInfo}(table_name);
        if (error != null) throw("日志表创建失败:"..table_name);
        g_CurDate = cur_date;
    }
    
    var error = A_MysqlSystem.InsertInto(msg, table_name);
    if (error != null) throw("数据插入失败:"..error);
    return new EmptyResult();
}
