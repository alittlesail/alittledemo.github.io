namespace GatewayServer;

struct PhoneCodeCfg
{
    string url;
    string sid;
    string token;
    string appid;
    string templateid;
}

struct CodeInfo
{
    int begin_time; // 发送时间
    int end_time;   // 有效截止时间
    string code;    // 验证码
    int count;      // 用于记录已经成功获取了几次验证码
}

public class PhoneCodeManager
{
    private PhoneCodeCfg _phone_code_cfg;
    private int _timer;
    private Map<string, CodeInfo> _phone_code_map;  // 用于保存手机号码对应的验证码
    
    public ctor()
    {
        this._phone_code_map = new Map<string, CodeInfo>();
    }

    public fun Setup()
    {
        // 读取手机验证码配置
        this._phone_code_cfg = g_ConfigSystem.GetConfig("phone_code_cfg", new PhoneCodeCfg());
        
        // 每天定时运行清理
        var delay_time = ALittle.GetNextTodayBeginTime() - lua.os.time();
        this._timer = A_LoopSystem.AddTimer(delay_time * 1000, bind(this.HandleNewDay, this));
    }

    public fun Shutdown()
    {
        if (this._timer != null)
        {
            A_LoopSystem.RemoveTimer(this._timer);
            this._timer = null;
        }
    }

    public fun HandleNewDay()
    {
        var cur_time = lua.os.time();
        // 打印日志
        ALittle.Log("PhoneCodeManager:HandleNewDay:"..lua.os.date("%Y-%m-%d %H:%M:%S", cur_time));
        
        var remove_list = new List<string>();
        // 把过期的都删除
        for (var key, info in this._phone_code_map)
        {
            if (info.end_time > cur_time)
                info.count = 0;
            else
                ALittle.List_Push(remove_list, key);
        }
        for (var index, key in remove_list)
            this._phone_code_map[key] = null;
        
        // 定时明天凌晨
        var delay_time = ALittle.GetNextTodayBeginTime() - lua.os.time();
        this._timer = A_LoopSystem.AddTimer(delay_time * 1000, bind(this.HandleNewDay, this));
    }

    public fun CheckPhoneCode(string phone_number, string phone_code) : string
    {
        // 检查验证码是否正确
        var info = this._phone_code_map[phone_number];
        if (info == null) return "无效验证码";
        // 检查是否过期
        if (info.end_time > lua.os.time(null)) return "您的验证码已过期";
        // 检查验证码是否正确
        if (info.code != phone_code) return "您的验证码不正确";
        return null;
    }

    public fun RemovePhoneCode(string phone_number)
    {
        this._phone_code_map[phone_number] = null;
    }

    public fun AddPhoneCode(string phone_number, string phone_code)
    {
        var info = this._phone_code_map[phone_number];
        if (info != null)
        {
            ++ info.count;                          // 添加次数
            info.code = phone_code;                 // 保存验证码
            info.begin_time = lua.os.time();        // 记录当前时间
            info.end_time = info.begin_time + 300;  // 5分钟后过期
        }
        else
        {
            info = new CodeInfo();
            info.count = 1;
            info.code = phone_code;
            info.begin_time = lua.os.time();
            info.end_time = info.begin_time + 300;
            this._phone_code_map[phone_number] = info;
        }
    }

    public fun GetPhoneCode(string phone_number) : CodeInfo
    {
        return this._phone_code_map[phone_number];
    }

    public fun GetPhoneCodeCfg() : PhoneCodeCfg
    {
        return this._phone_code_cfg;
    }
}

protected var g_PhoneCodeManager = new PhoneCodeManager();

enum PhoneCodeRequestType
{
    PRT_BEGIN = 0;			// 无效
    PRT_REGISTER = 1;		// 注册
    PRT_BINDPHONE = 2;		// 绑定手机
    PRT_FORGOTPWD = 3;		// 忘记密码
    PRT_LOGIN = 4;			// 登录
    PRT_END = 5;			// 无效
}

public struct QPhoneCode
{
    string phone_number;
    int request_type;       // 1:表示注册，2:表示用来绑定手机号码，3:忘记密码
}

public struct APhoneCode
{
}

struct PhoneCodeSendParam
{
    string sid;
    string token;
    string appid;
    string templateid;
    string param;
    string mobile;
}

struct PhoneCodeSendResult
{
    string code;
    string msg;
}

[Msg]
public await static HandleQPhoneCode(ALittle.IMsgCommon client, QPhoneCode msg) : APhoneCode
{
    assert(msg.phone_number != null, "手机号码不能为空");
    assert(msg.phone_number != "", "手机号码不能为空");
    assert(msg.request_type > PhoneCodeRequestType.PRT_BEGIN && msg.request_type < PhoneCodeRequestType.PRT_END, "无效的请求方式!");

    // 如果是忘记密码或者登录的请求方式，需要检查一下手机号码是否存在;
    if (msg.request_type == PhoneCodeRequestType.PRT_FORGOTPWD || msg.request_type == PhoneCodeRequestType.PRT_LOGIN)
    {
        var error, count = A_MysqlSystem.SelectCount{RegisterInfo}("phone_number", msg.phone_number);
        if (error != null) throw(error);
        assert(count != 0, "手机号码不存在!");
    }

    // 检查调用频率拦截
    var info = g_PhoneCodeManager.GetPhoneCode(msg.phone_number);
    if (info != null)
    {
        // 如果一天之内超过5次，那么就直接拦截
        assert(info.count < 5, "该手机已经获取验证码满5次，请明天再试!");
        // 如果离上次发送，还没过2分钟，那么直接拦截
        assert(lua.os.time() - info.begin_time >= 120, "请在2分钟后再获取验证码!");
    }

    var phone_code_cfg = g_PhoneCodeManager.GetPhoneCodeCfg();
    assert(phone_code_cfg.url != null && phone_code_cfg.url != "", "暂时不支持获取验证码");

    // 如果是注册或者绑定手机号码，那么检查一下号码是否已经被注册了
    if (msg.request_type == PhoneCodeRequestType.PRT_REGISTER || msg.request_type == PhoneCodeRequestType.PRT_BINDPHONE)
    {
        var error, count = A_MysqlSystem.SelectCount{RegisterInfo}("phone_number", msg.phone_number);
        if (error != null) throw("数据库操作失败:"..error);
        assert(count > 0, "该号码已经被注册了!");
    }

    // 生成四位验证码，并发送请求
    var phone_code = lua.tostring(lua.math.random(1000, 9999));
    var cfg = g_PhoneCodeManager.GetPhoneCodeCfg();
    var send_param = new PhoneCodeSendParam();
    send_param.sid = cfg.sid;
    send_param.token = cfg.token;
    send_param.appid = cfg.appid;
    send_param.templateid = cfg.templateid;
    send_param.param = phone_code..",5";
    send_param.mobile = msg.phone_number;
    var error, content = A_HttpSystem.PostJson(cfg.url, send_param);
    assert(error == null, "验证码发送失败");
    var result, response:PhoneCodeSendResult = tcall(lua.json.decode, content);
    assert(result == null, "验证码发送结果解析错误");
    assert(response.code == "000000", "验证码发送失败");
    g_PhoneCodeManager.AddPhoneCode(msg.phone_number, phone_code);
    
    return new APhoneCode();
}