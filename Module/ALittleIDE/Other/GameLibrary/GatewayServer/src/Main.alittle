
namespace GatewayServer;        // 命名域

protected var g_ConfigSystem:ALittle.IJsonConfig;

// 模块入口函数
public async static __Module_Setup(string sengine_path, string module_path, string config_path)
{
    alittle.Require(module_path, "Script/ModuleRouteManager");
    alittle.Require(module_path, "Script/DataRouteManager");
    alittle.Require(module_path, "Script/PhoneCodeManager");
    alittle.Require(module_path, "Script/RegisterManager");

    lua.math.randomseed(lua.os.time());
    g_ConfigSystem = ALittle.CreateJsonConfig(config_path, true);
    var wan_ip = g_ConfigSystem.GetConfig("wan_ip", "127.0.0.1");
    var yun_ip = g_ConfigSystem.GetConfig("yun_ip", "");
    var port_offset = g_ConfigSystem.GetConfig("port_offset", 0);
    
    __CPPAPI_ServerSchedule.StartRouteSystem(ALittle.RouteType.RT_GATEWAY, ALittle.RouteNum.RN_DEFAULT);
    __CPPAPI_ServerSchedule.CreateConnectServer(yun_ip, wan_ip, ALittle.RoutePort.RT_GATEWAY_CONNECT + port_offset);
    __CPPAPI_ServerSchedule.CreateHttpServer(yun_ip, wan_ip, ALittle.RoutePort.RT_GATEWAY_HTTP + port_offset, false);
    
    __CPPAPI_ServerSchedule.StartMysqlQuery(1, g_ConfigSystem.GetString("main_conn_ip", null),
                                g_ConfigSystem.GetString("main_conn_username", null),
                                g_ConfigSystem.GetString("main_conn_password", null),
                                g_ConfigSystem.GetInt("main_conn_port", null),
                                g_ConfigSystem.GetString("main_conn_dbname", null));
    
    g_RegisterManager.Setup();
    g_PhoneCodeManager.Setup();
}

// 模块结束函数
public static __Module_Shutdown()
{
    g_RegisterManager.Shutdown();
    g_PhoneCodeManager.Shutdown();
}
