namespace GatewayServer;

public struct DataRouteInfo
{
    int route_type;
    int route_num;
    int route_weight;
    ConnectInfo route_info;
    ALittle.MsgSession session;
}

class DataRouteManager
{
    // 数据服务器路由信息，KEY：路由类型拼上路由编号，Value路由信息
    private Map<string, DataRouteInfo> _route_map;
    
    public ctor()
    {
        this._route_map = new Map<string, DataRouteInfo>();
        
        // 监听连接断开
        A_SessionSystem.AddEventListener(this, this.HandleAnySessionDisconnected);
    }
    
    public fun HandleAnySessionDisconnected(ALittle.SessionDisconnectEvent event)
    {
        // 只处理数据服务器
        if (event.route_type != ALittle.RouteType.RT_DATA) return;
        
        var key = event.route_type.."_"..event.route_num;
        this._route_map[key] = null;
    }
    
    public fun HandleUpdateRouteInfo(ALittle.MsgSession client, NUpdateRouteInfo msg)
    {
        // 只处理数据服务器
        if (client.route_type != ALittle.RouteType.RT_DATA) return;
        
        // 保存信息
        var info = new DataRouteInfo();
        info.session = client;
        info.route_type = client.route_type;
        info.route_num = client.route_num;
        info.route_weight = msg.route_weight;
        info.route_info = msg.route_info;
        var key = info.route_type.."_"..info.route_num;
        this._route_map[key] = info;
    }
    
    public fun HandleUpdateRouteWeight(ALittle.MsgSession client, NUpdateRouteWeight msg)
    {
        // 只处理数据服务器
        if (client.route_type != ALittle.RouteType.RT_DATA) return;
        
        // 更新权重
        var key = client.route_type.."_"..client.route_num;
        var info = this._route_map[key];
        if (info == null) return;
        info.route_weight = msg.route_weight;
    }
    
    // 获取权重值最小的路由
    public fun GetRouteInfo() : DataRouteInfo
    {
        var min_weight = 0;
        var target:DataRouteInfo = null;
        for (var key, info in this._route_map)
        {
            if (target == null || min_weight > info.route_weight)
            {
                target = info;
                min_weight = info.route_weight;
            }
        }
        
        return target;
    }
    
    // 查找路由信息
    public fun FindRouteInfo(int route_num) : DataRouteInfo
    {
        var key = ALittle.RouteType.RT_DATA.."_"..route_num;
        return this._route_map[key];
    }
}

protected var g_DataRouteManager = new DataRouteManager();
