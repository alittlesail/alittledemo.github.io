namespace alittle;

[Language(JavaScript)]
private static JSRequire(string base_path, string url, ALittle.Thread thread)
{
    if (javascript.typeof(javascript.require) != "undefined")
    {
        javascript.require("../../../"..base_path..url);
        cast<Functor<(string)>>(thread)(null);
        return;
    }

    var script = cast<javascript.ScriptElement>(document.createElement("script"));
    script.type = "text/javascript";
    script.async = "async";
        
    var error = bind(cast<Functor<(string)>>(thread), "load failed:"..url);
    script.onabort = error;
    script.onerror = error;
    script.ontimeout = error;
    script.onload = bind(cast<Functor<(string)>>(thread), null);
        
    script.src = base_path..url..".js";
    document.body.appendChild(script);
}

// base_path 基本路径，如果不为空，那么要/结尾
// url 文件相对src的路径，不要/开头
public await static Require(string base_path, string url) : string
{
    [Language(JavaScript)]
    JSRequire(base_path, url, co);
    [Language(JavaScript)]
    return yield;
    
    [Language(Lua)]
    if (_G["core_require"] != null)
        cast<Functor<(string):bool>>(_G["core_require"])(base_path..url);
    else
        lua.require(base_path..url);
    [Language(Lua)]
    return null;
}

// script 脚本代码
// path 用于标记脚本来源
public static RunScript(string script, string path)
{
    [Language(JavaScript)]
    javascript.eval(script);

    [Language(Lua)]
    if (_G["core_run"] != null)
        cast<Functor<(string,string)>>(_G["core_run"])(script, path);
    else
        lua.load(script, path)();
}

// base_path 基本路径，如果不为空，那么要/结尾
// rel_path 文件相对src的路径，不要/开头，不要/开头
// file_list 是paths关键字直接的返回结果
public await static RequireFromPaths(string base_path, string rel_path, List<string> file_list)
{

    for (var index, path in file_list)
    {
        // 去掉文件后缀  .alittle
        [Language(Lua)]
        path = lua.String.sub(path, 1, -9);
        [Language(JavaScript)]
        path = cast<javascript.String>(path).substring(0, cast<javascript.String>(path).length - 8);

        Require(base_path, rel_path..path);
    }
}

public await static RequireCore(string base_path)
{
    Require(base_path, "Core/Base");
    Require(base_path, "Core/Reflect");

    [Language(JavaScript)]
    Require(base_path, "Core/JavaScript");
    [Language(Lua)]
    Require(base_path, "Core/Lua");

    Require(base_path, "Core/Log");
    Require(base_path, "Core/List");
    Require(base_path, "Core/Map");
    Require(base_path, "Core/Math");
    Require(base_path, "Core/String");
    Require(base_path, "Core/Time");
    Require(base_path, "Core/Coroutine");    
    Require(base_path, "Core/Net");
}
