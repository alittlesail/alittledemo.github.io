
[Language(Lua)]
register namespace lua;

// require a script
public static require(string path) {}

// Returns the type of its only argument, coded as a string.
// The possible results of this function are
//    "nil" (a string, not the value nil), "number", "string", "boolean", "table", "function", "thread", and "userdata".
public static type(const any object) : string {}

// This function is a generic interface to the garbage collector.
// It performs different functions according to its first argument, opt:

// "collect": performs a full garbage-collection cycle. This is the default option.
// "stop": stops the garbage collector.
// "restart": restarts the garbage collector.
// "count": returns the total memory in use by Lua (in Kbytes).
// "step": performs a garbage-collection step.
//     The step "size" is controlled by arg (larger values mean more steps) in a non-specified way.
//     If you want to control the step size you must experimentally tune the value of arg.
//     Returns true if the step finished a collection cycle.
// "setpause": sets arg as the new value for the pause of the collector (see §2.10).
//     Returns the previous value for pause.
// "setstepmul": sets arg as the new value for the step multiplier of the collector (see §2.10).
//     Returns the previous value for step.
public static collectgarbage(string cmd) {}

// A global variable (not a function) that holds the global environment (that is, _G._G = _G).
// Lua itself does not use this variable;
// changing its value does not affect any environment, nor vice-versa. (Use setfenv to change environments.)
public var _G:Map<string, any>;

// Receives an argument of any type and converts it to a string in a reasonable format.
// For complete control of how numbers are converted, use string.format.
// If the metatable of e has a "__tostring" field, then tostring calls the corresponding value with e as argument,
// and uses the result of the call as its result.
public static tostring(any value) : string {}

// Tries to convert its argument to a number.
// If the argument is already a number or a string convertible to a number, then tonumber returns this number;
// otherwise, it returns nil.
//
// An optional argument specifies the base to interpret the numeral.
// The base may be any integer between 2 and 36, inclusive.
// In bases above 10, the letter 'A' (in either upper or lower case) represents 10,
// 'B' represents 11, and so forth, with 'Z' representing 35. In base 10 (the default),
// the number can have a decimal part, as well as an optional exponent part (see §2.1).
// In other bases, only unsigned integers are accepted.
public static tonumber(any value) : double {}

// Allows a program to traverse all fields of a table.
// Its first argument is a table and its second argument is an index in this table.
// next returns the next index of the table and its associated value.
// When called with nil as its second argument, next returns an initial index and its associated value.
// When called with the last index, or with nil in an empty table, next returns nil.
// If the second argument is absent, then it is interpreted as nil.
// In particular, you can use next(t) to check whether a table is empty.

// The order in which the indices are enumerated is not specified, even for numeric indices.
// (To traverse a table in numeric order, use a numerical for or the ipairs function.)
// The behavior of next is undefined if, during the traversal, you assign any value to a non-existent field in the table.
// You may however modify existing fields. In particular, you may clear existing fields.
public static next(any table, [Nullable] any pre_key) : any, any {}

// If index is a number, returns all arguments after argument number index.
// Otherwise, index must be the string "#", and select returns the total number of extra arguments it received.
public static select(any index, any param_tail) : any {}

// Sets the metatable for the given table.
// (You cannot change the metatable of other types from Lua, only from C.)
// If metatable is nil, removes the metatable of the given table.
// If the original metatable has a "__metatable" field, raises an error.                                                                                                                                                                                                            This function returns table.
public static setmetatable(any table, any metatable) {}

// If object does not have a metatable, returns nil.
// Otherwise, if the object's metatable has a "__metatable" field, returns the associated value.
// Otherwise, returns the metatable of the given object.
public static getmetatable(any table) : any {}

// Returns the elements from the given table. This function is equivalent to
// return list[i], list[i+1], ···, list[j]
// except that the above code can be written only for a fixed number of elements.
// By default, i is 1 and j is the length of the list, as defined by the length
public static unpack(List<any> list, int i, int j) : any {}

// Gets the real value of table[index], without invoking any metamethod.
// table must be a table; index may be any value.
public static rawget(any table, any index) : any {}

// Sets the real value of table[index] to value, without invoking any metamethod.
// table must be a table, index any value different from nil, and value any Lua value.
public static rawset(any table, any index, any value) {}

// Receives any number of arguments, and prints their values to stdout, using the tostring function to convert them to strings.
// print is not intended for formatted output, but only as a quick way to show a value, typically for debugging.
// For formatted output, use string.format.
public static print(...) {}

// Calls function f with the given arguments in protected mode.
// This means that any error inside f is not propagated; instead, pcall catches the error and returns a status code.
// Its first result is the status code (a boolean), which is true if the call succeeds without errors.
// In such case, pcall also returns all results from the call, after this first result.
// In case of any error, pcall returns false plus the error message.
public static pcall(...) : bool, ... {}

// Terminates the last protected function called and returns message as the error message. Function error never returns.
// Usually, error adds some information about the error position at the beginning of the message.
// The level argument specifies how to get the error position.
// With level 1 (the default), the error position is where the error function was called.
// Level 2 points the error to where the function that called error was called; and so on.
// Passing a level 0 avoids the addition of error position information to the message.
public static error(string message, [Nullable] int level) {}
