
[Language(Lua)]
register namespace lua;

public class bit
{
    // Normalizes a number to the numeric range for bit operations and returns it.
    // This function is usually not needed since all bit operations already normalize all of their input arguments
    // print(0xffffffff)                --> 4294967295 (*)
    // print(bit.tobit(0xffffffff))     --> -1
    // printx(bit.tobit(0xffffffff))    --> 0xffffffff
    // print(bit.tobit(0xffffffff + 1)) --> 0
    // print(bit.tobit(2^40 + 1234))    --> 1234
    public static tobit(int x) : int {}

    // Converts its first argument to a hex string.
    // The number of hex digits is given by the absolute value of the optional second argument.
    // Positive numbers between 1 and 8 generate lowercase hex digits.
    // Negative numbers generate uppercase hex digits. Only the least-significant 4*|n| bits are used.
    // The default is to generate 8 lowercase hex digits.
    // print(bit.tohex(1))              --> 00000001
    // print(bit.tohex(-1))             --> ffffffff
    // print(bit.tohex(0xffffffff))     --> ffffffff
    // print(bit.tohex(-1, -8))         --> FFFFFFFF
    // print(bit.tohex(0x21, 4))        --> 0021
    // print(bit.tohex(0x87654321, 4))  --> 4321
    public static tohex(int x, int n) : int {}

    // Returns the bitwise not of its argument.
    // print(bit.bnot(0))            --> -1
    // printx(bit.bnot(0))           --> 0xffffffff
    // print(bit.bnot(-1))           --> 0
    // print(bit.bnot(0xffffffff))   --> 0
    // printx(bit.bnot(0x12345678))  --> 0xedcba987
    public static bnot(int x) : int {}

    // Returns either the bitwise or, bitwise and, or bitwise xor of all of its arguments.
    // Note that more than two arguments are allowed.
    // print(bit.bor(1, 2, 4, 8))                --> 15
    // printx(bit.band(0x12345678, 0xff))        --> 0x00000078
    // printx(bit.bxor(0xa5a5f0f0, 0xaa55ff00))  --> 0x0ff00ff0
    public static bor(int x1, int x2) : int {}
    public static band(int x1, int x2) : int {}
    public static bxor(int x1, int x2) : int {}

    // Returns either the bitwise logical left-shift, bitwise logical right-shift,
    // or bitwise arithmetic right-shift of its first argument by the number of bits given by the second argument.
    //
    // Logical shifts treat the first argument as an unsigned number and shift in 0-bits.
    // Arithmetic right-shift treats the most-significant bit as a sign bit and replicates it.
    // Only the lower 5 bits of the shift count are used (reduces to the range [0..31]).
    // print(bit.lshift(1, 0))              --> 1
    // print(bit.lshift(1, 8))              --> 256
    // print(bit.lshift(1, 40))             --> 256
    // print(bit.rshift(256, 8))            --> 1
    // print(bit.rshift(-256, 8))           --> 16777215
    // print(bit.arshift(256, 8))           --> 1
    // print(bit.arshift(-256, 8))          --> -1
    // printx(bit.lshift(0x87654321, 12))   --> 0x54321000
    // printx(bit.rshift(0x87654321, 12))   --> 0x00087654
    // printx(bit.arshift(0x87654321, 12))  --> 0xfff87654
    public static lshift(int x, int n) : int {}
    public static rshift(int x, int n) : int {}
    public static arshift(int x, int n) : int {}

    // Returns either the bitwise left rotation,
    // or bitwise right rotation of its first argument by the number of bits given by the second argument.
    // Bits shifted out on one side are shifted back in on the other side.
    // Only the lower 5 bits of the rotate count are used (reduces to the range [0..31]).
    // printx(bit.rol(0x12345678, 12))   --> 0x45678123
    // printx(bit.ror(0x12345678, 12))   --> 0x67812345
    public static rol(int x, int n) : int {}
    public static ror(int x, int n) : int {}

    // Swaps the bytes of its argument and returns it.
    // This can be used to convert little-endian 32 bit numbers to big-endian 32 bit numbers or vice versa.
    // printx(bit.bswap(0x12345678)) --> 0x78563412
    // printx(bit.bswap(0x78563412)) --> 0x12345678
    public static bswap(int x) : int {}
}