
namespace ALittle;

// Http文件协议接口类，负责处理
public class IHttpFileReceiver
{
    // 启动接收文件
    public await fun StartReceiveFile(string file_path, int start_size) : string { return "not impl"; }
}

private var __all_file_callback = new Map<string, Functor<await(IHttpFileReceiver, any):any>>();
protected static RegHttpFileCallback(string method, Functor<await(IHttpFileReceiver, any):any> callback)
{
    if (__all_file_callback[method] != null)
    {
        Error("RegHttpFileCallback消息回调函数注册失败，名字为"..method.."已存在");
        return;
    }
    __all_file_callback[method] = callback;
}
// 获取回调函数
public static FindHttpFileReceiverCallback(string method) : Functor<await(IHttpFileReceiver, any):any>
{
    return __all_file_callback[method];
}

// Http文件协议接口类，负责处理
public class IHttpFileSender
{
    protected fun HandleSucceed() {}
    protected fun HandleProcess(int cur_size, int total_size) {}
    protected fun HandleFailed(string reason) {}

    public fun Stop() {}
    public fun GetFilePath() : string { return null; }
    public fun GetTotalSize() : int { return 0; }
    public fun GetCurSize() : int { return 0; }

    // 提供子类继承
    protected fun SendDownloadRPC(Thread thread, string method, any content, bool array_buffer) { throw("not impl"); }
    protected fun SendUploadRPC(Thread thread, string method, any content, bool array_buffer) { throw("not impl"); }

    // 提供框架调用
    public await static InvokeDownload(string method, IHttpFileSender client, any content, bool array_buffer) : string
    {
        if (co == null) return "当前不是协程";
        client.SendDownloadRPC(co, method, content, array_buffer);
        return yield;
    }
    public await static InvokeUpload(string method, IHttpFileSender client, any content, bool array_buffer) : string
    {
        if (co == null) return "当前不是协程";
        client.SendUploadRPC(co, method, content, array_buffer);
        return yield;
    }
}

// Http协议接口类，负责处理
public class IHttpReceiver
{

}

private var __all_receiver_callback = new Map<string, Functor<await(IHttpReceiver, any):any>>();
protected static RegHttpCallback(string method, Functor<await(IHttpReceiver, any):any> callback)
{
    if (__all_receiver_callback[method] != null)
    {
        Error("RegHttpCallback消息回调函数注册失败，名字为"..method.."已存在");
        return;
    }
    __all_receiver_callback[method] = callback;
}
// 获取回调函数
public static FindHttpCallback(string method) : Functor<await(IHttpReceiver, any):any>
{
    return __all_receiver_callback[method];
}

private var __all_download_callback = new Map<string, Functor<await(IHttpReceiver, any):string, int>>();
protected static RegHttpDownloadCallback(string method, Functor<await(IHttpReceiver, any):string, int> callback)
{
    if (__all_download_callback[method] != null)
    {
        Error("RegHttpDownloadCallback消息回调函数注册失败，名字为"..method.."已存在");
        return;
    }
    __all_download_callback[method] = callback;
}
// 获取回调函数
public static FindHttpDownloadCallback(string method) : Functor<await(IHttpReceiver, any):string, int>
{
    return __all_download_callback[method];
}

// Http协议接口类，负责请求发送
public class IHttpSender
{
    protected fun HandleSucceed() {}
    protected fun HandleFailed(string reason) {}
    public fun Stop() {}

    // 提供子类继承
    protected fun SendRPC(Thread thread, string method, any content) { throw("not impl"); }

    // 提供框架调用
    public await static Invoke(string method, IHttpSender client, any content) : string, any
    {
        if (co == null) return "当前不是协程", null;
        client.SendRPC(co, method, content);
        return yield;
    }
}

// 消息序列化
public class IMessageWriteFactory
{
    public fun WriteToStdFile(string file_path) : bool { return false; }
    public fun SetID(int id) {}
    public fun SetRpcID(int id) {}
    public fun ResetOffset() {}
    public fun GetOffset() : int { return 0; }
    public fun SetInt(int offset, int value) {}

    public fun WriteBool(bool value) : int { return 0; }
    public fun WriteInt(int value) : int { return 0; }
    public fun WriteLong(long value) : int { return 0; }
    public fun WriteString(string value) : int { return 0; }
    public fun WriteDouble(double value) : int { return 0; }
}

// 消息反序列化
public class IMessageReadFactory
{
    public fun GetDataSize() : int { return 0; }

    public fun ReadBool() : bool { return false; }
    public fun ReadInt() : int { return 0;}
    public fun ReadLong() : long { return 0; }
    public fun ReadString() : string { return ""; }
    public fun ReadDouble() : double { return 0; }
    public fun GetReadSize() : int { return 0; }
}

// 通用消息
public class IMsgCommon
{
    public any _user_data;

    public fun IsConnected() : bool { return false; }
    public fun Close([Nullable] string reason) {}
    protected fun HandleConnectSucceed() {}
    protected fun HandleDisconnected() {}
    protected fun HandleConnectFailed(string reason) {}
    protected fun HandleMessage(int id, int rpc_id, IMessageReadFactory factory) {}

    // 发送通知包
    public fun SendMsg<T:struct>(T msg)
    {
        var rflt = reflect<T>;
        this.Send(rflt.hash_code, msg, 0);
    }

    // 发送数据
    protected fun Send(int msg_id, any msg_body, int rpc_id) { throw("not impl"); }

    // 发送rpc
    protected fun SendRPC(Thread thread, int msg_id, any msg_body) { }

    // 提供框架调用
    protected static Invoke(int msg_id, IMsgCommon client, any msg_body) { client.Send(msg_id, msg_body, 0); }
    protected await static InvokeRPC(int msg_id, IMsgCommon client, any msg_body) : string, any
    {
        if (co == null) return "当前不是协程", null;
    
        if (!client.IsConnected())
            return "连接还没成功", null;
    
        client.SendRPC(co, msg_id, msg_body);
        return yield;
    }
}

private var __all_msg_callback = new Map<int, Functor<(IMsgCommon, any)>>();
protected static RegMsgCallback(int msg_id, Functor<(IMsgCommon, any)> callback)
{
    if (__all_msg_callback[msg_id] != null)
    {
        Error("RegMsgCallback消息回调函数注册失败，名字为"..msg_id.."已存在");
        return;
    }
    __all_msg_callback[msg_id] = callback;
}
// 获取回调函数
public static FindMsgCallback(int msg_id) : Functor<(IMsgCommon, any)>
{
    return __all_msg_callback[msg_id];
}

// 注册回调函数
private var __all_rpc_callback = new Map<int, Functor<await(IMsgCommon, any): any>>();
private var __all_rpc_return_id = new Map<int, int>();
protected static RegMsgRpcCallback(int msg_id, Functor<await(IMsgCommon, any) : any> callback, int return_id)
{
    if (__all_rpc_callback[msg_id] != null)
    {
        Error("RegMsgRpcCallback消息回调函数注册失败，名字为"..msg_id.."已存在");
        return;
    }
    __all_rpc_callback[msg_id] = callback;
    __all_rpc_return_id[msg_id] = return_id;
}
// 获取回调函数
public static FindMsgRpcCallback(int msg_id) : Functor<await(IMsgCommon, any) : any>, int
{
    return __all_rpc_callback[msg_id], __all_rpc_return_id[msg_id];
}
