namespace FileServer;

struct ClanImageInfo : ALittle.CacheData
{
    string image_md5;
    int create_time;
}

// 待删除的头像列表
struct ClanImageInfoDelete
{
    int clan_id;         // 公会ID
    int create_time;     // 创建时间  
}

public class ClanImageManager
{
    private string _base_path;
    private int _timer;      // 删除定时器
    private ALittle.CacheDataSet<ClanImageInfo> _cache;
    
    public ctor()
    {
        this._cache = new ALittle.CacheDataSet<ClanImageInfo>(30*1000, 60*1000);
    }
    
    public await fun Setup() : string
    {
        var error = this._cache.Init();
        if (error != null) return error;
        
        this._base_path = g_ConfigSystem.GetString("clan_image_path", "");
        
        // 创建文件夹
        if (this._base_path != "") ALittle.File_MakeDeepDir(this._base_path);
        
        // 每天定时运行清理
        var delay_time = ALittle.GetNextTodayBeginTime() - lua.os.time();
        this._timer = A_LoopSystem.AddTimer(delay_time * 1000, bind(this.HandleNewDay, this));
        
        return null;
    }
    
    public fun Shutdown()
    {
        if (this._timer != null)
        {
            A_LoopSystem.RemoveTimer(this._timer);
            this._timer = null;
        }
        this._cache.Release();
    }
    
    public fun GetImagePath(int id, int create_time) : string
    {
        var ymd = lua.os.date("%Y-%m-%d", create_time);
        var hms = lua.os.date("%H-%M-%S", create_time);
        
	    return this._base_path.."/"..ymd.."/"..hms.."/"..id.."_"..ymd.."_"..hms..".png";
    }
    
    public get cache() : ALittle.CacheDataSet<ClanImageInfo> { return this._cache; }
    
    private async fun HandleNewDay()
    {
        var error, select_list = A_MysqlSystem.SelectListFromByMap{ClanImageInfoDelete}(null);
        if (error != null) ALittle.Error(error);
        
        if (select_list != null)
        {
            for (var index, info in select_list)
            {
                var file_path = this.GetImagePath(info.clan_id, info.create_time);            
                if (!ALittle.File_DeleteFile(file_path))
			        ALittle.Warn("文件删除失败:"..file_path);
            }
        }
        error = A_MysqlSystem.DeleteFromByMap{ClanImageInfo}(null);
        if (error != null) ALittle.Error(error);
        
        // 定时明天凌晨
        var delay_time = ALittle.GetNextTodayBeginTime() - lua.os.time();
        this._timer = A_LoopSystem.AddTimer(delay_time * 1000, bind(this.HandleNewDay, this));
    }
}

protected var g_ClanImageManager = new ClanImageManager();

public struct QCheckClanImage
{
    int gs_route_id;
    int account_id;
    string session_code;
    int target_clan_id;
    string target_image_md5;
}

public struct ACheckClanImage
{
    bool is_exist;      // 是否存在
    bool need_download; // 是否需要下载
}

[Http]
public await static HandleCheckClanImage(ALittle.IHttpReceiver client, QCheckClanImage msg) : ACheckClanImage
{
    var error, session = A_SessionSystem.ConnectSession(ALittle.RouteType.RT_GAME, msg.gs_route_id);
    if (error != null) throw(error);
    
    {
        var param = new ALittle.SS2GS_QCheckSessionCode();
        param.account_id = msg.account_id;
        param.session_code = msg.session_code;
        error = ALittle.HandleQCheckSessionCode(session, param);
        if (error != null) throw(error);
    }
    
    {
        var data = g_ClanImageManager.cache.GetData(msg.target_clan_id);
        if (data == null)
        {
            var param = new ACheckClanImage();
            param.is_exist = false;
            return param;
        }
        
        var param = new ACheckClanImage();
        param.is_exist = true;
        param.need_download = data.image_md5 != msg.target_image_md5;
        return param;
    }
}

public struct QDownloadClanImage
{
    int gs_route_id;
    int account_id;
    string session_code;
    int target_clan_id;
}

[HttpDownload]
public await static HandleDownloadClanImage(ALittle.IHttpReceiver client, QDownloadClanImage msg) : string, int
{
    var error, session = A_SessionSystem.ConnectSession(ALittle.RouteType.RT_GAME, msg.gs_route_id);
    if (error != null) throw(error);
    
    {
        var param = new ALittle.SS2GS_QCheckSessionCode();
        param.account_id = msg.account_id;
        param.session_code = msg.session_code;
        error = ALittle.HandleQCheckSessionCode(session, param);
        if (error != null) throw(error);
    }
    
    {
        var data = g_ClanImageManager.cache.GetData(msg.target_clan_id);
        assert(data, "头像不存在");
        
        return g_ClanImageManager.GetImagePath(data.id, data.create_time), 0;
    }
}

public struct QUploadClanImage
{
    int gs_route_id;
    int account_id;
    string session_code;
    string target_image_md5;
}

public struct AUploadClanImage
{
    
}

[HttpUpload]
public await static HandleQUploadClanImage(ALittle.IHttpFileReceiver client, QUploadClanImage msg)
{
    var error, session = A_SessionSystem.ConnectSession(ALittle.RouteType.RT_GAME, msg.gs_route_id);
    if (error != null) throw(error);
    
    {
        var param = new ALittle.SS2GS_QCheckSessionCode();
        param.account_id = msg.account_id;
        param.session_code = msg.session_code;
        error = ALittle.HandleQCheckSessionCode(session, param);
        if (error != null) throw(error);
    }
    
    var create_time = lua.os.time();
    {
        var data = g_ClanImageManager.cache.GetData(msg.account_id);
        if (data != null && data.create_time == create_time)
            throw("已经有头像正在上传");
        
        var file_path = g_ClanImageManager.GetImagePath(msg.account_id, create_time);
        var file_dir = ALittle.File_GetFilePathByPath(file_path);
        ALittle.File_MakeDeepDir(file_dir);
        error = client.StartReceiveFile(file_path, 0);
        if (error != null) throw(error);
    }
    
    // 检查之前是否已经存在，那么就添加到删除表中
    var data = g_ClanImageManager.cache.GetData(msg.account_id);
    if (data != null)
    {
        g_ClanImageManager.cache.DeleteData(data.id);
        
        var delete = new ClanImageInfoDelete();
        delete.clan_id = data.id;
        delete.create_time = data.create_time;
        error = A_MysqlSystem.InsertInto(delete);
        if (error != null) ALittle.Error(error);
    }
    
    var new_data = new ClanImageInfo();
    new_data.id = msg.account_id;
    new_data.create_time = create_time;
    new_data.image_md5 = msg.target_image_md5;
    g_ClanImageManager.cache.CreateData(new_data);
}