namespace VersionServer;

struct VersionInfo
{
    option primary = "version_id";
    string version_id;          // 版本ID
    string account_id;	        // 账号ID
    string module_name;			// 模块名
    string platform;            // 终端平台
    string big_version;         // 大版本
    string version_number;      // 安装包版本号
    string install_version;     // 安装包版本
    string plugin_list;         // 插件列表
    int install_size;           // 安装包文件大小
    int status;                 // 状态(0还未上传，1上传成功，2版本作废)
    int small_version_time;     // 小版本时间
    int small_version_index;    // 小版本时间序列
    int create_time;            // 创建时间
    int create_index;           // 创建时间序列
    int update_time;            // 更新时间
    int update_index;           // 更新时间序列
}

struct VersionClose
{
    string account_id;	        // 账号ID
    string module_name;			// 模块名
    string platform;            // 终端平台
    string close_version;       // 关闭的版本
    string submit_platform;     // 提交的平台，比如taptap，ios
    int create_time;            // 创建时间
    int create_index;           // 创建时间序列
    int update_time;            // 更新时间
    int update_index;           // 更新时间序列
}

struct VersionLog
{
    string version_id;	        // 账号ID
    string account_id;	        // 账号ID
    string module_name;			// 模块名
    string platform;            // 终端平台
    string content;             // 日志内容
    int create_time;            // 创建时间
    int create_index;           // 创建时间序列
    int update_time;            // 更新时间
    int update_index;           // 更新时间序列
}

public class VersionManager
{
    private string _version_path;

    public ctor()
    {
    }

    public await fun Setup()
    {
        var error = A_MysqlSystem.CreateIfNotExit{VersionInfo}();
        assert(error == null, error);
        error = A_MysqlSystem.CreateIfNotExit{VersionClose}();
        assert(error == null, error);
        error = A_MysqlSystem.CreateIfNotExit{VersionLog}();
        assert(error == null, error);
        
        this._version_path = g_ConfigSystem.GetString("version_path", "");
    }
    
    public fun Shutdown()
    {
        
    }

    public get version_path() : string { return this._version_path; }
}

protected var g_VersionManager = new VersionManager();

public struct QVersionInfo
{
    string __account_id;     // 账号ID
    string __session_id;     // 会话ID
    string module_name;		// 模块名
    string platform;		// 终端平台
}

public struct D_VersionClose
{
    string account_id;	        // 账号ID
    string module_name;			// 模块名
    string platform;            // 终端平台
    string close_version;       // 关闭的版本
    string submit_platform;     // 提交的平台，比如taptap，ios
    int create_time;            // 创建时间
    int create_index;           // 创建时间序列
    int update_time;            // 更新时间
    int update_index;           // 更新时间序列
}

public struct D_VersionLog
{
    string version_id;	        // 账号ID
    string account_id;	        // 账号ID
    string module_name;			// 模块名
    string platform;            // 终端平台
    string content;             // 日志内容
    int create_time;            // 创建时间
    int create_index;           // 创建时间序列
    int update_time;            // 更新时间
    int update_index;           // 更新时间序列
}

// 应答版本信息
public struct AVersionInfo
{
    List<D_VersionInfo> version_list;	// 版本信息列表
    List<D_VersionClose> close_list;	// 版本屏蔽列表
    List<D_VersionLog> log_list;		// 版本日志列表
}

[Http]
public await static HandleHttpQVersionInfo(ALittle.IHttpReceiver client, QVersionInfo msg) : AVersionInfo
{
    var param = new AVersionInfo();
    param.version_list = new List<D_VersionInfo>();
    param.close_list = new List<D_VersionClose>();
    param.log_list = new List<D_VersionLog>();

    var web_account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);
    {
        var sql = "SELECT `version_id`,`account_id`,`module_name`,`platform`,`big_version`,`version_number`,`install_version`,`plugin_list`,`install_size`,`status`,`small_version_time`,`small_version_index`,`create_time`,`create_index`,`update_time`,`update_index` FROM `VersionInfo` WHERE `account_id`=? AND `module_name`=? AND `platform`=?";
        var query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = msg.__account_id;
        query.value = msg.module_name;
        query.value = msg.platform;
        var error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);
        
        for (var i = 1; i <= query.count; 1)
        {
            var data = new D_VersionInfo();
            ALittle.List_Push(param.version_list, data);

            data.version_id = query.value;
            data.account_id = query.value;
            data.module_name = query.value;
            data.platform = query.value;
            data.big_version = query.value;
            data.version_number = query.value;
            data.install_version = query.value;
            data.plugin_list = query.value;
            data.install_size = query.value;
            data.status = query.value;
            data.small_version_time = query.value;
            data.small_version_index = query.value;
            data.create_time = query.value;
            data.create_index = query.value;
            data.update_time = query.value;
            data.update_index = query.value;
        }
    }
    {
        var sql = "SELECT `account_id`,`module_name`,`platform`,`close_version`,`submit_platform`,`create_time`,`create_index`,`update_time`,`update_index` FROM `VersionClose` WHERE `account_id`=? AND `module_name`=? AND `platform`=?";
        var query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = msg.__account_id;
        query.value = msg.module_name;
        query.value = msg.platform;
        var error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);
        
        for (var i = 1; i <= query.count; 1)
        {
            var data = new D_VersionClose();
            ALittle.List_Push(param.close_list, data);

            data.account_id = query.value;
            data.module_name = query.value;
            data.platform = query.value;
            data.close_version = query.value;
            data.submit_platform = query.value;
            data.create_time = query.value;
            data.create_index = query.value;
            data.update_time = query.value;
            data.update_index = query.value;
        }
    }
    {
        var sql = "SELECT `version_id`,`account_id`,`module_name`,`platform`,`content`,`create_time`,`create_index`,`update_time`,`update_index` FROM `VersionLog` WHERE `account_id`=? AND `module_name`=? AND `platform`=?";
        var query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = msg.__account_id;
        query.value = msg.module_name;
        query.value = msg.platform;
        var error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);

        for (var i = 1; i <= query.count; 1)
        {
            var data = new D_VersionLog();
            ALittle.List_Push(param.log_list, data);

            data.version_id = query.value;
            data.account_id = query.value;
            data.module_name = query.value;
            data.platform = query.value;
            data.content = query.value;
            data.create_time = query.value;
            data.create_index = query.value;
            data.update_time = query.value;
            data.update_index = query.value;
        }
    }

    return param;
}

// 添加屏蔽版本
public struct QAddVersionClose
{
    string __account_id;
    string __session_id;
    string platform;		// 平台
    string module_name;		// 模块名
    string close_version;	// 屏蔽的版本号
    string submit_platform; // 提交的平台
}

public struct AAddVersionClose
{

}

[Http]
public await static HandleHttpQAddVersionClose(ALittle.IHttpReceiver client, QAddVersionClose msg) : AAddVersionClose
{
    var web_account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);
    var sql = "INSERT INTO `VersionClose` (`account_id`,`module_name`,`platform`,`close_version`,`submit_platform`,`create_time`,`create_index`,`update_time`,`update_index`) VALUES (?,?,?,?,?,?,?,?,?)";
    var query = new ALittle.MysqlStatementQuery();
    query.sql = sql;
    query.value = msg.__account_id;
    query.value = msg.module_name;
    query.value = msg.platform;
    query.value = msg.close_version;
    query.value = msg.submit_platform;
    var time, index = ALittle.NewTimeAndIndex();
    query.value = time;
    query.value = index;
    query.value = time;
    query.value = index;
    var error = query.Execute();
    if (error != null) throw("数据库操作失败:"..error);
    return new AAddVersionClose();
}

// 请求删除屏蔽版本
public struct QDeleteVersionClose
{
    string __account_id;
    string __session_id;
    string platform;		// 平台
    string module_name;		// 模块名
    string close_version;	// 屏蔽的版本号
}

public struct ADeleteVersionClose
{

}

[Http]
public await static HandleHttpQDeleteVersionClose(ALittle.IHttpReceiver client, QDeleteVersionClose msg) : ADeleteVersionClose
{
    var web_account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);
    var sql = "DELETE FROM `VersionClose` WHERE `account_id`=? AND `module_name`=? AND `platform`=? AND `close_version`=?";
    var query = new ALittle.MysqlStatementQuery();
    query.sql = sql;
    query.value = msg.__account_id;
    query.value = msg.module_name;
    query.value = msg.platform;
    query.value = msg.close_version;
    var error = query.Execute();
    if (error != null) throw("数据库操作失败:"..error);
    return new ADeleteVersionClose();
}

public struct QNewUpdateTimeIndex
{
    string __account_id;
    string __session_id;
}

public struct ANewUpdateTimeIndex
{
    int update_time;
    int update_index;
}

[Http]
public await static HandleHttpQNewUpdateTimeIndex(ALittle.IHttpReceiver client, QNewUpdateTimeIndex msg) : ANewUpdateTimeIndex
{
    var web_account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);
    var param = new ANewUpdateTimeIndex();
    param.update_time, param.update_index = ALittle.NewTimeAndIndex();
    return param;
}

public struct QNewCurVersion
{
    string __account_id;
    string __session_id;
    string platform;
    string module_name;
}

public struct ANewCurVersion
{
    D_VersionInfo version_info;
    string http_ip;
    int http_port;
}

[Http]
public await static HandleHttpQNewCurVersion(ALittle.IHttpReceiver client, QNewCurVersion msg) : ANewCurVersion
{
    var param = new ANewCurVersion();

    var web_account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);
    var sql = "SELECT `version_id`,`account_id`,`module_name`,`platform`,`big_version`,`version_number`,`install_version`,`plugin_list`,`install_size`,`status`,`small_version_time`,`small_version_index`,`create_time`,`create_index`,`update_time`,`update_index` FROM `VersionInfo` WHERE `account_id`=? AND `module_name`=? AND `platform`=? AND `status`=1";
    var query = new ALittle.MysqlStatementQuery();
    query.sql = sql;
    query.value = msg.__account_id;
    query.value = msg.module_name;
    query.value = msg.platform;
    var error = query.Execute();
    if (error != null) throw("数据库操作失败:"..error);
    for (var i = 1; i <= query.count; 1)
    {
        var data = new D_VersionInfo();
        param.version_info = data;

        data.version_id = query.value;
        data.account_id = query.value;
        data.module_name = query.value;
        data.platform = query.value;
        data.big_version = query.value;
        data.version_number = query.value;
        data.install_version = query.value;
        data.plugin_list = query.value;
        data.install_size = query.value;
        data.status = query.value;
        data.small_version_time = query.value;
        data.small_version_index = query.value;
        data.create_time = query.value;
        data.create_index = query.value;
        data.update_time = query.value;
        data.update_index = query.value;
    }

    param.http_ip = __CPPAPI_ServerSchedule.GetHttpServerYunIp();
    if (param.http_ip == null || param.http_ip == "")
        param.http_ip = __CPPAPI_ServerSchedule.GetHttpServerIp();
    param.http_port = __CPPAPI_ServerSchedule.GetHttpServerPort();

    return param;
}

public struct QNewVersionInfo
{
    string __account_id;
    string __session_id;
    string module_name;
    string platform;
    string big_version;
    string version_number;
    string install_version;
    string plugin_list;
    int install_size;
    List<string> log_list;
    int small_version_time;
    int small_version_index;
    int update_time;
    int update_index;
}

public struct ANewVersionInfo
{
    string version_id;
    int update_time;
    int update_index;
}

[Http]
public await static HandleHttpQNewVersionInfo(ALittle.IHttpReceiver client, QNewVersionInfo msg) : ANewVersionInfo
{
    var web_account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);

    var version_id = ALittle.String_GenerateID("VERSION");

    var sql = "INSERT INTO `VersionInfo` (`version_id`,`account_id`,`module_name`,`platform`,`big_version`,`version_number`,`install_version`,`plugin_list`,`install_size`,`status`,`small_version_time`,`small_version_index`,`create_time`,`create_index`,`update_time`,`update_index`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    var query = new ALittle.MysqlStatementQuery();
    query.sql = sql;
    query.value = version_id;
    query.value = msg.__account_id;
    query.value = msg.module_name;
    query.value = msg.platform;
    query.value = msg.big_version;
    query.value = msg.version_number;
    query.value = msg.install_version;
    query.value = msg.plugin_list;
    query.value = msg.install_size;
    query.value = 0;
    query.value = msg.small_version_time;
    query.value = msg.small_version_index;
    query.value = msg.update_time;
    query.value = msg.update_index;
    query.value = msg.update_time;
    query.value = msg.update_index;
    var error = query.Execute();
    if (error != null) throw("数据库操作失败:"..error);

    if (msg.log_list != null)
    {
        for (var _, log in msg.log_list)
        {
            sql = "INSERT INTO `VersionLog` (`version_id`,`account_id`,`module_name`,`platform`,`content`,`create_time`,`create_index`,`update_time`,`update_index`) VALUES (?,?,?,?,?,?,?,?,?)";
            query = new ALittle.MysqlStatementQuery();
            query.sql = sql;
            query.value = version_id;
            query.value = msg.__account_id;
            query.value = msg.module_name;
            query.value = msg.platform;
            query.value = log;
            var time, index = ALittle.NewTimeAndIndex();
            query.value = time;
            query.value = index;
            query.value = time;
            query.value = index;
            error = query.Execute();
            if (error != null) throw("数据库操作失败:"..error);
        }
    }

    var param = new ANewVersionInfo();
    param.version_id = version_id;
    param.update_time = msg.update_time;
    param.update_index = msg.update_index;
    return param;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[Http]
public await static HandleHttpQUpdateVersion(ALittle.IHttpReceiver client, QUpdateVersion msg) : AUpdateVersion
{
    var error, base_info = A_MysqlSystem.SelectOneFromByKey{ALittle.WebBaseInfo}("account_name", msg.account_name);
    if (error != null) throw("数据库操作失败:"..error);
    assert(base_info != null, "账号不存在");

    var param = new AUpdateVersion();
    param.version_info = new D_VersionInfo();
    param.log_list = new List<string>();
    param.result = false;

    // 检查是否有版本号拦截
    if (msg.big_version != null && msg.big_version != "")
    {
        var sql = "SELECT `close_version` FROM `VersionClose` WHERE `account_id`=? AND `module_name`=? AND `platform`=? AND `close_version`=?";
        var query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = base_info.account_id;
        query.value = msg.module_name;
        query.value = msg.platform;
        query.value = msg.big_version;
        error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);
        if (query.count > 0) return param;
    }

    // 取出版本最大的那个
    {
        var sql = "SELECT `version_id`,`account_id`,`module_name`,`platform`,`big_version`,`version_number`,`install_version`,`plugin_list`,`install_size`,`status`,`small_version_time`,`small_version_index`,`create_time`,`create_index`,`update_time`,`update_index` FROM `VersionInfo` WHERE `account_id`=? AND `module_name`=? AND `platform`=? ORDER BY `update_time` DESC,`update_index` DESC LIMIT 1";
        var query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = base_info.account_id;
        query.value = msg.module_name;
        query.value = msg.platform;
        error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);
        if (query.count == 0) return param;
        
        var data = new D_VersionInfo();
        param.version_info = data;

        data.version_id = query.value;
        data.account_id = query.value;
        data.module_name = query.value;
        data.platform = query.value;
        data.big_version = query.value;
        data.version_number = query.value;
        data.install_version = query.value;
        data.plugin_list = query.value;
        data.install_size = query.value;
        data.status = query.value;
        data.small_version_time = query.value;
        data.small_version_index = query.value;
        data.create_time = query.value;
        data.create_index = query.value;
        data.update_time = query.value;
        data.update_index = query.value;
    }

    // 获取日志列表
    {
        var sql = "SELECT `content` FROM `VersionLog` WHERE `account_id`=? AND `module_name`=? AND `platform`=? AND `version_id`=? ORDER BY `update_time` DESC, `update_index` DESC";
        var query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = base_info.account_id;
        query.value = msg.module_name;
        query.value = msg.platform;
        query.value = param.version_info.version_id;
        error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);
        for (var i = 1; i <= query.count; 1)
            ALittle.List_Push(param.log_list, query.value);
    }

    // 设置为需要更新
    param.result = true;

    // 如果没有传当前的版本信息，那么就要更新
    if (msg.small_version_time == 0 || msg.big_version == "" || msg.big_version == null)
        return param;

    // 如果当前版本小于最新版本，那么就要更新
    if (msg.small_version_time < param.version_info.small_version_time)
        return param;

    // 如果update_time相等，如果update_index更小，那么就要更新
    if (msg.small_version_time == param.version_info.small_version_time
        && msg.small_version_index < param.version_info.small_version_index)
        return param;

    // 如果安装包版本小于最新版本，那么就要更新
    if (msg.install_version < param.version_info.install_version)
        return param;

    param.result = false;
    return param;
}

[HttpDownload]
public await static HandleHttpQDownloadVersionFile(ALittle.IHttpReceiver client, QDownloadVersionFile msg) : string, int
{
    assert(ALittle.String_Find(msg.platform, "..") == null, "platform不能带两个点");
    assert(ALittle.String_Find(msg.version_id, "..") == null, "version_id不能带两个点");
    assert(ALittle.String_Find(msg.file_path, "..") == null, "file_path不能带两个点");

    var file_path = g_VersionManager.version_path.."Version/"..msg.platform.."/"..msg.version_id.."/"..msg.file_path;
    var start_size = msg.start_size;
    if (start_size == null) start_size = 0;
    return file_path, start_size;
}

// 请求删除版本
public struct QDeleteVersionInfo
{
    string __account_id;
    string __session_id;
    string platform;		// 平台
    string module_name;		// 模块名
    string version_id;		// 版本ID
}

public struct ADeleteVersionInfo
{

}

[Http]
public await static HandleHttpQDeleteVersionInfo(ALittle.IHttpReceiver client, QDeleteVersionInfo msg) : ADeleteVersionInfo
{
    var web_account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);

    // 取出最大的那个版本，进行检查
    var sql = "SELECT `version_id` FROM `VersionInfo` WHERE `status`=1 AND `account_id`=? AND `module_name`=? AND `platform`=? ORDER BY `update_time` DESC,`update_index` DESC LIMIT 1";
    var query = new ALittle.MysqlStatementQuery();
    query.sql = sql;
    query.value = msg.__account_id;
    query.value = msg.module_name;
    query.value = msg.platform;
    var error = query.Execute();
    if (error != null) throw("数据库操作失败:"..error);
    if (query.count > 0)
    {
        var version_id = query.String;
        assert(version_id != msg.version_id, "不允许删除最新版本");
    }
    
    // 删除版本信息
    {
        sql = "DELETE FROM `VersionInfo` WHERE `version_id`=? AND `account_id`=?";
        query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = msg.version_id;
        query.value = msg.__account_id;
        error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);
    }

    // 删除日志信息
    {
        sql = "DELETE FROM `VersionLog` WHERE `version_id`=? AND `account_id`=?";
        query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = msg.version_id;
        query.value = msg.__account_id;
        error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);
    }

    // 把相关的路径全部删除
    var file_path = g_VersionManager.version_path.."Version/"..msg.platform.."/"..msg.version_id;
    ALittle.File_DeleteDeepDir(file_path, false);
    
    return new ADeleteVersionInfo();
}

public struct QUploadVersionFile
{
    string __account_id;
    string __session_id;
    string platform;
    string module_name;
    string version_id;
    string file_path;
}

public struct AUploadVersionFile
{

}

[HttpUpload]
public await static HandleHttpQUploadVersionFile(ALittle.IHttpFileReceiver client, QUploadVersionFile msg)
{
    var web_account = A_WebAccountManager.CheckLoginById(msg.__account_id, msg.__session_id);

    assert(ALittle.String_Find(msg.platform, "..") == null, "platform不能带两个点");
    assert(ALittle.String_Find(msg.version_id, "..") == null, "version_id不能带两个点");
    assert(ALittle.String_Find(msg.file_path, "..") == null, "file_path不能带两个点");
    
    var sql = "SELECT `module_name` FROM `VersionInfo` WHERE `version_id`=? AND `account_id`=? AND `platform`=?";
    var query = new ALittle.MysqlStatementQuery();
    query.sql = sql;
    query.value = msg.version_id;
    query.value = msg.__account_id;
    query.value = msg.platform;
    var error = query.Execute();
    if (error != null) throw("数据库操作失败:"..error);
    assert(query.count != 0, "模块不存在"); 
    
    var file_path = g_VersionManager.version_path.."Version/"..msg.platform.."/"..msg.version_id.."/"..msg.file_path;
    ALittle.File_MakeDeepDir(ALittle.File_GetFilePathByPath(file_path));
    
    error = client.StartReceiveFile(file_path, 0);
    if (error != null) ALittle.File_DeleteFile(file_path);
    assert(error == null, error);
    
    if (msg.file_path == "CurVersion.db")
    {
        sql = "UPDATE `VersionInfo` SET `status`=1 WHERE `version_id`=? AND `account_id`=?";
        query = new ALittle.MysqlStatementQuery();
        query.sql = sql;
        query.value = msg.version_id;
        query.value = msg.__account_id;
        error = query.Execute();
        if (error != null) throw("数据库操作失败:"..error);
    }
}
