
namespace ALittle;

public class MsgSessionTemplate<NATIVE : IMsgCommonNative, WFACTORY : IMessageWriteFactory> : IMsgCommonTemplate
{
    private int _connect_key;
    private int _route_type;
    private int _route_num;
    private bool _is_connected;

    public ctor(int connect_key, int route_type, int route_num)
    {
        // 创建客户端对象
        this._interface = new NATIVE();
        this._interface.SetID(connect_key);
        this._write_factory = new WFACTORY();
        this._is_connected = true;

        this._connect_key = connect_key;
        this._route_type = route_type;
        this._route_num = route_num;
    }

    public get route_type() : int { return this._route_type; }
    public get route_num() : int { return this._route_num; }

    // 判断是否已经连接成功
    public fun IsConnected() : bool
    {
        return this._is_connected;
    }

    protected fun HandleConnected()
    {
        this._is_connected = true;
    }

    protected fun HandleDisconnected()
    {
        this._is_connected = false;
        this.ClearRPC("连接断开了");
    }

    public fun Close([Nullable] string reason)
    {
        if (!this._is_connected) return;
        this._is_connected = false;
        if (reason == null) reason = "主动关闭连接";
        this.ClearRPC(reason);
        this._interface.Close();
    }
}
