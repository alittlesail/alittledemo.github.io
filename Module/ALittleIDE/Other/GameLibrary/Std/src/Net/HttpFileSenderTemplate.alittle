
namespace ALittle;

// 连接对象
public class IHttpFileSenderNative
{
    public fun GetID() : int { return 0; }             // 获取全局ID
    // 设置url
    // file_path是本地文件路径
    // download 为true表示下载，false表示上传
    // start_size 文件的起始位置
    public fun SetURL(string url, string file_path, bool download, int start_size, bool array_buffer) {}
    public fun Start() {}                   // 开始请求
    public fun Stop() {}                    // 结束请求
    public fun GetPath() : string { return ""; }        // 获取文件路径
}

// 短连接文件所有的对象集合，提供客户端使用
private var __HttpFileSenderMap = new Map<int, IHttpFileSender>();
public class HttpFileSenderTemplate<NATIVE : IHttpFileSenderNative> : IHttpFileSender
{
    private NATIVE _interface;
    private Thread _thread;
    private string _ip;
    private int _port;
    private string _file_path;
    private int _start_size;
    private Functor<(IHttpFileSender)> _callback;        // 下载或者上传的进度回调
    
    private int _cur_size;
    private int _total_size;
    
    public ctor(string ip, int port, string file_path, int start_size, [Nullable] Functor<(IHttpFileSender)> callback)
    {
        this._interface = new NATIVE();
        this._ip = ip;
        this._port = port;
        if (this._port == null)
        {
            [Language(JavaScript)]
            if (location.protocol == "https:")
                this._port = 443;
            else
                this._port = 80;

            [Language(Lua)]
            this._port = 80;
        }
        this._file_path = file_path;
        this._start_size = start_size;
        this._callback = callback;
        
        this._cur_size = 0;
        this._total_size = 0;
    }
    
    protected fun SendDownloadRPC(Thread thread, string method, any content, bool array_buffer)
    {
        this._thread = thread;
        __HttpFileSenderMap[this._interface.GetID()] = this;

        if (this._start_size == null)
            this._start_size = 0;

        // 设置URL
        var url = this._ip..":"..this._port.."/"..method;
        if (String_Find(this._ip, "http://") != 1 && String_Find(this._ip, "https://") != 1)
        {
            [Language(JavaScript)]
            if (location.hostname == this._ip)
                url = location.protocol.."//"..url;
            else
            {
                if (this._port == 443)
                    url = "https://"..url;
                else
                    url = "http://"..url;
            }

            [Language(Lua)]
            if (this._port == 443)
                url = "https://"..url;
            else
                url = "http://"..url;
        }
        this._interface.SetURL(this.HttpUrlAppendParamMap(url, content), this._file_path, true, this._start_size, array_buffer);
        this._interface.Start();
    }

    protected fun SendUploadRPC(Thread thread, string method, any content, bool array_buffer)
    {
        this._thread = thread;
        __HttpFileSenderMap[this._interface.GetID()] = this;

        if (this._start_size == null)
            this._start_size = 0;
        
        // 设置URL
        var url = "http://"..this._ip..":"..this._port.."/"..method;
        this._interface.SetURL(this.HttpUrlAppendParamMap(url, content), this._file_path, false, this._start_size, array_buffer);
        this._interface.Start();
    }

    public fun Stop()
    {
        this._interface.Stop();
    }
    
    public fun GetFilePath() : string { return this._file_path; }
    public fun GetTotalSize() : int { return this._total_size; }
    public fun GetCurSize() : int { return this._cur_size; }
    
    protected fun HandleSucceed()
    {
        __HttpFileSenderMap[this._interface.GetID()] = null;
        var result, reason = Coroutine.Resume(this._thread, null);
        if (result != true) Error(reason);
    }
    
    protected fun HandleFailed(string reason)
    {
        __HttpFileSenderMap[this._interface.GetID()] = null;
        var result, error = Coroutine.Resume(this._thread, reason);
        if (result != true) Error(error);
    }
    
    protected fun HandleProcess(int cur_size, int total_size)
    {
        this._cur_size = cur_size;
        this._total_size = total_size;
        
        if (this._callback != null)
            this._callback(this);
    }
    
    // 拼接url
    private fun HttpUrlAppendParamMap(string url, Map<string, any> param) : string
    {
        if (param == null) return url;
        
        var list = new List<string>();
        var count = 0;
        for (var key, value in param)
        {
            ++ count;
            list[count] = key.."="..String_ToString(value);
        }
    
        if (String_Find(url, "?") == null)
            url = url .. "?";
        else
            url = url .. "&";
    
        return url .. String_Join(list, "&");
    }
}

public static __ALITTLEAPI_HttpFileSucceed(int id)
{
    var client = __HttpFileSenderMap[id];
    if (client == null) return;
    client.HandleSucceed();
}

public static __ALITTLEAPI_HttpFileFailed(int id, string reason)
{
    var client = __HttpFileSenderMap[id];
    if (client == null) return;
    client.HandleFailed(reason);
}

public static __ALITTLEAPI_HttpFileProcess(int id, int cur_size, int total_size)
{
    var client = __HttpFileSenderMap[id];
    if (client == null) return;
    client.HandleProcess(cur_size, total_size);
}

public await static DownloadFile(string ip, int port, string method, string file_path, bool array_buffer) : string
{
    var sender:IHttpFileSender;
    [Language(Lua)]
    sender = new HttpFileSenderTemplate<Lua.LuaHttpFileInterface>(ip, port, file_path, 0);
    [Language(JavaScript)]
    sender = new HttpFileSenderTemplate<JavaScript.JHttpFileInterface>(ip, port, file_path, 0);
    
    return IHttpFileSender.InvokeDownload(method, sender, null, array_buffer);
}

public await static UploadFile(string ip, int port, string method, string file_path, bool array_buffer) : string
{
    var sender:IHttpFileSender;
    [Language(Lua)]
    sender = new HttpFileSenderTemplate<Lua.LuaHttpFileInterface>(ip, port, file_path, 0);
    [Language(JavaScript)]
    sender = new HttpFileSenderTemplate<JavaScript.JHttpFileInterface>(ip, port, file_path, 0);
    
    var error = IHttpFileSender.InvokeUpload(method, sender, null, array_buffer);
    return error;
}