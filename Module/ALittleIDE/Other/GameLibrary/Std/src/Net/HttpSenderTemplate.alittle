namespace ALittle;

// 连接对象
public class IHttpSenderNative
{
    public fun GetID() : int { return 0; }                         // 获取HttpSender的全局ID
    public fun SetURL(string url, string content) {}    // 设置请求数据，url是请求路径，如果content不为null，那么就是post请求
    public fun Start() {}                               // 开始请求
    public fun Stop() {}                                // 停止请求
    public fun GetResponse() : string { return null;}                // 获取请求结果
}

// 短连接所有的对象集合，提供客户端使用
private var __HttpSenderMap = new Map<int, IHttpSender>();
public class HttpSenderTemplate<NATIVE : IHttpSenderNative> : IHttpSender
{
    private NATIVE _interface;          // 实际Http的接口对象
    private Thread _thread;         // 协程对象
    private string _ip;             // 目标url或者ip
    private int _port;              // 目标端口

    public ctor(string ip, int port)
    {
        this._interface = new NATIVE();
        this._ip = ip;
        this._port = port;
        if (this._port == null)
        {
            [Language(JavaScript)]
            if (location.protocol == "https:")
                this._port = 443;
            else
                this._port = 80;

            [Language(Lua)]
            this._port = 80;
        }
    }
    
    protected fun SendRPC(Thread thread, string method, any content)
    {
        this._thread = thread;
        __HttpSenderMap[this._interface.GetID()] = this;
        
        var url = this._ip..":"..this._port.."/"..method;
        if (String_Find(this._ip, "http://") != 1 && String_Find(this._ip, "https://") != 1)
        {
            [Language(JavaScript)]
            if (location.hostname == this._ip)
                url = location.protocol.."//"..url;
            else
            {
                if (this._port == 443)
                    url = "https://"..url;
                else
                    url = "http://"..url;
            }

            [Language(Lua)]
            if (this._port == 443)
                url = "https://"..url;
            else
                url = "http://"..url;
        }   
        if (content == null)
            this._interface.SetURL(url, null);
        else
            this._interface.SetURL(url, String_JsonEncode(content));
        this._interface.Start();
    }
    
    public fun Stop()
    {
        this._interface.Stop();
    }
    
    protected fun HandleSucceed()
    {
        __HttpSenderMap[this._interface.GetID()] = null;
        var error, param:Map<string, any> = tcall(String_JsonDecode, this._interface.GetResponse());
        if (error != null)
        {
            var result, reason = Coroutine.Resume(this._thread, error, null);
            if (result != true) Error(reason);
            return;
        }
        if (param["error"] != null)
        {
            var result, reason = Coroutine.Resume(this._thread, param["error"], null);
            if (result != true) Error(reason);
            return;
        }
        var result, reason = Coroutine.Resume(this._thread, null, param);
        if (result != true) Error(reason);
    }
    
    protected fun HandleFailed(string reason)
    {
        __HttpSenderMap[this._interface.GetID()] = null;
        var result, error = Coroutine.Resume(this._thread, reason, null);
        if (result != true) Error(error);
    }
}

// 收到HTTP应答成功
public static __ALITTLEAPI_HttpClientSucceed(int id)
{
    var client = __HttpSenderMap[id];
    if (client ==  null) return;
    client.HandleSucceed();
}

// 收到HTTP应答失败
public static __ALITTLEAPI_HttpClientFailed(int id, string reason)
{
    var client = __HttpSenderMap[id];
    if (client ==  null) return;
    client.HandleFailed(reason);
}
