
namespace ALittle;

// 连接对象
public class IMsgCommonNative
{
    public fun SetID(int id) {} // 设置ID
    public fun GetID() : int { return 0; }         // 获取连接对象全局ID
    public fun Connect(string ip, int port) {}  // 主动连接
    public fun IsConnected() : bool { return false; }      // 是否已经连接
    public fun SendFactory(IMessageWriteFactory factory) {}  // 发送请求
    public fun Close() {}               // 关闭连接
}

// RPC结构信息
struct MsgRPCInfo
{
    int rpc_id;
    Thread thread;
}

// 用于长连接
public class IMsgCommonTemplate : IMsgCommon
{
    private IMsgCommonNative _interface;      // 网络对象
    private IMessageWriteFactory _write_factory;     // 协议序列化对象

    private int _last_recv_time;
    private SafeIDCreator _id_creator;
    private Map<int, MsgRPCInfo> _id_map_rpc;
    private Thread _co;

    // @param heartbeat 心跳间隔时间(秒)
    // @param check_heartbeat 检测心跳是否有接受到回复
    // @param callback 断开连接的回调
    public ctor()
    {
        this._last_recv_time = 0;

        this._id_creator = new SafeIDCreator();
        this._id_map_rpc = new Map<int, MsgRPCInfo>();
    }

    // 获取ID
    public fun GetID() : int { return this._interface.GetID(); }

    // 连接
    public await fun Connect(string ip, int port) : string { return "not impl"; }

    // 判断是否已经连接成功
    public fun IsConnected() : bool
    {
        return this._interface.IsConnected();
    }
    
    // 消息读取
    private fun MessageRead(IMessageReadFactory factory, int msg_id) : any
    {
        var invoke = CreateProtocolInvokeInfo(msg_id);
        var object, size = PS_ReadMessageForReceive(factory, invoke, null, factory.GetDataSize());
        return object;
    }
    
    // 序列化
    private fun MessageWrite(int msg_id, any msg_body)
    {
        var invoke = CreateProtocolInvokeInfo(msg_id);
        this._write_factory.ResetOffset();
        PS_WriteMessageForSend(this._write_factory, invoke, null, msg_body);
        this._write_factory.SetID(msg_id);
    }
    
    // 收到服务端发来的数据包
    protected fun HandleMessage(int id, int rpc_id, IMessageReadFactory factory)
    {
        // 消息id为0，心跳包返回
        if (id == 0)
        {
            // 记录最后接受时间
            this._last_recv_time = Time_GetCurTime();
            return;
        }

        // 如果是普通消息
        if (rpc_id == 0)
        {
            // 获取函数对象
            var callback = FindMsgCallback(id);
            if (callback == null)
            {
                var name = "unknow";
                var rflt = FindStructById(id);
                if (rflt != null) name = rflt.name;
                Log("MsgSystem.HandleMessage can't find callback by id:"..id..", name:"..name);
                return;
            }

            var msg = this.MessageRead(factory, id);
            if (msg == null)
            {
                var name = "unknow";
                var rflt = FindStructById(id);
                if (rflt != null) name = rflt.name;
                Log("MsgSystem.HandleMessage MessageRead failed by id:"..id..", name:"..name);
                return;
            }
            callback(this, msg);
            return;
        }
        
        // 如果rpc_id大于0，说明是对方发过来
        if (rpc_id > 0)
        {
            this.HandleRPCRequest(id, rpc_id, factory);
            return;
        }

        // 如果rpc_id小于0，说明是RPC回包
        rpc_id = -rpc_id;
        // 回收id
        this._id_creator.ReleaseID(rpc_id);
        var info = this._id_map_rpc[rpc_id];
        if (info == null)
        {
            Log("MsgSystem.HandleMessage can't find rpc info by id:"..id);
            return;
        }
        this._id_map_rpc[rpc_id] = null;

        // 如果是RPC异常包
        if (id == 1)
        {
            var result, reason = Coroutine.Resume(info.thread, factory.ReadString(), null);
            if (result != true) Error(reason);
            return;
        }
        
        var msg = this.MessageRead(factory, id);
        if (msg == null)
        {
            var result, reason = Coroutine.Resume(info.thread, "MsgSystem.HandleMessage MessageRead failed by id:"..id, null);
            if (result != true) Error(reason);
            Log("MsgSystem.HandleMessage MessageRead failed by id:"..id);
            return;
        }
        var result, reason = Coroutine.Resume(info.thread, null, msg);
        if (result != true) Error(reason);
    }

    // 发送数据包
    public fun SendMsg<T:struct>(T msg)
    {
        var info = reflect<T>;
        this.Send(info.hash_code, msg, 0);
    }
    
    // 发送数据包
    protected fun Send(int msg_id, any msg_body, int rpc_id)
    {
        if (!this.IsConnected()) return;
        
        this._write_factory.SetRpcID(rpc_id);
        this.MessageWrite(msg_id, msg_body);
        this._interface.SendFactory(this._write_factory);
    }

    // 发送RPC异常包
    protected fun SendRpcError(int rpc_id, string reason)
    {
        // 如果没有连接成功，那么直接返回
        if (!this.IsConnected()) return;

        // 发送心跳包
        this._write_factory.ResetOffset();
        // 设置id
        this._write_factory.SetID(1);
        this._write_factory.SetRpcID(-rpc_id);
        this._write_factory.WriteString(reason);
        this._interface.SendFactory(this._write_factory);
    }

    // 发送RPC包
    protected fun SendRPC(Thread thread, int msg_id, any msg_body)
    {
        var rpc_id = this._id_creator.CreateID();
        this._write_factory.SetRpcID(rpc_id);
        this.MessageWrite(msg_id, msg_body);
        this._interface.SendFactory(this._write_factory);
        
        var info = new MsgRPCInfo();
        info.thread = thread;
        info.rpc_id = rpc_id;
        this._id_map_rpc[rpc_id] = info;
    }
    
    // 处理RPC请求
    private async fun HandleRPCRequest(int id, int rpc_id, IMessageReadFactory factory)
    {
        // 获取函数对象
        var callback, return_id = FindMsgRpcCallback(id);
        if (callback == null)
        {
            this.SendRpcError(rpc_id, "没有注册消息RPC回调函数");
            Log("MsgSystem.HandleMessage can't find callback by id:"..id);
            return;
        }
        
        var msg = this.MessageRead(factory, id);
        if (msg == null)
        {
            this.SendRpcError(rpc_id, "MsgSystem.HandleMessage MessageRead failed by id:"..id);
            Log("MsgSystem.HandleMessage MessageRead failed by id:"..id);
            return;
        }
        
        // 调用函数
        var error, return_body = tcall(callback, this, msg);
        if (error != null)
        {
            this.SendRpcError(rpc_id, error);
            Log("MsgSystem.HandleMessage callback invoke failed! by id:"..id..", reason:"..error);
            return;
        }
        if (return_body == null)
        {
            this.SendRpcError(rpc_id, "MsgSystem.HandleMessage callback have not return! by id:"..id);
            Log("MsgSystem.HandleMessage callback have not return! by id:"..id);
            return;
        }
        this.Send(return_id, return_body, -rpc_id);
    }
    
    // 清理RPC
    private fun ClearRPC(string reason)
    {
        // 先复制，再清理
        var tmp = new Map<int, MsgRPCInfo>();
        for (var rpc_id, info in this._id_map_rpc)
        {
            this._id_creator.ReleaseID(rpc_id);
            tmp[rpc_id] = info;
        }
        this._id_map_rpc = new Map<int, MsgRPCInfo>();
        // 逐个调用表示失败
        for (var rpc_id, info in tmp)
        {
            var result, error = Coroutine.Resume(info.thread, reason, null);
            if (result != true) Error(error);
        }
    }

    public fun Close([Nullable] string reason)
    {
        if (reason == null) reason = "主动关闭连接";
        this.ClearRPC(reason);
        this._interface.Close();
    }
}
