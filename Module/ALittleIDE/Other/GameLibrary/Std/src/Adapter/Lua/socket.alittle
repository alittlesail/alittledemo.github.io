
register namespace lua;

public struct socket_event
{
    int type;
    int id;
    
    // 当type为TIMER时有效，当前的时间戳，单位是毫秒
    int time;

    // 当type为MSG_READ_XXX时，整型值，浮点值，protobuf值
    int int_value;
    double double_value;
    string string_value;
    any binary_value;
}

public class socket
{
    public static create() : socket {}
    
    // 如果返回null，表示所有socket全部处理结束
    public static poll(socket c) : socket_event {}
    public static run(socket c) : socket_event {}
    
    // 启动一个定时器
    public static timer(socket c, int delay_ms) {}
    
    // 长连接相关接口
    public static connect(socket c, int id, string ip, int port) {}
    public static close(socket c, int id) {}

    // 读取数据
    public static readuint8(socket c, int id) {}
    public static readint8(socket c, int id) {}
    public static readuint16(socket c, int id) {}
    public static readint16(socket c, int id) {}
    public static readuint32(socket c, int id) {}
    public static readint32(socket c, int id) {}
    public static readuint64(socket c, int id) {}
    public static readint64(socket c, int id) {}
    public static readfloat(socket c, int id) {}
    public static readdouble(socket c, int id) {}
    public static readstring(socket c, int id, int len) {}
    // 读取到的二进制数据，必须使用freebinary释放
    public static readbinary(socket c, int id, int len) {}
    // 释放二进制数据
    public static freebinary(any buffer) {}
    
    // 发送数据
    public static writeuint8(socket c, int id, int value) {}
    public static writeint8(socket c, int id, int value) {}
    public static writeuint16(socket c, int id, int value) {}
    public static writeint16(socket c, int id, int value) {}
    public static writeuint32(socket c, int id, int value) {}
    public static writeint32(socket c, int id, int value) {}
    public static writeuint64(socket c, int id, int value) {}
    public static writeint64(socket c, int id, int value) {}
    public static writefloat(socket c, int id, double value) {}
    public static writedouble(socket c, int id, double value) {}
    public static writestring(socket c, int id, string value) {}
    public static writebinary(socket c, int id, any buffer, int size) {}

    public static exit(net c) {}
}
