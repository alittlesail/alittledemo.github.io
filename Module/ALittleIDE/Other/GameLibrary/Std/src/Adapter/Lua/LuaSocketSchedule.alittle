
[Language(Lua)]
namespace Lua;

public enum socket_type
{
    TIMER = 21;     // 定时器
    
    MSG_CONNECT_SUCCEED = 31;   // 连接成功
    MSG_CONNECT_FAILED = 32;    // 连接失败
    MSG_DISCONNECTED = 33;      // 断开连接

	MSG_READ_UINT8 = 34;
	MSG_READ_INT8 = 35;
	MSG_READ_UINT16 = 36;
	MSG_READ_INT16 = 37;
	MSG_READ_UINT32 = 38;
	MSG_READ_INT32 = 39;
	MSG_READ_UINT64 = 40;
	MSG_READ_INT64 = 41;
	MSG_READ_FLOAT = 42;
	MSG_READ_DOUBLE = 43;
	MSG_READ_STRING = 44;
	MSG_READ_BINARY = 45;
}

public struct lua_socket_schedule_message_info
{
    lua.protobuf_descriptor descriptor;
    string full_name;
    string name;
}

public struct lua_socket_schedule_enum_info
{
    lua.protobuf_enum_descriptor descriptor;
    string full_name;
    string name;
}

public class LuaSocketSchedule : ALittle.ISchedule
{
    public lua.socket _socket;
    private lua.protobuf_importer _importer;
    private lua.protobuf_factory _factory;
    private Map<string, lua_socket_schedule_message_info> _message_map;
    private Map<string, lua_socket_schedule_message_info> _upper_message_map;
    private Map<string, lua_socket_schedule_enum_info> _enum_map;
    private Map<string, lua_socket_schedule_enum_info> _upper_enum_map;
    private int _last_time;
    
    public ctor()
    {
        this._message_map = new Map<string, lua_socket_schedule_message_info>();
        this._upper_message_map = new Map<string, lua_socket_schedule_message_info>();
        this._enum_map = new Map<string, lua_socket_schedule_enum_info>();
        this._upper_enum_map = new Map<string, lua_socket_schedule_enum_info>();
    }

    public fun LoadProto(string root_path) : string
    {
        this._message_map = new Map<string, lua_socket_schedule_message_info>();
        this._upper_message_map = new Map<string, lua_socket_schedule_message_info>();
        this._enum_map = new Map<string, lua_socket_schedule_enum_info>();
        this._upper_enum_map = new Map<string, lua_socket_schedule_enum_info>();

        this._importer = lua.protobuf.createimporter(root_path);
        this._factory = lua.protobuf.createfactory();
        
        var file_map = ALittle.File_GetFileAttrByDir(root_path);
        for (var file_path, _ in file_map)
        {
            if (ALittle.File_GetFileExtByPathAndUpper(file_path) == "PROTO")
            {
                var file_descriptor = lua.protobuf.importer_import(this._importer, ALittle.String_Sub(file_path, ALittle.String_Len(root_path) + 2));
                if (file_descriptor == null) return "文件加载失败:"..file_path;

                var message_count = lua.protobuf.filedescriptor_messagetypecount(file_descriptor);
                for (var i = 0; i < message_count; 1)
                {
                    var message_descriptor = lua.protobuf.filedescriptor_messagetype(file_descriptor, i);
                    if (message_descriptor != null)
                    {
                        var info = new lua_socket_schedule_message_info();
                        info.descriptor = message_descriptor;
                        info.full_name = lua.protobuf.messagedescriptor_fullname(message_descriptor);
                        info.name = lua.protobuf.messagedescriptor_name(message_descriptor);
                        this._message_map[info.full_name] = info;
                        this._upper_message_map[ALittle.String_Upper(info.name)] = info;
                    }
                }
            
                var enum_count = lua.protobuf.filedescriptor_enumtypecount(file_descriptor);
                for (var i = 0; i < enum_count; 1)
                {
                    var enum_descriptor = lua.protobuf.filedescriptor_enumtype(file_descriptor, i);
                    if (enum_descriptor != null)
                    {
                        var info = new lua_socket_schedule_enum_info();
                        info.descriptor = enum_descriptor;
                        info.full_name = lua.protobuf.enumdescriptor_fullname(enum_descriptor);
                        info.name = lua.protobuf.enumdescriptor_name(enum_descriptor);
                        this._enum_map[info.full_name] = info;
                        this._upper_enum_map[ALittle.String_Upper(info.name)] = info;
                    }
                }
            }
        }
        return null;
    }

    // 获取协议类型
    public fun GetMessageInfo(string full_name) : lua_socket_schedule_message_info
    {
        return this._message_map[full_name];
    }

    // 根据message获取协议类型
    public fun GetMessageInfoByMessage(lua.protobuf_message msg) : lua_socket_schedule_message_info
    {
        var descriptor = lua.protobuf.message_getdescriptor(msg);
        if (descriptor == null) return null;
        var full_name = lua.protobuf.messagedescriptor_fullname(descriptor);
        return this._message_map[full_name];
    }

    // 根据key查找名称
    public fun FindMessageByUpperKey(string key) : List<lua_socket_schedule_message_info>
    {
        var result = new List<lua_socket_schedule_message_info>();
        var count = 0;
        for (var name, info in this._upper_message_map)
        {
            if (ALittle.String_Find(name, key) != null)
            {
                ++count;
                result[count] = info;
            }
        }
        return result;
    }

    public fun GetEnumDescriptor(string full_name) : lua.protobuf_enum_descriptor
    {
        var info = this._enum_map[full_name];
        if (info == null) return null;
        return info.descriptor;
    }

    public fun GetMessageDescriptor(string full_name) : lua.protobuf_descriptor
    {
        var info = this._message_map[full_name];
        if (info == null) return null;
        return info.descriptor;
    }

    public fun CreateMessage(string full_name) : lua.protobuf_message
    {
        if (full_name == null) return null;
        if (this._factory == null) return null;
        var info = this._message_map[full_name];
        if (info == null) return null;

        return lua.protobuf.createmessage(this._factory, info.descriptor);
    }

    public fun RunInFrame()
    {
        if (this._socket == null)
            this._socket = lua.socket.create();

        while (true)
        {
            var event = lua.socket.poll(this._socket);
            if (event == null) break;

            this.HandleEvent(event);
        }
    }
    
    // 在Lua版本下Run直接阻塞，等待所有事件全部处理完毕才退出
    public fun Run()
    {   
        if (this._socket == null)
            this._socket = lua.socket.create();

        lua.socket.timer(this._socket, 16);
        while (true)
        {
            var event = lua.socket.poll(this._socket);
            if (event == null) break;
            
            if (event.type == socket_type.TIMER)
            {
                if (this._last_time != null)
                {
                    A_LuaLoopSystem.Update(event.time - this._last_time);
                    A_LuaWeakLoopSystem.Update(event.time - this._last_time);
                }
                this._last_time = event.time;
                lua.socket.timer(this._socket, 16);
            }
            else
            {
                this.HandleEvent(event);
            }
        }
    }

    private fun HandleEvent(lua.socket_event event)
    {
        if (event.type == socket_type.MSG_CONNECT_FAILED)
            ISocket.HandleConnectFailed(event.id);
        elseif (event.type == socket_type.MSG_CONNECT_SUCCEED)
            ISocket.HandleConnectSucceed(event.id);
        elseif (event.type == socket_type.MSG_DISCONNECTED)
            ISocket.HandleDisconnected(event.id);
        elseif (event.type >= socket_type.MSG_READ_INT8 && event.type <= socket_type.MSG_READ_INT64)
            ISocket.HandleReadInt(event.id, event.int_value);
        elseif (event.type >= socket_type.MSG_READ_FLOAT && event.type <= socket_type.MSG_READ_DOUBLE)
            ISocket.HandleReadDouble(event.id, event.double_value);
        elseif (event.type == socket_type.MSG_READ_STRING)
            ISocket.HandleReadString(event.id, event.string_value);
        elseif (event.type == socket_type.MSG_READ_BINARY)
        {
            ISocket.HandleReadProtobuf(event.id, event.binary_value);
            lua.socket.freebinary(event.binary_value);
        }
    }
}

public var A_LuaSocketSchedule = new LuaSocketSchedule();