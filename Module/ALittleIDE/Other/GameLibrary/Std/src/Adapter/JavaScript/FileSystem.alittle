
[Language(JavaScript)]
namespace JavaScript;

public struct FileInfo
{
    FileInfo parent;
    string name;
    string content;
    javascript.ArrayBuffer buffer;
    bool is_directory;
    Map<string, FileInfo> file;
}

private var root = new FileInfo();
root.is_directory = true;
root.name = "";
private var cur_dir = "";

private static Path_FilterEmpty(List<string> list) : List<string>
{
    var new_list = new List<string>();
    for (var index, value in list)
    {
        if (value == "") continue;
        ALittle.List_Push(new_list, value);
    }
    return new_list;
}

public static File_GetCurrentPath() : string
{
    return cur_dir; 
}

public static File_SetCurrentPath(string path) : bool
{
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var cur = root;
    var dir = "";
    for (var index, name in list)
    {
        if (cur.file == null) return false;
        var file = cur.file[name];
        if (file == null) return false;
        if (!file.is_directory) return false;
        cur = file;
        dir = dir .. "/"..file.name;
    }
    cur_dir = dir;
    if (ALittle.String_Len(cur_dir) > 0) cur_dir = cur_dir .. "/";
    return true;    
}

public static File_RenameFile(string path, string new_path) : bool
{   
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var list_len = ALittle.List_MaxN(list);
    var cur = root;
    for (var i = 1; i <= list_len - 1; 1)
    {
        if (cur.file == null) return false;
        var file = cur.file[list[i]];
        if (file == null) return false;
        if (!file.is_directory) return false;
        cur = file;
    }
    if (cur.file == null) return false;
    var cur_file = cur.file[list[list_len]];
    if (cur_file == null || cur_file.is_directory) return false;
    
    var new_list = Path_FilterEmpty(ALittle.String_SplitSepList(new_path, ["/", "\\"]));
    var new_list_len = ALittle.List_MaxN(new_list);
    var new_cur = root;
    for (var i = 1; i <= new_list_len - 1; 1)
    {
        if (new_cur.file == null) return false;
        var file = new_cur.file[new_list[i]];
        if (file == null) return false;
        if (!file.is_directory) return false;
        new_cur = file;
    }
    new_cur.file[new_list[new_list_len]] = cur_file;
    cur.file[list[list_len]] = null;
    cur_file.parent = new_cur;
    return true;
}

public static File_DeleteFile(string path) : bool
{
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var list_len = ALittle.List_MaxN(list);
    var cur = root;
    for (var i = 1; i <= list_len - 1; 1)
    {
        if (cur.file == null) return false;
        var file = cur.file[list[i]];
        if (file == null) return false;
        if (!file.is_directory) return false;
        cur = file;
    }
    if (cur.file == null) return false;
    var cur_file = cur.file[list[list_len]];
    if (cur_file == null || cur_file.is_directory) return false;
    cur.file[list[list_len]] = null;
    cur_file.parent = null;
    return true;
}

public static File_GetFileAttr(string path) : lua.fileattr
{
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var list_len = ALittle.List_MaxN(list);
    var cur = root;
    for (var i = 1; i <= list_len - 1; 1)
    {
        if (cur.file == null) return null;
        var file = cur.file[list[i]];
        if (file == null) return null;
        if (!file.is_directory) return null;
        cur = file;
    }
    if (cur.file == null) return null;
    var cur_file = cur.file[list[list_len]];
    if (cur_file == null) return null;
    
    var attr = new lua.fileattr();
    attr.mode = "file";
    attr.size = 0;
    if (cur_file.is_directory)
        attr.mode = "directory";
    else
    {
        if (cur_file.buffer != null)
        	attr.size = cur_file.buffer.byteLength;
        else
	        attr.size = ALittle.String_Len(cur_file.content);
    }
    
    return attr;
}

public static File_GetFileAttrByDir(string path, [Nullable] Map<string, lua.fileattr> file_map) : Map<string, lua.fileattr>
{
    if (file_map == null) file_map = new Map<string, lua.fileattr>();
    
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var cur = root;
    for (var index, name in list)
    {
        if (cur.file == null) return file_map;
        var file = cur.file[name];
        if (file == null) return file_map;
        if (!file.is_directory) return file_map;
        cur = file;
    }
    if (cur.file == null) return file_map;
    
    // 遍历路径
    for (var name, value in cur.file)
    {
        // 生成文件目录
        var file_path = path .. "/" .. name;
        // 如果是目录，那么就递归遍历
        if (value.is_directory)
            File_GetFileAttrByDir(file_path, file_map);
        // 如果是文件，那么就直接获取属性
        else
        {    
            var attr = new lua.fileattr();
            attr.mode = "file";
            attr.size = ALittle.String_Len(value.content);
            file_map[file_path] = attr;
        }
    }
    
    // 返回结果
    return file_map;  
}

public static File_GetFileListByDir(string path, [Nullable] List<string> file_list) : List<string>
{
    if (file_list == null) file_list = new List<string>();
    
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var cur = root;
    for (var index, name in list)
    {
        if (cur.file == null) return file_list;
        var file = cur.file[name];
        if (file == null) return file_list;
        if (!file.is_directory) return file_list;
        cur = file;
    }
    if (cur.file == null) return file_list;
    
    // 遍历路径
    for (var name, value in cur.file)
    {
        // 生成文件目录
        var file_path = path .. "/" .. name;
        // 如果是目录，那么就递归遍历
        if (value.is_directory)
            File_GetFileListByDir(file_path, file_list);
        // 如果是文件，那么就直接获取属性
        else
        {    
            var attr = new lua.fileattr();
            attr.mode = "file";
            attr.size = ALittle.String_Len(value.content);
            ALittle.List_Push(file_list, file_path);
        }
    }
    
    // 返回结果
    return file_list;  
}

public static File_GetFileNameListByDir(string path, [Nullable] Map<string, lua.fileattr> file_map) : Map<string, lua.fileattr>
{
    if (file_map == null) file_map = new Map<string, lua.fileattr>();
    
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var cur = root;
    for (var index, name in list)
    {
        if (cur.file == null) return file_map;
        var file = cur.file[name];
        if (file == null) return file_map;
        if (!file.is_directory) return file_map;
        cur = file;
    }
    if (cur.file == null) return file_map;
    
    // 遍历路径
    for (var name, value in cur.file)
    {
        // 生成文件目录
        var file_path = path .. "/" .. name;
        // 如果是目录，那么就递归遍历
        if (value.is_directory)
        {
            var attr = new lua.fileattr();
            attr.mode = "directory";
            attr.size = 0;
            file_map[name] = attr;
        }
        // 如果是文件，那么就直接获取属性
        else
        {    
            var attr = new lua.fileattr();
            attr.mode = "file";
            attr.size = ALittle.String_Len(value.content);
            file_map[name] = attr;
        }
    }
    
    // 返回结果
    return file_map;  
}

public static File_DeleteDir(string path) : bool
{
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var cur = root;
    for (var index, name in list)
    {
        if (cur.file == null) return false;
        var file = cur.file[name];
        if (file == null) return false;
        if (!file.is_directory) return false;
        cur = file;
    }
    var can = true;
    // 检查是否有子文件或者子文件夹
    if (cur.file != null)
    {
        for (var index, value in cur.file)
        {
            can = false;
            break;
        }
    }
    if (!can) return false;
    // 解除关系
    cur.parent.file[cur.name] = null;
    cur.parent = null;
    return true;
}

public static File_DeleteDeepDir(string path, [Nullable] bool log_path)
{
    // 如果需要打印，那么获取一下目录，然后打印出来
    if (log_path)
    {
        var file_map = File_GetFileAttrByDir(path);
        for (var file_path, attr in file_map)
            ALittle.Log("delete file:", file_path);
    }
    
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var cur = root;
    for (var index, name in list)
    {
        var file = cur.file[name];
        if (file == null) return;
        if (!file.is_directory) return;
        cur = file;
    }
    cur.parent.file[cur.name] = null;
    cur.parent = null;
}

public static File_MakeDir(string path) : bool
{
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var list_len = ALittle.List_MaxN(list);
    var cur = root;
    for (var i = 1; i <= list_len - 1; 1)
    {
        if (cur.file == null) return false;
        var file = cur.file[list[i]];
        if (file == null) return false;
        if (!file.is_directory) return false;
        cur = file;
    }
    if (cur.file == null)
        cur.file = new Map<string, FileInfo>();
    
    var cur_file = cur.file[list[list_len]];
    if (cur_file != null) return false;
    
    var file = new FileInfo();
    file.is_directory = true;
    file.name = list[list_len];
    file.parent = cur;
    cur.file[list[list_len]] = file;
    return true;
}

public static File_LoadFile(string path) : string, javascript.ArrayBuffer
{
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var list_len = ALittle.List_MaxN(list);
    var cur = root;
    for (var i = 1; i <= list_len - 1; 1)
    {
        if (cur.file == null) return null, null;
        var file = cur.file[list[i]];
        if (file == null) return null, null;
        if (!file.is_directory) return null, null;
        cur = file;
    }
    if (cur.file == null) return null, null;
    var cur_file = cur.file[list[list_len]];
    if (cur_file == null || cur_file.is_directory) return null, null;
    return cur_file.content, cur_file.buffer;
}

public static File_CopyFile(string src_path, string dst_path) : bool
{
    var content, buffer = File_LoadFile(src_path);
    if (content == null && buffer == null) return false;
    return File_SaveFile(dst_path, content, buffer);
}

public static File_SaveFile(string path, string content, javascript.ArrayBuffer buffer) : bool
{
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(path, ["/", "\\"]));
    var list_len = ALittle.List_MaxN(list);
    var cur = root;
    for (var i = 1; i <= list_len - 1; 1)
    {
        if (cur.file == null) return false;
        var file = cur.file[list[i]];
        if (file == null) return false;
        if (!file.is_directory) return false;
        cur = file;
    }
    if (cur.file == null)
        cur.file = new Map<string, FileInfo>();
    var file = new FileInfo();
    file.content = content;
    file.buffer = buffer;
    file.is_directory = false;
    file.name = list[list_len];
    file.parent = cur;
    cur.file[list[list_len]] = file;
    return true;    
}

public static File_CopyDeepDir(string src_path, string dest_path, [Nullable] string ext, [Nullable] bool log)
{
    var upper_ext:string = null;
    if (ext != null) upper_ext = cast<javascript.String>(ext).toUpperCase();
    
    var list = Path_FilterEmpty(ALittle.String_SplitSepList(src_path, ["/", "\\"]));
    var cur = root;
    for (var index, name in list)
    {
        if (cur.file == null) return;
        var file = cur.file[name];
        if (file == null) return;
        if (!file.is_directory) return;
        cur = file;
    }
    if (cur.file == null) return;

    // 遍历源文件夹
    for (var file, info in cur.file)
    {
        // 源文件路径
        var src_file_path = src_path .. "/" .. file;
        // 目标文件路径
        var dest_file_path = dest_path .. "/" .. file;
        // 如果是目录进行递归复制
        if (info.is_directory)
        {
            // 创建文件夹
            File_MakeDir(dest_file_path);
            // 开始复制
            File_CopyDeepDir(src_file_path, dest_file_path, upper_ext, log);
        }
        // 如果是文件，就直接复制文件
        else
        {
            if (upper_ext == null || ALittle.File_GetFileExtByPathAndUpper(src_file_path) == upper_ext)
            {
                File_CopyFile(src_file_path, dest_file_path);
                if (log) ALittle.Log("copy file:", src_file_path, dest_file_path);
            }
        }
    }
}