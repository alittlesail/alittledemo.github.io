
[Language(JavaScript)]
namespace JavaScript;

// 因为只会翻译成JavaScript，只需要从javascript取
var Math_Floor = javascript.Math.floor;

public struct MiniHeapNodeInfo
{
    int heap_index;
    int end_time;
}

public class MiniHeap<T : MiniHeapNodeInfo>
{
    [Native] // 翻译成JavaScript时 使用Native表示下标从0开始
    private List<T> _nodes;
    private int _size;
    private int _capacity;
    
    public ctor()
    {
        this._nodes = new List<T>();
        this._size = 0;
        this._capacity = 0;
    }
    
    public get size() : int { return this._size; }
    public get empty() : bool { return this._size == 0; }
    public fun GetTop() : T
    {
        if (this._size == 0) return null;
        return this._nodes[0];
    }
        
    public fun Push(T node) : bool
    {
        if (this._capacity < this._size + 1)
        {
            this._capacity += 1;
            this._nodes[this._capacity] = null;
        }
            
        this.ShiftUp(this._size, node);
        ++ this._size;
        return true;
    }
    
    public fun Pop() : T
    {
        if (this._size == 0) return null;
        
        var node = this._nodes[0];
        this.ShiftDown(0, this._nodes[this._size - 1]);
        this._size -= 1;
        node.heap_index = -1;
        return node;
    }
    
    public fun Adjust(T node) : bool
    {
        if (node.heap_index == -1)
            return this.Push(node);
        
        /* The position of e has changed; we shift it up or down
        * as needed.  We can't need to do both. */
        if (node.heap_index > 0 && this._nodes[Math_Floor((node.heap_index-1)/2)].end_time > node.end_time)
            this.ShiftUpUnconditional(node.heap_index, node);
        else
            this.ShiftDown(node.heap_index, node);
        
        return true;
    }
    
    public fun Erase(T node) : bool
    {
        if (node.heap_index < 0) return false;
        
        var last = this._nodes[this._size - 1];
        this._size -= 1;
        /* we replace e with the last element in the heap.  We might need to
        shift it upward if it is less than its parent, or downward if it is
        greater than one or both its children. Since the children are known
        to be less than the parent, it can't need to shift both up and
        down. */
        // 如果不是根节点，并且父节点比最后一个节点大，那么就使用无条件上浮一次，然后依次上浮
        if (node.heap_index > 0 && this._nodes[Math_Floor((node.heap_index-1)/2)].end_time > last.end_time)
            this.ShiftUpUnconditional(node.heap_index, last);
        else
            this.ShiftDown(node.heap_index, last);
        node.heap_index = -1;
        return true;
    }
    
    // 从index开始，向上浮
    // 1. 从当前节点开始与父节点进行对比
    // 2. 如果父节点大于当前节点，那么就交换。否则停止
    private fun ShiftUp(int index, T node)
    {
        var parent = Math_Floor((index - 1) / 2);
        while (index > 0 && this._nodes[parent].end_time > node.end_time)
        {
            this._nodes[index] = this._nodes[parent];
            this._nodes[index].heap_index = index;
            index = parent;
            parent = Math_Floor((index - 1) / 2);
        }
        this._nodes[index] = node;
        node.heap_index = index;
    }
    
    // 从index开始，向上浮
    // 1. 第一次无条件上浮
    // 2. 从当前节点开始与父节点进行对比
    // 3. 如果父节点大于当前节点，那么就交换。否则停止
    private fun ShiftUpUnconditional(int index, T node)
    {
        var parent = Math_Floor((index - 1) / 2);
        do
        {
            this._nodes[index] = this._nodes[parent];
            this._nodes[index].heap_index = index;
            index = parent;
            parent = Math_Floor((index - 1) / 2);
        }
        while (index > 0 && this._nodes[parent].end_time > node.end_time);
        this._nodes[index] = node;
        node.heap_index = index;
    }
    
    private fun ShiftDown(int index, T node)
    {
        // 选择右子节点
        var min_child = 2 * (index + 1);
        while (min_child <= this._size)
        {
            // 如果这个字节点是最后一个节点，或者右节点大于左节点
            // 那么就选择左节点
            if (min_child == this._size || this._nodes[min_child].end_time > this._nodes[min_child - 1].end_time)
                min_child -= 1;
            
            // 如果当前节点小于或等于选择的节点，那么就跳出
            if (!(node.end_time > this._nodes[min_child].end_time)) {
                break;
            }
            
            this._nodes[index] = this._nodes[min_child];
            this._nodes[index].heap_index = index;
            index = min_child;
            min_child = 2 * (index + 1);
        }
        this._nodes[index] = node;
        node.heap_index = index;
    }
}

public struct TimerInfo : MiniHeapNodeInfo
{
    int id;
    int loop;
    int interval_ms;
}

public class JHeapTimer : ALittle.IHeapTimer
{
    private int _cur_time;
    private int _max_id;
    private Map<int, TimerInfo> _map;
    private MiniHeap<TimerInfo> _heap;
    private List<TimerInfo> _pool;
    private int _pool_count;
    
    public ctor()
    {
        this._max_id = 0;
        this._cur_time = 0;
        this._heap = new MiniHeap<TimerInfo>();
        this._map = new Map<int, TimerInfo>();
        this._pool = new List<TimerInfo>();
        this._pool_count = 0;
    }
    
    private fun Create() : TimerInfo
    {
        if (this._pool_count == 0) return new TimerInfo();
        
        var info = this._pool[this._pool_count];
        this._pool[this._pool_count] = null;
        this._pool_count -= 1;
        return info;
    }
    
    private fun Release(TimerInfo info)
    {
        if (this._pool_count >= 1000)
            return;
        this._pool_count += 1;
        this._pool[this._pool_count] = info;
    }
    
    public fun Add(int delay_ms, int loop, int interval_ms) : int
    {
        var info = this.Create();
        info.heap_index = -1;
        if (delay_ms < 0) delay_ms = 0;
        info.end_time = this._cur_time + delay_ms;
        if (loop <= 0) info.loop = -1;
        else info.loop = loop;
        info.interval_ms = interval_ms;
        if (info.interval_ms <= 0) info.interval_ms = 1;
        
        var find_count = 1000000;
        while(find_count > 0)
        {
            // 往前加
            this._max_id += 1;
            // 如果到达最大值，那么就回到1开始
            if (this._max_id == 0x7FFFFFFF) this._max_id = 1;
            
            // 如果没有被使用，那么可以跳出
            if (this._map[this._max_id] == null)
            {
                info.id = this._max_id;
                break;
            }
            
            // 继续查找
            --find_count;
        }
        
        if (!this._heap.Push(info))
        {
            this.Release(info);
            return 0;
        }
        
        this._map[info.id] = info;
        return info.id;
    }
    
    public fun Remove(int id) : bool
    {
        var info = this._map[id];
        if (info == null) return false;
        
        this._heap.Erase(info);
        this.Release(info);
        this._map[id] = null;
        
        return true;
    }
    
    public fun Update(int frame_ms)
    {
        this._cur_time += frame_ms;
    }
    
    public fun Poll() : int
    {
        var info = this._heap.GetTop();
        if (info == null) return 0;
        
        if (info.end_time > this._cur_time)
            return 0;
        
        this._heap.Pop();
        
        // 处理无限循环
        if (info.loop < 0)
        {
            info.end_time = info.end_time + info.interval_ms;
            this._heap.Push(info);
            return info.id;   
        }
        
        // 如果还有次数，那么就扣除次数
        if (info.loop > 1)
        {
            --info.loop;
            info.end_time = info.end_time + info.interval_ms;
            this._heap.Push(info);
            return info.id;
        }
        
        // 次数已经用完，那么就直接删除
        this._map[info.id] = null;
        this.Release(info);
        return -info.id;
    }
}