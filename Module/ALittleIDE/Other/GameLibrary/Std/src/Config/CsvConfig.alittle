
namespace ALittle;

public class ICsvFile
{
    public fun Close() {}
    public fun ReadCell(int row, int col) : string { return ""; }
    public fun GetRowCount() : int { return 0; }
    public fun GetColCount() : int { return 0; }
}

public class ICsvFileLoader
{
    public fun Start() {}
    public fun SetPath(string file_path, bool only_from_asset) {}
    public fun GetPath() : string { return null; }
    public fun GetID() : int { return null; }
}

public class CsvConfig
{
    // 直接阻塞加载
    public fun Load(string file_path)
    {
        // Lua加载csv
        [Language(Lua)]
        var lua_file = new Lua.LuaCsvFile();
        [Language(Lua)]
        assert(lua_file.Load(file_path), file_path.." load failed!");
        [Language(Lua)]
        this.Init(lua_file);
        
        // JavaScript加载csv
        [Language(JavaScript)]
        var js_file = new JavaScript.JCsvFile();
        [Language(JavaScript)]
        assert(js_file.Load(file_path), file_path.." load failed!");
        [Language(JavaScript)]
        this.Init(js_file);
        
        // 打印加载成功
        Log(file_path.." load succeed!");
    }
    
    // 初始化数据
    public fun Init(ICsvFile file) {}
}

protected struct KeyValueInfo
{
    string key;
    string value;
}

public class KeyValueConfig<T:struct> : CsvConfig
{
    private T _data;
    protected CsvInvokeInfo _csv_info;
    
    public ctor()
    {
        this._data = new T();
        this._csv_info = CreateCsvInfo(reflect<T>);
    }
    
    protected fun Init(ICsvFile file)
    {
        if (file == null) return;
        
        var reflt = reflect<T>;
        var handle_map = new Map<string, CsvInvokeInfo>();
        for (var index, handle in this._csv_info.handle)
            handle_map[handle.var_name] = handle;
        
        var row_count = file.GetRowCount();
        for (var row = 1; row <= row_count; 1)
        {
            var key = file.ReadCell(row, 1);
            var value = file.ReadCell(row, 2);
            if (key != null && value != null)
            {
                var handle = handle_map[key];
                if (handle != null)
                {
                    var hvalue = handle.func(value, handle);
                    if (hvalue != null)
                        cast<Map<string, any>>(this._data)[key] = hvalue;
                    else
                        Error("key:"..key.." load failed!");
                }
            }
        }
        file.Close();
    }
    
    protected fun GetFieldNameList() : List<string>
    {
        var rflt = reflect<KeyValueInfo>;
        return rflt.name_list;
    }
    
    [Constant]
    public fun GetData() : const T
    {
        return this._data;
    }
}

protected class CsvTableConfig<T:struct> : CsvConfig
{
    protected ICsvFile _csv_file;
    protected CsvInvokeInfo _csv_info;
    protected Map<int, int> _col_map;
    
    public ctor()
    {
        // 获取csv反射信息
        var error:string = null;
        error, this._csv_info = tcall(CreateCsvInfo, reflect<T>);
        if (error != null) Error(error);
        
        // 获取csv列映射信息
        this._col_map = new Map<int, int>();
    }
    
    public fun Init(ICsvFile file)
    {
        if (this._csv_file != null) this._csv_file.Close();
        this._csv_file = file;
        if (this._csv_file == null) return;
        
        // 收集字段列信息
        var rflt = reflect<T>;
        var name_map = new Map<string, int>();
        for (var index, name in rflt.name_list)
            name_map[name] = index;
        
        // 字段的列映射csv的列
        for (var i = 1; i <= this._csv_file.GetColCount(); 1)
        {
            var name = this._csv_file.ReadCell(1, i);
            var index = name_map[name];
            if (index != null)
                this._col_map[index] = i;
        }
        
        this.onInit();
    }
    
    private fun onInit() {}
    
    private fun LoadCell(int row) : T
    {
        var value = new Map<string, any>();
        for (var index, handle in this._csv_info.handle)
        {
            var real = this._col_map[index];
            if (real == null)
                value[handle.var_name] = handle.func("", handle);
            else
            {
                var read = this._csv_file.ReadCell(row, real);
                if (read == null)
                    value[handle.var_name] = handle.func("", handle);
                else
                    value[handle.var_name] = handle.func(read, handle);
            }
                
        }
        return cast<T>(value);
    }
}

public class SingleKeyTableConfig<T:struct, KEY> : CsvTableConfig
{
    private Map<KEY, int> _key_map;
    private Map<KEY, T> _cache_map;

    public ctor()
    {
        this._key_map = new Map<KEY, int>();
        this._cache_map = new Map<KEY, T>();
    }
    
    public fun onInit()
    {
        var rflt = reflect<T>;
        var key_type = rflt.type_list[1];
        var key_index = this._col_map[1];
        var is_int = key_type == "int" || key_type == "long";
        var is_double = key_type == "double";
        
        var row_count = this._csv_file.GetRowCount();
        for (var row = 2; row <= row_count; 1)
        {
            var value = this._csv_file.ReadCell(row, key_index);
            if (value != null)
            {
                if (is_int)
                    this._key_map[cast<KEY>(Math_ToInt(value))] = row;
                elseif (is_double)
                    this._key_map[cast<KEY>(Math_ToDouble(value))] = row;
                else
                    this._key_map[cast<KEY>(value)] = row;
            }
        }
    }
    
    public fun GetData(KEY key) : T
    {
        if (this._csv_file == null) return null;
        
        var value = this._cache_map[key];
        if (value != null) return value;
        
        var row = this._key_map[key];
        if (row == null) return null;
        
        value = this.LoadCell{T}(row);
        if (value == null) return null;
        
        this._cache_map[key] = value;
        return value;
    }
}

public class DoubleKeyTableConfig<T:struct, KEY1, KEY2> : CsvTableConfig
{
    private Map<KEY1, Map<KEY2, int>> _key_map;
    private Map<KEY1, Map<KEY2, T>> _cache_map;
    
    public ctor()
    {
        this._key_map = new Map<KEY1, Map<KEY2, int>>();
        this._cache_map = new Map<KEY1, Map<KEY2, T>>();
    }

    public fun onInit()
    {   
        var rflt = reflect<T>;
        
        // 第一个key
        var first_key_type = rflt.type_list[1];
        var first_key_index = this._col_map[1];
        var first_is_int = first_key_type == "int" || first_key_type == "long";
        var first_is_double = first_key_type == "double";
        
        // 第二个key
        var second_key_type = rflt.type_list[2];
        var second_key_index = this._col_map[2];
        var second_is_int = second_key_type == "int" || second_key_type == "long";
        var second_is_double = second_key_type == "double";
        
        var row_count = this._csv_file.GetRowCount();
        for (var row = 2; row <= row_count; 1)
        {
            var tmp:Map<KEY2, int>;
            var value = this._csv_file.ReadCell(row, first_key_index);
            if (value != null)
            {
                if (first_is_int)
                {
                    tmp = this._key_map[cast<KEY1>(Math_ToInt(value))];
                    if (tmp == null)
                    {
                        tmp = new Map<KEY2, int>();
                        this._key_map[cast<KEY1>(Math_ToInt(value))] = tmp;
                    }
                }
                elseif (first_is_double)
                {
                    tmp = this._key_map[cast<KEY1>(Math_ToDouble(value))];
                    if (tmp == null)
                    {
                        tmp = new Map<KEY2, int>();
                        this._key_map[cast<KEY1>(Math_ToDouble(value))] = tmp;
                    }
                }
                else
                {
                    tmp = this._key_map[cast<KEY1>(value)];
                    if (tmp == null)
                    {
                        tmp = new Map<KEY2, int>();
                        this._key_map[cast<KEY1>(value)] = tmp;
                    }
                }
            }

            if (tmp == null) continue;
            
            value = this._csv_file.ReadCell(row, second_key_index);
            if (value != null)
            {
                if (second_is_int)
                    tmp[cast<KEY2>(Math_ToInt(value))] = row;
                elseif (second_is_double)
                    tmp[cast<KEY2>(Math_ToDouble(value))] = row;
                else
                    tmp[cast<KEY2>(value)] = row;
            }
        }
    }

    public fun GetData(KEY1 first_key, KEY2 second_key) : T
    {
        if (this._csv_file == null) return null;

        var value_map = this._cache_map[first_key];
        if (value_map != null)
        {
            var value = value_map[second_key];
            if (value != null) return value;
        }

        var key_tmp = this._key_map[first_key];
        if (key_tmp == null) return null;

        var row = key_tmp[second_key];
        if (row == null) return null;

        var value = this.LoadCell{T}(row);
        if (value == null) return null;

        var tmp = this._cache_map[first_key];
        if (tmp == null)
        {
            tmp = new Map<KEY2, T>();
            this._cache_map[first_key] = tmp;
        }
        tmp[second_key] = value;
        return value;
    }
}