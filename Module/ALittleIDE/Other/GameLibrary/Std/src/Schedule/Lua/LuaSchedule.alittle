
[Language(Lua)]
namespace Lua;

public enum CarpNetEventType
{
	HTTP_SUCCEED = 1;
	HTTP_FAILED = 2;
    
	HTTP_FILE_SUCCEED = 11;
	HTTP_FILE_FAILED = 12;
	HTTP_FILE_PROGRESS = 13;
    
    TIMER = 21;     // 定时器
    
    MSG_CONNECT_SUCCEED = 31;
    MSG_CONNECT_FAILED = 32;
    MSG_DISCONNECTED = 33;
    MSG_MESSAGE = 34;
}

public class LuaSchedule : ALittle.ISchedule
{
    public carp.CarpNet _net;
    private int _last_time;
    private carp.CarpMessageReadFactory _factory;
    
    public ctor()
    {
    }

    // 在帧中运行
    public fun RunInFrame()
    {
        if (this._net == null)
            this._net = new carp.CarpNet();

        while (true)
        {
            var event = carp.CarpNet.Poll(this._net);
            if (event == null) break;
            
            this.HandleEvent(event);
        }
    }
    
    // 在Lua版本下Run直接阻塞，等待所有事件全部处理完毕才退出
    public fun Run()
    {   
        if (this._net == null)
            this._net = new carp.CarpNet();

        this._net.Timer(16);
        while (true)
        {
            var event = carp.CarpNet.Poll(this._net);
            if (event == null) break;
            
            if (event.type == CarpNetEventType.TIMER)
            {
                if (this._last_time != null)
                {
                    A_LuaLoopSystem.Update(event.time - this._last_time);
                    A_LuaWeakLoopSystem.Update(event.time - this._last_time);
                }
                this._last_time = event.time;
                this._net.Timer(16);
            }
            else
            {
                this.HandleEvent(event);
            }
        }
    }

    private fun HandleEvent(carp.CarpNetEvent event)
    {
        if (event.type == CarpNetEventType.MSG_MESSAGE)
        {
            ALittle.__ALITTLEAPI_Message(event.id, event.msg_id, event.rpc_id, this._factory);
            carp.CarpNet.FreeReadFactory(event.factory);
        }
        elseif (event.type == CarpNetEventType.HTTP_SUCCEED)
            ALittle.__ALITTLEAPI_HttpClientSucceed(event.id);
        elseif (event.type == CarpNetEventType.HTTP_FAILED)
            ALittle.__ALITTLEAPI_HttpClientFailed(event.id, event.error);
        elseif (event.type == CarpNetEventType.HTTP_FILE_SUCCEED)
            ALittle.__ALITTLEAPI_HttpFileSucceed(event.id);
        elseif (event.type == CarpNetEventType.HTTP_FILE_FAILED)
            ALittle.__ALITTLEAPI_HttpFileFailed(event.id, event.error);
        elseif (event.type == CarpNetEventType.HTTP_FILE_PROGRESS)
            ALittle.__ALITTLEAPI_HttpFileProcess(event.id, event.cur_size, event.total_size);
        elseif (event.type == CarpNetEventType.MSG_CONNECT_SUCCEED)
            ALittle.__ALITTLEAPI_ConnectSucceed(event.id);
        elseif (event.type == CarpNetEventType.MSG_CONNECT_FAILED)
            ALittle.__ALITTLEAPI_ConnectFailed(event.id);
        elseif (event.type == CarpNetEventType.MSG_DISCONNECTED)
            ALittle.__ALITTLEAPI_Disconnected(event.id);
    }
}

public var A_LuaSchedule = new LuaSchedule();