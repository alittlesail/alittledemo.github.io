
register namespace carp;

public struct CarpNetEvent
{
    int type;
    int id;
    
    // 当type为HTTP_SUCCEED时有效
    string content;
    // 当type为HTTP_FILE_FAILED，HTTP_FAILED时有效
    string error;
    
    // 当type为HTTP_FILE_PROGRESS时有效
    int cur_size;
    int total_size;
    
    // 当type为TIMER时有效，当前的时间戳，单位是毫秒
    int time;
    
    // 当type为MSG_MESSAE
    int msg_id;
    int rpc_id;
    CarpMessageReadFactory factory;
}

public class CarpNet
{   
    // 如果返回null，表示所有net全部处理结束
    public static Poll(CarpNet net) : CarpNetEvent {}
    public static Run(CarpNet net) : CarpNetEvent {}
    public static FreeReadFactory(CarpMessageReadFactory factory) {}
    
    // 启动一个定时器
    public fun Timer(int delay_ms) {}
    
    // http相关接口
    public fun HttpGet(int id, string url) {}
    public fun HttpStopGet(int id) {}
    public fun HttpPost(int id, string url, string type, string content) {}
    public fun HttpStopPost(int id) {}
    public fun HttpDownload(int id, string url, string file_path) {}
    public fun HttpStopDownload(int id) {}
    public fun HttpUpload(int id, string url, string file_path) {}
    public fun HttpStopUpload(int id) {}
    
    // 长连接相关接口
    public fun Connect(int id, string ip, int port) {}
    public fun IsConnected(int id) : bool {}
    public fun IsConnecting(int id) : bool {}
    public fun Close(int id) {}
    public fun Send(int id, CarpMessageWriteFactory factory) {}
    
    public static Exit() {}
}
