namespace ALittle;

public struct QVersionCreateAccount
{
    string __account_id;     // 账号ID
    string __session_id;     // 会话ID
    string account_name;
    string account_pwd;
}

public struct AVersionCreateAccount
{

}

[Msg]
public await static HandleQVersionCreateAccount(IMsgCommon client, QVersionCreateAccount msg) : AVersionCreateAccount
{
    var web_account = A_WebAccountManager.CheckLoginByClient(client);
    
    assert(msg.account_name != null && msg.account_name != "", "账号名不能为空");
    assert(msg.account_pwd != null && msg.account_pwd != "", "密码不能为空");
    
    var error, count = A_MysqlSystem.SelectCount{WebBaseInfo}("account_name", msg.account_name);
    if (error != null) throw("数据库操作失败:"..error);
    assert(count == 0, "账号名已存在");

    var base_info = new WebBaseInfo();
    base_info.account_id = String_GenerateID("account_id");
    base_info.account_name = msg.account_name;
    base_info.account_pwd = String_Md5("ALittle"..String_Md5(msg.account_pwd).."ALittle");
    var time, index = NewTimeAndIndex();
    base_info.create_time = time;
    base_info.create_index = index;
    base_info.update_time = time;
    base_info.update_index = index;
    error = A_MysqlSystem.InsertInto(base_info);
    if (error != null) throw("数据库操作失败:"..error);
    
    return new AVersionCreateAccount();
}

public struct QVersionDeleteAccount
{
    string __account_id;     // 账号ID
    string __session_id;     // 会话ID
    string account_id;
}

public struct AVersionDeleteAccount
{

}

[Msg]
public await static HandleQVersionDeleteAccount(IMsgCommon client, QVersionDeleteAccount msg) : AVersionDeleteAccount
{
    var web_account = A_WebAccountManager.CheckLoginByClient(client);

    var error, base_info = A_MysqlSystem.SelectOneFromByKey{WebBaseInfo}("account_id", msg.account_id);
    if (error != null) throw("数据库操作失败:"..error);
    assert(base_info != null, "账号不存在");
    assert(base_info.account_name != "alittle", "超级管理员不能删除");
    error = A_MysqlSystem.DeleteFromByKey{WebBaseInfo}("account_id", msg.account_id);
    if (error != null) throw("数据库操作失败:"..error);

    return new AVersionDeleteAccount();
}

public struct QVersionSetAccountPwd
{
    string __account_id;     // 账号ID
    string __session_id;     // 会话ID
    string account_id;
    string account_pwd;
}

public struct AVersionSetAccountPwd
{

}

[Msg]
public await static HandleQVersionSetAccountPwd(IMsgCommon client, QVersionSetAccountPwd msg) : AVersionSetAccountPwd
{
    var web_account = A_WebAccountManager.CheckLoginByClient(client);

    var error, base_info = A_MysqlSystem.SelectOneFromByKey{WebBaseInfo}("account_id", msg.account_id);
    if (error != null) throw("数据库操作失败:"..error);
    assert(base_info != null, "账号不存在");

    var password = String_Md5("ALittle"..String_Md5(msg.account_pwd).."ALittle");
    error = A_MysqlSystem.UpdateSet{WebBaseInfo}("account_pwd", password,
                                "account_id", msg.account_id);
    if (error != null) throw("数据库操作失败:"..error);

    return new AVersionSetAccountPwd();
}

public struct QVersionSetAccountRole
{
    string __account_id;     // 账号ID
    string __session_id;     // 会话ID
    string account_id;
    string role_id;
}

public struct AVersionSetAccountRole
{

}

[Msg]
public await static HandleQVersionSetAccountRole(IMsgCommon client, QVersionSetAccountRole msg) : AVersionSetAccountRole
{
    var web_account = A_WebAccountManager.CheckLoginByClient(client);
    
    var error:string = null;
    
    var base_info:WebBaseInfo = null;
    error, base_info = A_MysqlSystem.SelectOneFromByKey{WebBaseInfo}("account_id", msg.account_id);
    if (error != null) throw("数据库操作失败:"..error);
    assert(base_info != null, "账号不存在");
    
    assert(base_info.account_name != "alittle", "超级管理员不能修改角色");
    
    var role_info:WebRoleInfo = null;
    error, role_info = A_MysqlSystem.SelectOneFromByKey{WebRoleInfo}("role_id", msg.role_id);
    if (error != null) throw("数据库操作失败:"..error);
    assert(role_info != null, "角色不存在");

    // 更新账号的角色
    error = A_MysqlSystem.UpdateSet{WebBaseInfo}("role_id", msg.role_id, "account_id", msg.account_id);
    if (error != null) throw("数据库操作失败:"..error);

    // 如果账号在线，那么就更新账号账号权限
    web_account.UpdateRoleInfo();

    return new AVersionSetAccountRole();
}

public struct QVersionCreateRole
{
    string __account_id;     // 账号ID
    string __session_id;     // 会话ID
    string role_name;
    Map<string, bool> role_permission;
}

public struct AVersionCreateRole
{

}

[Msg]
public await static HandleQVersionCreateRole(IMsgCommon client, QVersionCreateRole msg) : AVersionCreateRole
{
    var web_account = A_WebAccountManager.CheckLoginByClient(client);
    // 检查角色权限
    var permission_list = new List<string>();
    for (var permission, _ in msg.role_permission)
        List_Push(permission_list, permission);

    var role_info = new WebRoleInfo();
    role_info.role_id = String_GenerateID("role_id");
    role_info.permission = permission_list;
    role_info.role_name = msg.role_name;
    var time, index = NewTimeAndIndex();
    role_info.create_time = time;
    role_info.create_index = index;
    role_info.update_time = time;
    role_info.update_index = index;
    var error = A_MysqlSystem.InsertInto(role_info);
    if (error != null) throw("数据库操作失败:"..error);

    return new AVersionCreateRole();
}

public struct QVersionUpdateRole
{
    string __account_id;     // 账号ID
    string __session_id;     // 会话ID
    string role_id;
    string role_name;
    Map<string, bool> role_permission;
}

public struct AVersionUpdateRole
{
}

[Msg]
public await static HandleQVersionUpdateRole(IMsgCommon client, QVersionUpdateRole msg) : AVersionUpdateRole
{
    var web_account = A_WebAccountManager.CheckLoginByClient(client);
    
    var error, role_info = A_MysqlSystem.SelectOneFromByKey{WebRoleInfo}("role_id", msg.role_id);
    if (error != null) throw("数据库操作失败:"..error);
    assert(role_info != null, "角色不存在");
    // 检查角色权限
    var permission_list = new List<string>();
    for (var permission, _ in msg.role_permission)
        List_Push(permission_list, permission);
    
    error = A_MysqlSystem.UpdateSet{WebRoleInfo}("role_name", msg.role_name, "role_id", msg.role_id);
    if (error != null) throw("数据库操作失败:"..error);
    error = A_MysqlSystem.UpdateSet{WebRoleInfo}("permission", permission_list, "role_id", msg.role_id);
    if (error != null) throw("数据库操作失败:"..error);
    
    var sql = "SELECT `account_id` FROM `WebBaseInfo` WHERE `role_id`=?";
    var query = new MysqlStatementQuery();
    query.sql = sql;
    query.value = msg.role_id;
    error = query.Execute();
    if (error != null) throw("数据库操作失败:"..error);
    for (var i = 1; i <= query.count; 1)
    {
        var account_id = query.String;
        var account = A_WebAccountManager.GetAccountById(account_id);
        if (account != null) account.UpdateRoleInfo();
    }

    return new AVersionUpdateRole();
}

public struct QVersionDeleteRole
{
    string __account_id;     // 账号ID
    string __session_id;     // 会话ID
    string role_id;
}

public struct AVersionDeleteRole
{

}

[Msg]
public await static HandleQVersionDeleteRole(IMsgCommon client, QVersionDeleteRole msg) : AVersionDeleteRole
{
    var web_account = A_WebAccountManager.CheckLoginByClient(client);
    
    var error, count = A_MysqlSystem.SelectCount{WebBaseInfo}("role_id", msg.role_id);
    if (error != null) throw("数据库操作失败:"..error);
    assert(count == 0, "角色正在使用不能删除");
    error = A_MysqlSystem.DeleteFromByKey{WebRoleInfo}("role_id", msg.role_id);
    if (error != null) throw("数据库操作失败:"..error);
    
    return new AVersionDeleteRole();
}