
namespace ALittle;

// 日志主类型
public enum LogEventMainType
{
    LEMT_OPS = 1;           // 运维
}

// 日志子类型
public enum LogEventSubType
{
    LEST_OPS_ADDRES = 1;    // 运维充值
}

// 日志事件系统
public class LogEventSystem
{
    // 是否初始化
    private bool _init;
    // LogServer的连接
    private MsgSession _session;
    // 缓存的连接事件列表
    private List<LogServer.LogEventInfo> _list;
    private int _count;
    
    public ctor()
    {
        this._init = false;
        this._list = new List<LogServer.LogEventInfo>();
        this._count = 0;
    }

    // LogServer连接成功
    private async fun HandleSessionConnected(SessionConnectEvent event)
    {
        // 过滤一下服务器类型
        if (event.route_num != RouteType.RT_LOG
            && event.route_num != RouteNum.RN_DEFAULT)
            return;
        // 保存连接对象
        this._session = event.session;
        // 把挤压的日志写入
        this.Flush();
    }

    // LogServer连接断开
    private fun HandleSessionDisconnected(SessionDisconnectEvent event)
    {
        // 过滤一下服务器类型
        if (event.route_num != RouteType.RT_LOG
            && event.route_num != RouteNum.RN_DEFAULT)
            return;
        // 连接置空
        this._session = null;
    }

    // 刷空日志事件
    private await fun Flush()
    {
        for (var index, info in this._list)
            this.Send(info);
        this._list = new List<LogServer.LogEventInfo>();
        this._count = 0;
    }

    private await fun Send(LogServer.LogEventInfo info)
    {
        var error, result = LogServer.HandleLogEventInfo(this._session, info);
        if (error != null)
            Warn("日志发送失败:"..error.." 数据:"..ALittle.String_JsonEncode(info));
    }

    // 发送日志事件
    public async fun SendLogEvent(LogServer.LogEventInfo info)
    {
        // 如果还未初始化，那么就监听一下各种事件
        if (!this._init)
        {
            A_SessionSystem.AddConnectSession(RouteType.RT_LOG, RouteNum.RN_DEFAULT);
            A_SessionSystem.AddEventListener(this, this.HandleSessionConnected);
            A_SessionSystem.AddEventListener(this, this.HandleSessionDisconnected);
            this._init = true;
        }

        // 如果连接不存在，那么就记录事件
        // 否则就直接发送
        if (this._session == null)
        {
            List_Push(this._list, info);
            ++ this._count;

            if (this._count > 1000)
            {
                Warn("消息队列太大，移除掉第一个, 数据:"..ALittle.String_JsonEncode(this._list[1]));
                lua.table.remove(this._list, 1);
                -- this._count;
            }
        }
        else
        {
            this.Send(info);
        }
    }
}

public var A_LogEventSystem = new LogEventSystem();
