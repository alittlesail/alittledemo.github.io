
namespace ALittle;

// http文件连接接口
public class HttpFileReceiverNative : IHttpFileReceiverNative
{
    public fun Close(int http_id) { __CPPAPI_ServerSchedule.HttpClose(http_id); }
    public fun SendString(int http_id, string content) { __CPPAPI_ServerSchedule.HttpSendString(http_id, content); }
    public fun StartReceiveFile(int http_id, string file_path, int start_size) { __CPPAPI_ServerSchedule.HttpStartReceiveFile(http_id, file_path, start_size); }
}

// http文件连接
using HttpFileReceiver = HttpFileReceiverTemplate<HttpFileReceiverNative>;

// http文件系统
public class HttpFileSystem
{
    // http文件连接集合
    private Map<int, HttpFileReceiver> _http_file_map;

    public ctor()
    {
        this._http_file_map = new Map<int, HttpFileReceiver>();
    }
    
    // 处理文件任务
    protected async fun HandleHttpFileTask(int http_id, string path, Functor<await(IHttpFileReceiver, any):any> callback, Map<string, any> value_map)
    {
        this.HandleHttpFileTaskImpl(http_id, path, callback, value_map);
    }

    // 处理文件任务
    protected await fun HandleHttpFileTaskImpl(int http_id, string path, Functor<await(IHttpFileReceiver, any):any> callback, Map<string, any> value_map)
    {
        // 创建http文件连接对象，并保存
        var file_client = new HttpFileReceiver(http_id, co);
        this._http_file_map[http_id] = file_client;

        // 定义结果变量
        var error:string = null;
        var result:any = null;

        // 如果没有回调，那么就直接以空串路径接收文件
        // 否则调用回调，内部应调用StartReceiveFile来接收文件
        if (callback == null)
            error = file_client.StartReceiveFile("", 0);
        else
            error, result = tcall(callback, file_client,value_map);

        // 如果没有接受文件，那么就调用一下
        if (!file_client.received)
            error = file_client.StartReceiveFile("", 0);

        // 清空对象
        this._http_file_map[http_id] = null;

        // 如果失败了，那么就发送失败
        if (error != null)
        {
            var map = new Map<string, any>();
            map["error"] = error;
            file_client.SendString(ALittle.String_JsonEncode(map));
            return;
        }

        // 如果没有任何结果，那么就直接发送失败
        if (result == null)
        {
            var map = new Map<string, any>();
            map["error"] = "接口没有返回任何内容";
            file_client.SendString(ALittle.String_JsonEncode(map));
            return;
        }

        // 返回结果
        file_client.SendString(ALittle.String_JsonEncode(result));
    }
    
    // 处理文件上传结束
    protected fun HandleHttpFileCompletedTask(int http_id, string reason)
    {
        // 获取连接对象
        var file_client = this._http_file_map[http_id];
        if (file_client == null)
        {
            // 如果没有找到，那么就关闭对象
            __CPPAPI_ServerSchedule.HttpClose(http_id);
            return;
        }

        // 处理文件结果
        file_client.HandleReceiveResult(reason);
    }
}

public var A_HttpFileSystem = new HttpFileSystem();