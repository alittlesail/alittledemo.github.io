
namespace ALittle;

// 获取最新的版本时间
private var __VersionTime = 0;
private var __VersionIndex = 0;
public static NewTimeAndIndex() : int, int
{
    var cur_time = lua.os.time();
    if (__VersionTime == cur_time)
        __VersionIndex = __VersionIndex + 1;
    elseif (cur_time > __VersionTime)
    {
        __VersionTime = cur_time;
        __VersionIndex = 0;
    }
    return __VersionTime, __VersionIndex;
}

// 时间常量
public enum TimeSecond
{
    ONE_MINUTE_SECONDS = 60;		// 每分钟对应的秒数
    ONE_HOUR_SECONDS = 3600;	    // 每小时对应的秒数
    ONE_DAY_SECONDS = 86400;	    // 一天的秒数
    ONE_WEEK_DAY = 7;				// 一周需要的天数
    ONE_WEEK_SECONDS = 604800;		// 一周需要的秒数
}

public static DateInfo([Nullable] int time) : lua.dateinfo
{
    return cast<lua.dateinfo>(lua.os.date("*t", time));
}

// 获取明天开始的时间
public static GetNextTodayBeginTime() : int
{
    var date = DateInfo();
    date.hour = 0;
    date.min = 0;
    date.sec = 0;
    return lua.os.time(date) + TimeSecond.ONE_DAY_SECONDS;
}