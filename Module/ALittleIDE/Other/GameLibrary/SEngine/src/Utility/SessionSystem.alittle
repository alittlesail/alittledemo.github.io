
namespace ALittle;

// Session连接接口
public class MsgSessionNative : IMsgCommonNative
{
    private int _connect_key;

    // 设置ID
    public fun SetID(int id) { this._connect_key = id; }
    public fun GetID() : int { return this._connect_key; }

    // 发送数据包
    public fun SendFactory(IMessageWriteFactory factory)
    {
        __CPPAPI_ServerSchedule.SessionSend(this._connect_key, factory);
    }
    
    // 关闭连接
    public fun Close()
    {
        // 主动关闭连接
        __CPPAPI_ServerSchedule.SessionClose(this._connect_key);
        // 消除消息监听
        A_SessionSystem.RemoveSessionServer(this._connect_key);
    }
}

// Session连接
public using MsgSession = MsgSessionTemplate<MsgSessionNative, carp.CarpMessageWriteFactory>;

// Session连接事件
public struct SessionConnectEvent : Event
{
    int connect_key;
    int route_type;
    int route_num;
    MsgSession session;
}

// Session连接断开
public struct SessionDisconnectEvent : Event
{
    int connect_key;
    int route_type;
    int route_num;
    MsgSession session;
}

// 连接信息
private struct ConnectSessionInfo
{
    int route_type;     // 服务器类型
    int route_num;      // 服务器ID
    int connect_key;        // 连接成功之后才会有值
    bool is_connecting; // 只有两种状态，要么已经连，要么就是在连接的路上
}

// Session系统
public class SessionSystem : EventDispatcher
{
    // 路由连接对象集合
    private Map<int, MsgSession> _session_map;
    // 定时连接信息集合
    private Map<string, ConnectSessionInfo> _connect_map;
    // 协程调用连接信息集合
    private Map<string, List<Thread>> _invoke_map;

    public ctor()
    {
        this._session_map = new Map<int, MsgSession>();
        this._connect_map = new Map<string, ConnectSessionInfo>();
        this._invoke_map = new Map<string, List<Thread>>();
    }
    
    public fun GetSessionMap() : Map<int, MsgSession>
    {
        return this._session_map;
    }
    
    public fun SendMsgToAll<T:struct>(T msg)
    {
        for (var connect_key, session in this._session_map)
            session.SendMsg(msg);
    }

    // 移除Session监听对象
    protected fun RemoveSessionServer(int connect_key)
    {
        this._session_map[connect_key] = null;
    }
    
    // 添加Session连接
    public fun AddConnectSession(int route_type, int route_num)
    {
        // 计算Session的key
        var key = route_type.."_"..route_num;

        // 如果已经存在了，那么就直接返回
        var info = this._connect_map[key];
        if (info != null) return;

        // 构建连接信息
        info = new ConnectSessionInfo();
        info.route_type = route_type;
        info.route_num = route_num;
        info.is_connecting = true;
        this._connect_map[key] = info;
        __CPPAPI_ServerSchedule.ConnectSession(route_type, route_num);
    }

    // 组合连接
    public await fun ConnectSession(int route_type, int route_num) : string, IMsgCommon
    {
        // 获取当前协程
        if (co == null) return "当前不是协程", null;
        
        // 计算Session的key
        var key = route_type.."_"..route_num;
        
        // 如果连接信息已存在，并且不是正在连接中，那么就直接返回成功
        var info = this._connect_map[key];
        if (info != null && !info.is_connecting)
        {
            var connect_key = __CPPAPI_ServerSchedule.CalcConnectKey(__CPPAPI_ServerSchedule.GetRouteType()
                , __CPPAPI_ServerSchedule.GetRouteNum(), route_type, route_num);
            var connect = this._session_map[connect_key];
            if (connect != null) return null, connect;
            
            connect_key = __CPPAPI_ServerSchedule.CalcConnectKey(route_type, route_num
                , __CPPAPI_ServerSchedule.GetRouteType(), __CPPAPI_ServerSchedule.GetRouteNum());
            connect = this._session_map[connect_key];
            if (connect != null) return null, connect;
            
            return "连接居然不存在", null;   
        }
        
        // 如果连接不存在，那么就添加
        if (info == null) this.AddConnectSession(route_type, route_num);

        // 添加协程列表
        var list = this._invoke_map[key];
        if (list == null)
        {
            list = new List<Thread>();
            this._invoke_map[key] = list;
        }
        // 添加协程
        List_Push(list, co);
        return yield;
    }

    // 处理连接成功
    protected fun HandleSessionConnect(int connect_key, int route_type, int route_num)
    {
        var session = new MsgSession(connect_key, route_type, route_num);
        this._session_map[connect_key] = session;
        session.HandleConnected();

        var event = new SessionConnectEvent();
        event.target = this;
        event.connect_key = connect_key;
        event.route_type = route_type;
        event.route_num = route_num;
        event.session = session;
        this.DispatchEvent(event);
    }

    // 处理连接断开
    protected fun HandleSessionDisconnect(int connect_key, int route_type, int route_num)
    {
        var session = this._session_map[connect_key];
        if (session != null)
        {
            this._session_map[connect_key] = null;
            session.HandleDisconnected();
        }

        var event = new SessionConnectEvent();
        event.target = this;
        event.connect_key = connect_key;
        event.route_type = route_type;
        event.route_num = route_num;
        event.session = session;
        this.DispatchEvent(event);

        // 断开连接，如果有在主动连接列表中，那么就开始重连
        var key = route_type.."_"..route_num;
        var info = this._connect_map[key];
        if (info != null && info.connect_key == connect_key)
        {
            info.is_connecting = true;
            A_LoopSystem.AddTimer(1000, bind(this.ConnectSessionImpl, this, info), null, null);
        }
    }

    // 处理连接失败
    protected fun HandleConnectSessionFailed(int route_type, int route_num, string reason)
    {
        // 计算Session的key
        var key = route_type.."_"..route_num;

        // 获取所有的协程集合
        var list = this._invoke_map[key];
        if (list != null)
        {
            // 清空
            this._invoke_map[key] = null;
            // 遍历调用
            for (var index, thread in list)
            {
                var result, error = lua.coroutine.resume(thread, reason, null);
                if (result != true) Error(error);
            }
        }

        // 取出信息，然后继续连接
        var info = this._connect_map[key];
        if (info != null)
        {
            info.is_connecting = true;
            A_LoopSystem.AddTimer(1000, bind(this.ConnectSessionImpl, this, info), null, null);
        }
    }

    // 处理主动连接成功
    protected fun HandleConnectSessionSucceed(int connect_key, int route_type, int route_num)
    {
        // 计算Session的key
        var key = route_type.."_"..route_num;
        // 标记信息为不是正在连接
        var info = this._connect_map[key];
        if (info != null)
        {
            info.connect_key = connect_key;
            info.is_connecting = false;
        }
        
        // 取出协程集合
        var list = this._invoke_map[key];
        if (list != null)
        {
            var session = this._session_map[connect_key];
            var error:string = null;
            if (session == null) error = "连接居然不存在";
            // 清空
            this._invoke_map[key] = null;
            // 依次调用
            for (var index, thread in list)
            {
                var result, reason = lua.coroutine.resume(thread, error, session);
                if (result != true) Error(reason);
            }
        }
    }

    // 处理Session消息
    protected fun HandleSessionMessage(int connect_key, int id, int rpc_id, IMessageReadFactory factory)
    {
        var session = this._session_map[connect_key];
        if (session == null) return;

        session.HandleMessage(id, rpc_id, factory);
    }

    // 处理定时连接
    protected fun ConnectSessionImpl(ConnectSessionInfo info)
    {
        __CPPAPI_ServerSchedule.ConnectSession(info.route_type, info.route_num);
    }
}

public var A_SessionSystem = new SessionSystem();