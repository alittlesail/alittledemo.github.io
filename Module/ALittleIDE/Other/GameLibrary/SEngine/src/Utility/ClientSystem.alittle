
namespace ALittle;

// 客户端连接接口
public class MsgReceiverNative : IMsgCommonNative
{
    private int _client_id;

    // 设置和获取ID
    public fun SetID(int id) { this._client_id = id; }
    public fun GetID() : int { return this._client_id; }

    // 发送数据包
    public fun SendFactory(IMessageWriteFactory factory)
    {
        __CPPAPI_ServerSchedule.ClientSend(this._client_id, factory);
    }

    // 关闭连接
    public fun Close()
    {
        // 主动关闭连接
        __CPPAPI_ServerSchedule.ClientClose(this._client_id);
        // 移除消息监听
        A_ClientSystem.RemoveMsgServer(this._client_id);
    }
}

// 客户端连接
public using MsgReceiver = MsgReceiverTemplate<MsgReceiverNative, carp.CarpMessageWriteFactory>;

// 客户端连接成功
public struct ClientConnectEvent : Event
{
    MsgReceiver msg_receiver;
}

// 客户端断开连接
public struct ClientDisconnectEvent : Event
{
    MsgReceiver msg_receiver;
}

// 客户端消息系统
public class ClientSystem : EventDispatcher
{
    // 客户端集合
    private Map<int, MsgReceiver> _client_map;

    public ctor()
    {
        this._client_map = new Map<int, MsgReceiver>();
    }

    // 移除客户端
    protected fun RemoveMsgServer(int client_id)
    {
        this._client_map[client_id] = null;
    }

    // 处理客户端连接
    protected fun HandleClientConnect(int client_id, string remote_ip, int remote_port)
    {
        var client = new MsgReceiver(client_id, remote_ip, remote_port);
        this._client_map[client_id] = client;
        client.HandleConnected();

        var event = new ClientConnectEvent();
        event.target = this;
        event.msg_receiver = client;
        this.DispatchEvent(event);
    }

    // 处理客户端断开
    protected fun HandleClientDisconnect(int client_id)
    {
        var client = this._client_map[client_id];
        if (client == null) return;
        this._client_map[client_id] = null;
        client.HandleDisconnected();

        var event = new ClientDisconnectEvent();
        event.target = this;
        event.msg_receiver = client;
        this.DispatchEvent(event);
    }

    // 处理客户端消息
    protected fun HandleClientMessage(int client_id, int id, int rpc_id, IMessageReadFactory factory)
    {
        var client = this._client_map[client_id];
        if (client == null) return;

        client.HandleMessage(id, rpc_id, factory);
    }
}

public var A_ClientSystem = new ClientSystem();