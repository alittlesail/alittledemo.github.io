
[Language(JavaScript)]
namespace JavaScript;

public class JCsvFile : ALittle.ICsvFile
{
    private string _file_path;
    private int _row_count;
    private int _col_count;
    private List<List<string>> _data;
    
    public ctor()
    {
        this._row_count = 0;
        this._col_count = 0;
        this._file_path = "";
    }
    
    // 添加一行
    private fun addRow(List<string> row) : bool
    {
        // 如果是第一行，那么就保存列总数
        if (this._col_count == 0)
        {
            ++ this._row_count;
            this._data[this._row_count] = row;
            this._col_count = cast<javascript.Array>(row).length;
            return true;
        }
        
        // 如果不是第一行，那么就检查列数量是否一致
        if (cast<javascript.Array>(row).length != this._col_count)
        {
            ALittle.Error("row("..(this._row_count + 1)..") col: "..cast<javascript.Array>(row).length.." != "..this._col_count);
            return false;
        }
    
        // 添加行
        ++ this._row_count;
        this._data[this._row_count] = row;
        return true;
    }
    
    public fun Load(string path) : bool
    {
        // 加载文件
        var content = JavaScript.File_LoadFile(path);
        if (content == null)
        {
            ALittle.Error("file load failed:"..path);
            return false;   
        }
        
        // 保存文件
        this._file_path = path;
        
        // 构建数据
        this._data = new List<List<string>>();
        var data_index = 1;
        
        // 字符游标
        var char_index = 0;
        
        if (char_index >= cast<javascript.String>(content).length)
        {
            ALittle.Error("file is empty:"..this._file_path);
            return false;
        }
        // 读取第一个字符
        var cur_char:int = cast<javascript.String>(content).charCodeAt(char_index);
        ++char_index;
            
        // 读取下一个字符
        if (char_index >= cast<javascript.String>(content).length)
        {
            this._data[1] = new List<string>();
            this._data[1][1] = javascript.String.fromCharCode(cur_char);
            return true;
        }
        var next_char:int = cast<javascript.String>(content).charCodeAt(char_index);
        
        // 标记当前是否在引号中
        var in_quote = false;
        
        // 当前行数据
        var row = new List<string>();
        var row_index = 0;
        // 当前列数据
        var cell = "";
        
        while (true)
        {
            // 如果是分隔符 44 是 ','
            if (cur_char == 44)
            { 
                // 如果在引号中，那么就要添加到当前的字符
                if (in_quote)
                {
                    // 添加到列
                    cell = cell..",";
                    
                    // 如果后面没有数据了，说明没有关闭引号，报错
                    if (next_char == null)
                    {
                        ALittle.Error("row("..this._row_count..") have no close quote");
                        return false;
                    }
                }
                // 如果没有在引号中，那么就要做切割
                else
                {
                    // 添加到行
                    ++row_index;
                    row[row_index] = cell;
                    cell = "";
        
                    // 如果后面没有数据了
                    if (next_char == null)
                    {
                        // 再塞一个空列
                        ++row_index;
                        row[row_index] = "";
                        // 添加到表
                        if (!this.addRow(row)) return false;
                        row_index = 0;
                        row = new List<string>();
                    }
                }
            }
            // 如果是换行 10 是 '\n'
            elseif (cur_char == 10)
            {
                // 如果在引号中，那么就要添加到当前的字符
                if (in_quote)
                {
                    // 添加到列
                    cell = cell.."\n";
                    
                    // 如果后面没有数据了，说明没有关闭引号，报错
                    if (next_char == null)
                    {
                        ALittle.Error("row("..this._row_count..") have no close quote");
                        return false;
                    }
                }
                // 如果没有在引号中，那么就要做切割
                else
                {
                    // 添加到行
                    ++row_index;
                    row[row_index] = cell;
                    cell = "";
                    
                    // 添加到表
                    if (!this.addRow(row)) return false;
                    row_index = 0;
                    row = new List<string>();
                }
            }
            // 如果是引号 34 是 '"'
            elseif (cur_char == 34)
            {
                // 如果在引号中
                if (in_quote)
                {
                    // 如果下一个也是引号，那么当前直接转义为引号
                    if (next_char == 34)
                    {
                        // 添加到列
                        cell = cell .."\"";
                        // 直接读取下一个字符
                        next_char = null;
                        if (char_index + 1 < cast<javascript.String>(content).length)
                        {
                            ++char_index;
                            next_char = cast<javascript.String>(content).charCodeAt(char_index);
                        }
                        // 如果后面没有数据了，说明没有关闭引号，报错
                        if (next_char == null)
                        {
                            ALittle.Error("row("..this._row_count..") have no close quote");
                            return false;
                        }
                    }
                    // 如果下一个不是引号，那么就关闭引号
                    else
                    {
                        in_quote = false;

                        if (next_char == null)
                        {
                            // 添加到行
                            ++row_index;
                            row[row_index] = cell;
                            cell = "";
                    
                            // 添加到表
                            if (!this.addRow(row)) return false;
                            row_index = 0;
                            row = new List<string>();
                        }
                    }
                }
                // 不在引号中，直接标记为在引号中
                else
                {
                    // 如果当前列是空的，那么就标记引号开始
                    if (cast<javascript.String>(cell).length == 0)
                    {
                        in_quote = true;
                    }
                    // 如果当前已经有数据了，那么直接当做普通字符
                    else
                    {
                        cell = cell .."\"";
                    }

        
                    // 如果后面没有数据了，说明没有关闭引号，报错
                    if (next_char == null)
                    {
                        ALittle.Error("row("..this._row_count..") have no close quote");
                        return false;
                    }
                }
            }
            // 其他字符直接添加
            else
            {
                if (in_quote)
                {
                    // 无条件添加字符
                    cell = cell..javascript.String.fromCharCode(cur_char);
                
                    // 如果后面没有数据了，说明没有关闭引号，报错
                    if (next_char == null)
                    {
                        ALittle.Error("row("..this._row_count..") have no close quote");
                        return false;
                    }
                }
                else
                {
                    // 添加到列 13 是 '\r'  10 是 '\n'
                    if (!(cur_char == 13 && next_char == 10))
                    {
                        cell = cell..javascript.String.fromCharCode(cur_char);
                    }

                    // 如果后面没有数据了
                    if (next_char == null)
                    {
                        // 添加到行
                        ++row_index;
                        row[row_index] = cell;
                        cell = "";
                    
                        // 添加到表
                        if (!this.addRow(row)) return false;
                        row_index = 0;
                        row = new List<string>();
                    }
                }

            }

            // 如果没有下个字符了，说明结束了
            if (next_char == null) {
                break;
            }
        
            // 读取下一个字符
            cur_char = next_char;
            next_char = null;
            if (char_index + 1 < cast<javascript.String>(content).length)
            {
                ++char_index;
                next_char = cast<javascript.String>(content).charCodeAt(char_index);
            }
        }
        
        return true;
    }
    
    public fun Close()
    {
        this._data = null;
        this._row_count = 0;
        this._col_count = 0;   
    }
    
    public fun GetPath() : string { return this._file_path; }
    public fun ReadCell(int row, int col) : string { return this._data[row][col]; }
    public fun GetRowCount() : int { return this._row_count; }
    public fun GetColCount() : int { return this._col_count; }
}
