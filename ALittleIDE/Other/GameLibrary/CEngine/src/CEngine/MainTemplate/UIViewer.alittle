
namespace ALittle;

// 壳入口函数
// public static __Browser_Setup(DisplayLayout layer_group, ScriptSystem script, ControlSystem control
//                              , string module_base_path, string script_base_path, string debug)
// {
// }

// 壳处理添加模块，layer_group是模块的层组
// 返回false，或者nil，表示不处理，下面的层直接挂姐在壳下面
// public static __Browser_AddModule(string module_name, DisplayLayout layer_group, ModuleInfo module_info)
// {
// }

// 壳结束函数
// public static __Browser_Shutdown()
// {
// }

protected var g_Control:ControlSystem;
protected var g_LayerGroup:DisplayLayout;
protected var g_ModuleBasePath:string;

struct UIViewModuleDebugInfo
{
    int window_width;
    int window_height;
    string title;
    string ui_name;
}

// 模块入口函数
public static __Module_Setup(DisplayLayout layer_group, ControlSystem control, string module_base_path, string script_base_path, string debug)
{
    // 把resource, layer_group变量保存到全局，便于使用
    g_Control = control;
    g_LayerGroup = layer_group;
    g_ModuleBasePath = module_base_path;

    var error, info:UIViewModuleDebugInfo = tcall(String_JsonDecode, debug);

    //创建窗体
    var screen_width = System_GetScreenWidth();
    var screen_height = System_GetScreenHeight();

    var window_width = info.window_width;
    var window_height = info.window_height;
    var rate = 1.0;
    if (System_GetPlatform() != "Windows")
        window_width = Math_Floor(screen_width / screen_height * window_height);
    else
    {
        if (window_width > screen_width || window_height > screen_height)
            rate = 0.5;
    }
    System_CreateView(info.title, window_width, window_height, ALittle.UIEnumTypes.VIEW_RESIZABLE, rate);

    //创建主层
    var layer = new DisplayLayout(g_Control);
    layer.width_type = UIEnumTypes.SIZE_MARGIN;
    layer.height_type = UIEnumTypes.SIZE_MARGIN;
    g_LayerGroup.AddChild(layer);

    g_Control.CreateControl{ALittle.DisplayObject}(info.ui_name, null, layer);
}

public static PreLoadFile(string ui_name, DisplayLayout layer, bool result)
{
}

// 模块结束函数
public static __Module_Shutdown()
{
}

// 提供给壳的模块信息
public static __Module_GetInfo(ControlSystem control, string base_path) : ModuleShortInfo
{
    var info = new ModuleShortInfo();
    info.title = "UIViewer";
    info.icon = null;
    info.width_type = UIEnumTypes.SIZE_MARGIN;
    info.width_value = 0;
    info.height_type = UIEnumTypes.SIZE_MARGIN;
    info.height_value = 0;
    return info;
}

// 插件入口函数
public static __Plugin_Setup(ControlSystem control, string module_base_path, string script_base_path, string debug)
{
}

// 插件结束函数
public static __Plugin_Shutdown()
{
}
