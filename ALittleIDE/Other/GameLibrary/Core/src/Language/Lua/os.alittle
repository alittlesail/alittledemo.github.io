
[Language(Lua)]
register namespace lua;

public struct dateinfo
{
	int year;
	int month;
	int day;
    int hour;
    int min;
    int sec;

    int wday;
    int yday;
    int isdst;
}

public class os
{
    // Returns an approximation of the amount in seconds of CPU time used by the program.
    public static clock() : int {}

    // Returns a string or a table containing date and time, formatted according to the given string format.
    // If the time argument is present, this is the time to be formatted (see the os.time function for a description of this value).
    //    Otherwise, date formats the current time.
    // If format starts with '!', then the date is formatted in Coordinated Universal Time. After this optional character,
    //    if format is the string "*t", then date returns a table with the following fields:
    //    year (four digits), month (1--12), day (1--31), hour (0--23), min (0--59), sec (0--61), wday (weekday, Sunday is 1), yday (day of the year),
    //    and isdst (daylight saving flag, a boolean).
    //    If format is not "*t", then date returns the date as a string, formatted according to the same rules as the C function strftime.
    // When called without arguments, date returns a reasonable date and time representation that depends on the host system and on the current locale (that is, os.date() is equivalent to os.date("%c")).
    public static date(string value, [Nullable] int time) : string {}

    // Returns the number of seconds from time t1 to time t2. In POSIX, Windows, and some other systems, this value is exactly t2-t1.
    public static difftime(int t2, int t1) : int {}

    // This function is equivalent to the C function system.
    // It passes command to be executed by an operating system shell.
    // It returns a status code, which is system-dependent. If command is absent,
    // then it returns nonzero if a shell is available and zero otherwise.
    public static execute(string content) : int {}

    // Calls the C function exit, with an optional code, to terminate the host program. The default value for code is the success code.
    public static exit(int code) {}

    // Deletes the file or directory with the given name. Directories must be empty to be removed.
    //     If this function fails, it returns nil, plus a string describing the error.
    public static remove(string path) : bool {}

    // Renames file or directory named oldname to newname.
    //     If this function fails, it returns nil, plus a string describing the error.
    public static rename(string old_path, string new_path) : bool {}

    // Returns the current time when called without arguments, or a time representing the date and time specified by the given table.
    // This table must have fields year, month, and day, and may have fields hour, min, sec, and isdst (for a description of these fields, see the os.date function).
    // The returned value is a number, whose meaning depends on your system.
    // In POSIX, Windows, and some other systems, this number counts the number of seconds since some given start time (the "epoch").
    // In other systems, the meaning is not specified, and the number returned by time can be used only as an argument to date and difftime.
    public static time([Nullable] dateinfo table) : int {}
}