namespace GatewayServer;

protected struct RegisterInfo
{
    option primary = "account_id";
    option index = "user_id,phone_number,device_id,account_name";
    int account_id;      // 账号ID
    string user_id;      // 用户编号
    int p_account_id;    // 推荐人ID
    string phone_number; // 手机号码
    string device_id;    // 设备ID
    string account_name; // 账号名
    string account_pwd;  // 账号密码
    int create_time;     // 创建时间
}

class RegisterManager
{
    public ctor()
    {
    }
    
    public await fun Setup()
    {
        var error = A_MysqlSystem.CreateIfNotExit{RegisterInfo}();
        assert(error == null, error);
    }

    public fun Shutdown()
    {

    }
    
    // 生成UserId
    public await fun GenerateUserId() : string
    {
        for (var i = 6; i <= 8; 1)
        {
            for (var k = 1; k <= 100; 1)
            {
                var min = lua.math.pow(10, i-1);
                var max = lua.math.pow(10, i) - 1;
                var user_id = lua.tostring(lua.math.random(min, max));
                var error, count = A_MysqlSystem.SelectCount{RegisterInfo}("user_id", user_id);
                if (error != null) return null;
                if (count <= 0) return user_id;
            }
        }
        return null;
    }
    
    // 生成账号ID
    public await fun GenerateAccountId(int data_route_num) : int
    {
        var max_id = ALittle.MAX_ACCOUNT_ID_BY_DATA_ROUTE_NUM(data_route_num);
        var min_id = ALittle.MIN_ACCOUNT_ID_BY_DATA_ROUTE_NUM(data_route_num);
        
        for (var i = 1; i <= 100; 1)
        {
            var account_id = cast<int>(lua.math.random(min_id, max_id));
            var error, count = A_MysqlSystem.SelectCount{RegisterInfo}("account_id", account_id);
            if (error != null) return null;
            if (count <= 0) return account_id;
        }
        return null;
    }
}

protected var g_RegisterManager = new RegisterManager();

public struct QNormalRegister
{
    string account_name;        // 账号名
    string account_pwd;         // 密码
    string p_user_id;           // 上级UserID
}

public struct QPhoneRegister
{
    string phone_number;        // 手机号码
    string phone_pwd;           // 密码
    string phone_code;          // 验证码
    string p_user_id;           // 上级UserID
}

public struct ARegister
{

}

[Msg]
public await static HandleQNormalRegister(ALittle.IMsgCommon client, QNormalRegister msg) : ARegister
{
    assert(msg.account_name != null && msg.account_name != "", "账号名不能为空");
    assert(msg.account_pwd != null && msg.account_pwd != "", "密码不能为空");
    assert(ALittle.String_IsPhoneNumber(msg.account_name), "账号名，不能是手机号码");
    var error, count = A_MysqlSystem.SelectCount{RegisterInfo}("account_name", msg.account_name);
    if (error != null) throw("数据库操作失败:"..error);
    assert(count == 0, "账号名已被注册");

    // 查找路由
    var data_route_info = g_DataRouteManager.GetRouteInfo();
    assert(data_route_info != null, "没有数据代理服务器可以选择");
    
    var p_info:RegisterInfo = null;
    if (msg.p_user_id != null && msg.p_user_id != "")
    {
        error, p_info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("user_id", msg.p_user_id);
        if (error != null) throw("数据库操作失败"..error);
    }
    
    var user_id = g_RegisterManager.GenerateUserId();
    assert(user_id != null, "编号生成失败");

    var next_id = g_RegisterManager.GenerateAccountId(data_route_info.route_num);
    assert(next_id != null, "账号ID生成失败");

    // 插入数据库
    var info = new RegisterInfo();
    info.account_id = next_id;
    info.user_id = user_id;
    info.p_account_id = 0;
    if (p_info != null) info.p_account_id = p_info.account_id;
    info.phone_number = "";
    info.device_id = "";
    info.account_name = msg.account_name;
    info.account_pwd = ALittle.String_MD5("ALittle"..msg.account_pwd.."ALittle");
    info.create_time = lua.os.time();
    error = A_MysqlSystem.InsertInto(info);
    if (error != null) throw("数据库操作失败:"..error);

    return new ARegister();
}

[Msg]
public await static HandleQPhoneRegister(ALittle.IMsgCommon client, QPhoneRegister msg) : ARegister
{
    assert(msg.phone_number != null && msg.phone_number != "", "手机号码不能为空");
    assert(msg.phone_pwd != null && msg.phone_pwd != "", "密码不能为空");
    
    var error, count = A_MysqlSystem.SelectCount{RegisterInfo}("phone_number", msg.phone_number);
    if (error != null) throw("数据库操作失败:"..error);
    assert (count == 0, "手机号码已被注册");
    error = g_PhoneCodeManager.CheckPhoneCode(msg.phone_number, msg.phone_code);
    assert(error == null, error);

    // 查找路由
    var dp_route_info = g_DataRouteManager.GetRouteInfo();
    assert(dp_route_info != null, "没有数据代理服务器可以选择");

    var user_id = g_RegisterManager.GenerateUserId();
    assert(user_id != null, "编号生成失败");

    var next_id = g_RegisterManager.GenerateAccountId(dp_route_info.route_num);
    assert(next_id != null, "账号ID生成失败");

    var p_info:RegisterInfo = null;
    if (msg.p_user_id != null && msg.p_user_id != "")
    {
        error, p_info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("user_id", msg.p_user_id);
        if (error != null) throw("数据库操作失败:"..error);
    }
        
    // 插入数据库
    var info = new RegisterInfo();
    info.account_id = next_id;
    info.user_id = user_id;
    info.p_account_id = p_info.account_id;
    info.phone_number = msg.phone_number;
    info.device_id = "";
    info.account_name = "";
    info.account_pwd = ALittle.String_MD5("ALittle"..msg.phone_pwd.."ALittle");
    info.create_time = lua.os.time();
    error = A_MysqlSystem.InsertInto(info);
    if (error != null) throw("数据库操作失败:"..error);

    g_PhoneCodeManager.RemovePhoneCode(msg.phone_number);
    return new ARegister();
}

public struct QBindPhone
{
    int account_id;
    string phone_number;
    string phone_code;
}

public struct ABindPhone
{

}

[Msg]
public await static HandleQBindPhone(ALittle.IMsgCommon client, QBindPhone msg) : ABindPhone
{
    assert(msg.phone_number != null && msg.phone_number != "", "手机号码不能为空");

    var error, info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("phone_number", msg.phone_number);
    if (error != null) throw("数据库操作失败:"..error);
    assert(info, "手机号码已被其他账号注册，不能绑定");
    
    error, info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("account_id", msg.account_id);
    if (error != null) throw("数据库操作失败:"..error);
    assert(info, "要绑定的账号不存在");
    
    error = g_PhoneCodeManager.CheckPhoneCode(msg.phone_number, msg.phone_code);
    if (error != null) throw(error);
    
    error = A_MysqlSystem.UpdateSet{RegisterInfo}("phone_number", msg.phone_number, "account_id", msg.account_id);
    if (error != null) throw("绑定失败:"..error);

    g_PhoneCodeManager.RemovePhoneCode(msg.phone_number);
    return new ABindPhone();
}

public struct C2GW_QLogin
{
    string device_id;           // 如果device_id不为空，或者空串，那么就使用设备登录
    string account_name;
    string account_pwd;
}

public struct GW2C_ALogin
{
    string client_ip;   // GameServer的IP
    int client_port;    // GameServer的端口
    int account_id;     // 账号ID
    string session_id;  // 会话ID
}

[Http]
public await static HandleQLogin(ALittle.IHttpReceiver client, C2GW_QLogin msg) : GW2C_ALogin
{
    var info:RegisterInfo = null;
    // 如果有填设备ID，那么就以设备ID进行登录
    if (msg.device_id != null && msg.device_id != "")
    {
        // 根据设备ID查询，如果有查到那么就算是查到了
        var error:string = null;
        error, info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("device_id", msg.device_id);
        if (info == null)
        {
            // 没有查到，那么就选择一个最优的data服务器
            var data_route_info = g_DataRouteManager.GetRouteInfo();
            assert(data_route_info != null, "没有数据代理服务器可以选择");
        
            // 生成user_id
            var user_id = g_RegisterManager.GenerateUserId();
            assert(user_id != null, "编号生成失败");
        
            // 生成account_id
            var next_id = g_RegisterManager.GenerateAccountId(data_route_info.route_num);
            assert(next_id != null, "账号ID生成失败");
            
            info = new RegisterInfo();
            info.account_id = next_id;
            info.user_id = user_id;
            info.phone_number = "";
            info.account_name = "";
            info.account_pwd = "";
            info.create_time = lua.os.time();
            info.device_id = msg.device_id;
            error = A_MysqlSystem.InsertInto(info);
            if (error != null) throw("数据库操作失败:"..error);
        }
    }
    else
    {
        assert(msg.account_name != null && msg.account_name != "", "账号名不能为空");
        assert(msg.account_pwd != null && msg.account_pwd != "", "密码不能为空");
    
        var error:string = null;
        error, info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("account_name", msg.account_name);
        if (error != null) throw("数据库操作失败:"..error);
        if (info == null)
        {
            error, info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("phone_number", msg.account_name);
            if (error != null) throw("数据库操作失败:"..error);
            assert(info != null, "账号或密码错误");      
        }
    
        // 检查密码是否正确
        assert(info.account_pwd == ALittle.String_MD5("ALittle"..msg.account_pwd.."ALittle"), "账号或密码错误");
    }
    
    // 查找Data服务器
    var data_route_num = ALittle.GET_DATA_ROUTE_NUM_BY_ACCOUNT_ID(info.account_id);
    var data_route_info = g_DataRouteManager.FindRouteInfo(data_route_num);
    assert(data_route_info, "没有找到DataServer的路由信息");
    
    // 查找询问对应的data分配GameServer
    var param = new DataServer.GW2DATA_QLogin();
    param.account_id = info.account_id;
    var error, result = DataServer.HandleQLogin(data_route_info.session, param);
    if (error != null) throw("error");  
    
    // 应答
    var anwser = new GW2C_ALogin();
    anwser.account_id = info.account_id;
    anwser.client_ip = result.client_ip;
    anwser.client_port = result.client_port;
    anwser.session_id = result.session_id;
    return anwser;
}

public struct QChangePwd
{
    int account_id;
    string old_pwd;
    string new_pwd;
}

public struct AChangePwd
{

}

[Msg]
public await static HandleQChangePwd(ALittle.IMsgCommon client, QChangePwd msg) : AChangePwd
{
    var error, info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("account_id", msg.account_id);
    if (error != null) throw("密码修改失败:"..error);
    assert(info != null, "账号不存在");

    assert(info.account_pwd != null && info.account_pwd == ALittle.String_MD5("ALittle"..msg.old_pwd.."ALittle"), "原密码不正确");

    var account_pwd_md5 = ALittle.String_MD5("ALittle"..msg.new_pwd.."ALittle");
    error = A_MysqlSystem.UpdateSet{RegisterInfo}("account_pwd", account_pwd_md5, "account_id", info.account_id);
    if (error != null) throw("密码修改失败:"..error);
    
    return new AChangePwd();
}

public struct QForgotPwd
{
    string phone_number;
    string phone_code;
    string new_pwd;
}

public struct AForgotPwd
{

}

[Msg]
public await static HandleQForgotPwd(ALittle.IMsgCommon client, QForgotPwd msg) : AForgotPwd
{
    assert(msg.phone_number != null && msg.phone_number != "", "手机号码不能为空");

    var error, info = A_MysqlSystem.SelectOneFromByKey{RegisterInfo}("phone_number", msg.phone_number);
    if (error != null) throw("数据库操作失败:"..error);
    assert(info, "手机号码不存在");
    
    error = g_PhoneCodeManager.CheckPhoneCode(msg.phone_number, msg.phone_code);
    if (error != null) throw(error);

    var new_pwd_md5 = ALittle.String_MD5("ALittle"..msg.new_pwd.."ALittle");
    error = A_MysqlSystem.UpdateSet{RegisterInfo}("account_pwd", new_pwd_md5, "phone_number", msg.phone_number);
    if (error != null) throw("修改失败:"..error);
    
    g_PhoneCodeManager.RemovePhoneCode(msg.phone_number);

    return new AForgotPwd();
}