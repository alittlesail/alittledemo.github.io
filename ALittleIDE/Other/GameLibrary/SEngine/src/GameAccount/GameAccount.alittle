namespace ALittle;

protected enum GameAccountStatus
{
    CREATE  = 1;        // 刚刚创建
    LOADING = 2;        // 正在加载
    CACHE   = 3;        // 缓存
    ONLINE  = 4;        // 在线
}

public class GameModule
{
    private GameAccount _account;
    
    public ctor(GameAccount account)
    {
        this._account = account;
        this._account.RegisterModule(this);
    }
    
    // 获取数据的反射信息
    public fun GetDataReflect() : ALittle.StructInfo { return null; }
    // 释放所有内容
    public fun Release() {}
    // 是否有数据
    public fun HasData() : bool { return false; }
    // 加载数据
    public async fun LoadData(IMsgCommon session) {}
    // 备份数据
    public fun BackupData(IMsgCommon session) {}
    
    // 数据加载完成
    public fun OnDataReady() {}
    // 发送模块数据
    public fun OnSendData() {}
    // 登出操作
    public fun OnLogout() {}
}

public class GameModuleTemplate<T:struct> : GameModule
{
    private T _data;
    
    public fun GetDataReflect() : ALittle.StructInfo { return reflect<T>; }
    
    public fun OnSendData()
    {
        this._account.SendMsg(this._data);
    }
    
    public fun HasData() : bool { return true; }
    
    public async fun LoadData(IMsgCommon session)
    {
        if (session == null)
        {
            Error(lua.tostring(this).." session == null");
            this._account.LoadOneCompleted(false);
            return;
        }
        
        var rflt = this.GetDataReflect();
        if (rflt == null)
        {
            Error(lua.tostring(this)..":GetDataReflect() == null");
            this._account.LoadOneCompleted(false);
            return;
        }
        
        var param = new DataServer.GS2DATA_QLoadStruct();
        param.account_id = this._account.GetId();
        param.hash_code = rflt.hash_code;
        var error, result = DataServer.HandleQLoadStruct(session, param);
        if (error != null)
        {
            Error(lua.tostring(this).." DataServer.HandleQLoadStruct() failed:"..error);
            this._account.LoadOneCompleted(false);
            return;
        }
        this._data = cast<T>(result.value);
        this._account.LoadOneCompleted(true);
    }
    
    public fun BackupData(IMsgCommon session)
    {
        if (session == null) return;
        
        var rflt = this.GetDataReflect();
        if (rflt == null)
        {
            Error(lua.tostring(this)..":GetDataReflect() == null");
            this._account.LoadOneCompleted(false);
            return;
        }
        
        var param = new DataServer.GS2DATA_NBackupStruct();
        param.account_id = this._account.GetId();
        param.data = new ALittle.ProtocolAnyStruct();
        param.data.hash_code = rflt.hash_code;
        param.data.value = this._data;
        session.SendMsg(param);
    }
}

public struct GS2C_NAccountInfo
{
    string session_code;
    int account_id;
    int gs_route_id;
}

// Game账号
public class GameAccount
{
    private int _id;
    private int _status;
    private IMsgCommon _client;
    private string _session;
    
    // 正在加载的数量
    private int _loading_count;
    // 是否失败
    private bool _loading_failed;
    
    private Map<string, GameModule> _module_map;
    
    // 备份定时器
    private int _backup_timer;
    private int _BACKUP_INTERVAL;
    // cache定时器
    private int _cache_timer;
    private int _CACHE_INTERVAL;
    
    public ctor(int id)
    {
        this._id = id;
        this._loading_count = 0;
        this._loading_failed = false;
        this._status = GameAccountStatus.CREATE;
        this._module_map = new Map<string, GameModule>();
        
        this._BACKUP_INTERVAL = 10 * 1000;
        this._CACHE_INTERVAL = 30 * 1000;
        this._session = lua.tostring(lua.math.random(10000, 99999));
    }
    
    protected fun Release()
    {       
        for (var name, module in this._module_map)
            module.Release();
        this.StopBackupTimer();
        this.StopCacheTimer();
    }
    
    public fun GetId() : int { return this._id; }
    
    protected fun SetClient(IMsgCommon client) { this._client = client; }
    protected fun GetClient() : IMsgCommon { return this._client; }
    
    protected fun GetStatus() : int { return this._status; }
    protected fun SetStatus(int status) { this._status = status; }
    
    protected fun GetSession() : string { return this._session; }
    
    // 注册模块
    protected fun RegisterModule(GameModule module)
    {
        var rflt = reflect(module);
        this._module_map[rflt.__name] = module;
    }
    
    // 获取所有模块的反射信息，建表信息
    protected fun GetAllDataReflect() : List<ALittle.StructInfo>, Map<int, bool>
    {
        var map = new Map<int, ALittle.StructInfo>();
        var table_map = new Map<int, bool>();
        for (var name, module in this._module_map)
        {
            var rflt = module.GetDataReflect();
            if (rflt != null)
            {
                table_map[rflt.hash_code] = true;
                var error = ALittle.CollectStructReflect(rflt, map);
                if (error != null) Error(error);   
            }
        }
        
        var rflt_list = new List<ALittle.StructInfo>();
        var count = 0;
        for (var hash_code, info in map)
        {
            ++ count;
            rflt_list[count] = info;
        }
        return rflt_list, table_map;
    }
    
    // 启动加载
    protected fun StartLoading(IMsgCommon session)
    {   
        // 发送反射信息
        if (!A_GameAccountManager.IsSendModuleReflect(session))
        {
            var rflt_list, table_map = this.GetAllDataReflect();
            A_GameAccountManager.SendModuleReflect(session, rflt_list, table_map);   
        }
        
        // 先统计模块数量
        this._loading_count = 0;
        for (var name, module in this._module_map)
        {
            if (module.HasData())
                ++this._loading_count;
        }
        
        if (this._loading_count == 0)
        {
            this.LoadOneCompletedImpl();
            return;
        }
        
        // 开始加载        
        for (var name, module in this._module_map)
            module.LoadData(session);
    }
    
    // 加载情况
    protected fun LoadOneCompleted(bool result)
    {
        -- this._loading_count;
        if (!result) this._loading_failed = true;
        
        // 处理加载完毕
        if (this._loading_count > 0) return;
        
        this.LoadOneCompletedImpl();
    }
    
    private fun LoadOneCompletedImpl()
    {
        // 检查当前account是否还是有效的
        var account = A_GameAccountManager.GetAccountById{GameAccount}(this._id);
        if (account != this) return;
        
        // 数据加载完成
        this.OnDataReady();
        
        if (this._client != null)
        {
            this.SetStatus(GameAccountStatus.ONLINE);
            this.LoginAction();
        }
        else
        {
            this.SetStatus(GameAccountStatus.CACHE);
            this.StartCacheTimer();
        }
        
        // 启动备份定时
        this.StartBackupTimer();
    }
    
    // 启动备份定时
    protected fun StartBackupTimer()
    {
        ALittle.Log("StartBackupTimer, account_id:"..this._id);
        if (this._backup_timer != null) A_LoopSystem.RemoveTimer(this._backup_timer);
        this._backup_timer = A_LoopSystem.AddTimer(this._BACKUP_INTERVAL, bind(this.Backup, this), 0, this._BACKUP_INTERVAL);
    }
    
    // 停止备份定时
    protected fun StopBackupTimer()
    {
        if (this._backup_timer == null) return;
        
        ALittle.Log("StopBackupTimer, account_id:"..this._id);
        A_LoopSystem.RemoveTimer(this._backup_timer);
        this._backup_timer = null;
    }
    
    // 启动cache超时定时器
    protected fun StartCacheTimer()
    {
        ALittle.Log("StartCacheTimer, account_id:"..this._id);
        if (this._cache_timer != null) A_LoopSystem.RemoveTimer(this._cache_timer);
        this._cache_timer = A_LoopSystem.AddTimer(this._CACHE_INTERVAL, bind(this.CacheTimeout, this));
    }
    
    // 停止cache超时定时器
    protected fun StopCacheTimer()
    {
        if (this._cache_timer == null) return;
        
        ALittle.Log("StopCacheTimer, account_id:"..this._id);
        A_LoopSystem.RemoveTimer(this._cache_timer);
        this._cache_timer = null;
    }
    
    // cache超时
    protected fun CacheTimeout()
    {
        ALittle.Log("CacheTimeout, account_id:"..this._id);
        this._cache_timer = null;
        // 备份
        this.Backup();
        // 放弃租约
        g_GameLeaseManager.ReleaseLease(this._id);
        // 删除账号
        A_GameAccountManager.DeleteAccount(this);
    }
    
    // 备份
    protected fun Backup()
    {
        ALittle.Log("Backup, account_id:"..this._id);
        var lease_info = g_GameLeaseManager.GetLease(this._id);
        if (lease_info == null || lease_info.session == null) return;
        for (var name, module in this._module_map)
            module.BackupData(lease_info.session);
    }
    
    // 下线
    protected fun LogoutAction()
    {
        for (var name, module in this._module_map)
            module.OnLogout();
        this.Backup();
    }
    
    // 数据加载完毕
    protected fun OnDataReady()
    {
        for (var name, module in this._module_map)
            module.OnDataReady();
    }
    
    // 上线
    protected fun LoginAction()
    {
        // 发送基本账号信息
        var param = new GS2C_NAccountInfo();
        param.account_id = this._id;
        param.gs_route_id = __CPPAPI_ServerSchedule.GetRouteId();
        param.session_code = this._session;
        this.SendMsg(param);
        
        // 发送所有模块信息
        for (var name, module in this._module_map)
            module.OnSendData();
        
        // 发送数据加载完成
        this.SendMsg(new GS2C_NDataReady());
    }
    
    // 发送数据包
    public fun SendMsg<T:struct>(T msg)
    {
        if (this._client == null) return;
        this._client.SendMsg(msg);
    }
}